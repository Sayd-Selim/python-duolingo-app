const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb+srv://SPEC:selim@spec.qqcpstm.mongodb.net/Python', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ server.js)
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  role: { type: String, enum: ['student', 'admin'], default: 'student' },
  level: { type: Number, default: 1 },
  experience: { type: Number, default: 0 },
  streak: { type: Number, default: 0 },
  gems: { type: Number, default: 0 },
  avatar: { type: String, default: 'üë§' },
  lesson1: { type: Boolean, default: true },
  lesson2: { type: Boolean, default: false },
  lesson3: { type: Boolean, default: false },
  lesson4: { type: Boolean, default: false },
  lesson5: { type: Boolean, default: false },
  lesson6: { type: Boolean, default: false },
  lesson7: { type: Boolean, default: false },
  lesson8: { type: Boolean, default: false },
  lesson9: { type: Boolean, default: false },
  lesson10: { type: Boolean, default: false },
  lesson11: { type: Boolean, default: false },
  lesson12: { type: Boolean, default: false },
  lesson13: { type: Boolean, default: false },
  lesson14: { type: Boolean, default: false },
  lesson15: { type: Boolean, default: false },
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º - —Ç–µ–ø–µ—Ä—å –ø—Ä—è–º–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  progress: {
    type: Map,
    of: {
      progress: { type: Number, default: 0 }, // 0-100%
      completed: { type: Boolean, default: false },
      score: { type: Number, default: 0 },
      attempts: { type: Number, default: 0 },
      timeSpent: { type: Number, default: 0 }, // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      lastAttempt: { type: Date, default: Date.now },
      lastUpdated: { type: Date, default: Date.now }
    },
    default: new Map()
  },
  createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

async function checkUsers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const users = await User.find({});
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name} (${user.username})`);
      console.log(`   –†–æ–ª—å: ${user.role}, –£—Ä–æ–≤–µ–Ω—å: ${user.level}`);
      console.log(`   –î–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º:`);
      
      for (let i = 1; i <= 15; i++) {
        const lessonKey = `lesson${i}`;
        const hasAccess = user[lessonKey];
        const status = hasAccess ? '‚úÖ' : '‚ùå';
        console.log(`     –£—Ä–æ–∫ ${i}: ${status} ${hasAccess ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
      }
      
      console.log(''); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    });
    
    console.log('üí° –ß—Ç–æ–±—ã –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ MongoDB Compass');
    console.log('2. –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "users"');
    console.log('3. –ò–∑–º–µ–Ω–∏—Ç–µ lesson2: false –Ω–∞ lesson2: true');
    console.log('4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    mongoose.connection.close();
  }
}

checkUsers(); 