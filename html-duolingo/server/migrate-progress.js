const mongoose = require('mongoose');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect('mongodb+srv://SPEC:selim@spec.qqcpstm.mongodb.net/Python', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ Progress (–¥–ª—è —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
const progressSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  lessonId: { type: Number, required: true },
  progress: { type: Number, default: 0 },
  completed: { type: Boolean, default: false },
  score: { type: Number, default: 0 },
  attempts: { type: Number, default: 0 },
  timeSpent: { type: Number, default: 0 },
  lastAttempt: { type: Date, default: Date.now },
  lastUpdated: { type: Date, default: Date.now }
});

// –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  role: { type: String, enum: ['student', 'admin'], default: 'student' },
  level: { type: Number, default: 1 },
  experience: { type: Number, default: 0 },
  streak: { type: Number, default: 0 },
  gems: { type: Number, default: 0 },
  avatar: { type: String, default: 'üë§' },
  lesson1: { type: Boolean, default: true },
  lesson2: { type: Boolean, default: false },
  lesson3: { type: Boolean, default: false },
  lesson4: { type: Boolean, default: false },
  lesson5: { type: Boolean, default: false },
  lesson6: { type: Boolean, default: false },
  lesson7: { type: Boolean, default: false },
  lesson8: { type: Boolean, default: false },
  lesson9: { type: Boolean, default: false },
  lesson10: { type: Boolean, default: false },
  lesson11: { type: Boolean, default: false },
  lesson12: { type: Boolean, default: false },
  lesson13: { type: Boolean, default: false },
  lesson14: { type: Boolean, default: false },
  lesson15: { type: Boolean, default: false },
  progress: {
    type: Map,
    of: {
      progress: { type: Number, default: 0 },
      completed: { type: Boolean, default: false },
      score: { type: Number, default: 0 },
      attempts: { type: Number, default: 0 },
      timeSpent: { type: Number, default: 0 },
      lastAttempt: { type: Date, default: Date.now },
      lastUpdated: { type: Date, default: Date.now }
    },
    default: new Map()
  },
  createdAt: { type: Date, default: Date.now }
});

const Progress = mongoose.model('Progress', progressSchema);
const User = mongoose.model('User', userSchema);

async function migrateProgress() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const allProgress = await Progress.find({});
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${allProgress.length}`);
    
    if (allProgress.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const progressByUser = {};
    allProgress.forEach(progress => {
      const userId = progress.userId.toString();
      if (!progressByUser[userId]) {
        progressByUser[userId] = [];
      }
      progressByUser[userId].push(progress);
    });
    
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: ${Object.keys(progressByUser).length}\n`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let updatedUsers = 0;
    for (const [userId, userProgress] of Object.entries(progressByUser)) {
      try {
        const user = await User.findById(userId);
        if (!user) {
          console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Map –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userProgress.forEach(progress => {
          user.progress.set(progress.lessonId.toString(), {
            progress: progress.progress,
            completed: progress.completed,
            score: progress.score,
            attempts: progress.attempts,
            timeSpent: progress.timeSpent,
            lastAttempt: progress.lastAttempt,
            lastUpdated: progress.lastUpdated
          });
        });
        
        await user.save();
        updatedUsers++;
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –æ–±–Ω–æ–≤–ª–µ–Ω (${userProgress.length} —É—Ä–æ–∫–æ–≤)`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
      }
    }
    
    console.log(`\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${updatedUsers}`);
    console.log(`üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${allProgress.length}`);
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é Progress...');
    await mongoose.connection.db.dropCollection('progresses');
    console.log('‚úÖ –°—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    mongoose.connection.close();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateProgress(); 