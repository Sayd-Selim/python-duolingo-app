const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
mongoose.connect('mongodb+srv://SPEC:selim@spec.qqcpstm.mongodb.net/Python', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB!');
});

// –°—Ö–µ–º—ã –¥–ª—è MongoDB
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  role: { type: String, enum: ['student', 'admin'], default: 'student' },
  level: { type: Number, default: 1 },
  experience: { type: Number, default: 0 },
  streak: { type: Number, default: 0 },
  gems: { type: Number, default: 0 },
  avatar: { type: String, default: 'üë§' },
  // –î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º - –ø—Ä–æ—Å—Ç–æ true/false –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
  lesson1: { type: Boolean, default: true },   // –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
  lesson2: { type: Boolean, default: false },
  lesson3: { type: Boolean, default: false },
  lesson4: { type: Boolean, default: false },
  lesson5: { type: Boolean, default: false },
  lesson6: { type: Boolean, default: false },
  lesson7: { type: Boolean, default: false },
  lesson8: { type: Boolean, default: false },
  lesson9: { type: Boolean, default: false },
  lesson10: { type: Boolean, default: false },
  lesson11: { type: Boolean, default: false },
  lesson12: { type: Boolean, default: false },
  lesson13: { type: Boolean, default: false },
  lesson14: { type: Boolean, default: false },
  lesson15: { type: Boolean, default: false },
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º - —Ç–µ–ø–µ—Ä—å –ø—Ä—è–º–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  progress: {
    type: Map,
    of: {
      progress: { type: Number, default: 0 }, // 0-100%
      completed: { type: Boolean, default: false },
      score: { type: Number, default: 0 },
      attempts: { type: Number, default: 0 },
      timeSpent: { type: Number, default: 0 }, // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      lastAttempt: { type: Date, default: Date.now },
      lastUpdated: { type: Date, default: Date.now }
    },
    default: new Map()
  },
  createdAt: { type: Date, default: Date.now }
});

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–µ–π —É—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
userSchema.pre('save', function(next) {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —É—Ä–æ–∫–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  for (let i = 1; i <= 15; i++) {
    const lessonKey = `lesson${i}`;
    if (this[lessonKey] === undefined) {
      this[lessonKey] = i === 1 ? true : false; // lesson1 = true, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = false
    }
  }
  next();
});

const User = mongoose.model('User', userSchema);

// –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ
console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');

// –†–æ—É—Ç—ã

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
  try {
    const { username, password, name } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ —É—Ä–æ–∫–æ–≤
    const userData = {
      username,
      password,
      name,
      lesson1: true,   // –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º
      lesson2: false,  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      lesson3: false,
      lesson4: false,
      lesson5: false,
      lesson6: false,
      lesson7: false,
      lesson8: false,
      lesson9: false,
      lesson10: false,
      lesson11: false,
      lesson12: false,
      lesson13: false,
      lesson14: false,
      lesson15: false
    };
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = new User(userData);
    await user.save();
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ —É—Ä–æ–∫–æ–≤:', user.username);
    
    res.json({ 
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 
      userId: user._id,
      username: user.username,
      name: user.name
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { username });
    
    const user = await User.findOne({ username, password });
    if (!user) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è:', username);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–∞—Ö –∫ —É—Ä–æ–∫–∞–º
    const lessonAccess = {};
    for (let i = 1; i <= 15; i++) {
      const lessonKey = `lesson${i}`;
      lessonAccess[lessonKey] = user[lessonKey] || false;
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
    console.log('üìö –î–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º:', lessonAccess);
    
    res.json({ 
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 
      userId: user._id,
      username: user.username,
      name: user.name,
      role: user.role,
      level: user.level,
      experience: user.experience,
      gems: user.gems,
      lessonAccess
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
app.post('/api/progress', async (req, res) => {
  try {
    const { userId, lessonId, progress, completed, score, timeSpent } = req.body;
    
    console.log('üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', { userId, lessonId, progress, completed, score, timeSpent });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É
    const user = await User.findById(userId);
    const lessonKey = `lesson${lessonId}`;
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!user[lessonKey]) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É:', lessonKey);
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    const lessonIdStr = lessonId.toString();
    let progressRecord = user.progress.get(lessonIdStr);
    
    if (progressRecord) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      progressRecord.progress = progress;
      progressRecord.completed = completed;
      progressRecord.score = score || progressRecord.score;
      progressRecord.attempts += 1;
      progressRecord.timeSpent += timeSpent || 0;
      progressRecord.lastAttempt = new Date();
      progressRecord.lastUpdated = new Date();
      progressRecord.lessonId = parseInt(lessonIdStr); // –¥–æ–±–∞–≤–ª—è–µ–º lessonId
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      progressRecord = {
        lessonId: parseInt(lessonIdStr), // –¥–æ–±–∞–≤–ª—è–µ–º lessonId
        progress,
        completed,
        score: score || 0,
        attempts: 1,
        timeSpent: timeSpent || 0,
        lastAttempt: new Date(),
        lastUpdated: new Date()
      };
    }
    
    user.progress.set(lessonIdStr, progressRecord);
    await user.save();
    
    console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞', lessonId, ':', progressRecord);
    
    // –ï—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (completed) {
      const xpGained = Math.floor(score || 100);
      user.experience += xpGained;
      user.level = Math.floor(user.experience / 100) + 1;
      user.gems += Math.floor(xpGained / 10);
      await user.save();
      console.log('üéâ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! XP:', xpGained, '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:', user.level);
    }
    
    res.json({ 
      message: '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 
      progress: progressRecord,
      userStats: {
        level: user.level,
        experience: user.experience,
        gems: user.gems
      }
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/progress/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üìä –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const user = await User.findById(userId);
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const progress = user.progress && typeof user.progress.entries === 'function'
      ? Array.from(user.progress.entries()).map(([lessonId, progressData]) => ({
          lessonId: parseInt(lessonId),
          ...progressData
        }))
      : [];
    
    console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', progress);
    res.json(progress);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥—Ä—É–∑–µ–π)
app.get('/api/progress', async (req, res) => {
  try {
    const allUsers = await User.find();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const usersProgress = {};
    allUsers.forEach(user => {
      const userId = user._id.toString();
      if (!usersProgress[userId]) {
        usersProgress[userId] = {
          user: {
            _id: user._id,
            username: user.username,
            name: user.name
          },
          lessons: []
        };
      }
      const progressArray = user.progress && typeof user.progress.entries === 'function'
        ? Array.from(user.progress.entries())
        : [];
      progressArray.forEach(([lessonId, progressData]) => {
        usersProgress[userId].lessons.push({
          lessonId: parseInt(lessonId),
          progress: progressData.progress,
          completed: progressData.completed,
          lastUpdated: progressData.lastUpdated
        });
      });
    });
    
    res.json(Object.values(usersProgress));
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find({}, 'username name role level experience lesson1 lesson2 lesson3 lesson4 lesson5 lesson6 lesson7 lesson8 lesson9 lesson10 lesson11 lesson12 lesson13 lesson14 lesson15');
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
app.get('/api/users/all', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({}, 'username name role level experience createdAt');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const usersWithProgress = users.map(user => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ progress —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è Map
      const userProgress = user.progress && typeof user.progress.entries === 'function' 
        ? Array.from(user.progress.entries())
        : [];
      const completedLessons = userProgress
        .filter(([lessonId, progressData]) => progressData.completed)
        .map(([lessonId, progressData]) => parseInt(lessonId));
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π)
      let currentLesson = null;
      if (userProgress.length > 0) {
        const lastActive = userProgress.reduce((latest, current) => 
          new Date(current[1].lastUpdated) > new Date(latest[1].lastUpdated) ? current : latest
        );
        currentLesson = parseInt(lastActive[0]);
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      let lastActivity = null;
      if (userProgress.length > 0) {
        const lastUpdate = userProgress.reduce((latest, current) => 
          new Date(current[1].lastUpdated) > new Date(latest[1].lastUpdated) ? current : latest
        );
        lastActivity = lastUpdate[1].lastUpdated;
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
      let createdAt = user.createdAt;
      if (!createdAt || createdAt > new Date()) {
        createdAt = new Date(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      }
      
      return {
        _id: user._id,
        username: user.username,
        name: user.name,
        role: user.role,
        level: user.level,
        experience: user.experience,
        createdAt: createdAt,
        currentLesson: currentLesson,
        completedLessons: completedLessons,
        lastActivity: lastActivity,
        totalLessons: userProgress.length,
        completedCount: completedLessons.length
      };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–≤–µ—Ä—Ö—É)
    usersWithProgress.sort((a, b) => {
      if (!a.lastActivity && !b.lastActivity) return 0;
      if (!a.lastActivity) return 1;
      if (!b.lastActivity) return -1;
      return new Date(b.lastActivity) - new Date(a.lastActivity);
    });
    
    res.json(usersWithProgress);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/user/:userId/activity', async (req, res) => {
  try {
    const { userId } = req.params;
    const { currentLesson } = req.body;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    if (currentLesson) {
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      const lessonKey = `lesson${currentLesson}`;
      const currentLessonStr = currentLesson.toString();
      const progressRecord = user.progress.get(currentLessonStr);
      if (progressRecord) {
        progressRecord.lastUpdated = new Date();
        user.progress.set(currentLessonStr, progressRecord);
        await user.save();
      }
    }
    
    res.json({ message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/lessons', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userProgress = user.progress && typeof user.progress.entries === 'function'
      ? Array.from(user.progress.entries())
      : [];
    const progressMap = {};
    userProgress.forEach(([lessonId, progressData]) => {
      progressMap[parseInt(lessonId)] = progressData;
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é
    const lessons = [];
    for (let i = 1; i <= 15; i++) {
      const lessonKey = `lesson${i}`;
      const hasAccess = user[lessonKey];
      const progress = progressMap[i] || null;
      
      lessons.push({
        lessonId: i,
        title: `–£—Ä–æ–∫ ${i}`,
        hasAccess,
        progress: progress ? {
          progress: progress.progress,
          completed: progress.completed,
          score: progress.score,
          attempts: progress.attempts,
          timeSpent: progress.timeSpent,
          lastAttempt: progress.lastAttempt
        } : null
      });
    }
    
    res.json(lessons);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
app.put('/api/admin/user/:userId/lesson/:lessonId', async (req, res) => {
  try {
    const { userId, lessonId } = req.params;
    const { hasAccess } = req.body;
    
    const lessonKey = `lesson${lessonId}`;
    const updateData = {};
    updateData[lessonKey] = hasAccess;
    
    const user = await User.findByIdAndUpdate(userId, updateData, { new: true });
    res.json({ message: `–î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É ${lessonId} ${hasAccess ? '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' : '–æ—Ç–æ–∑–≤–∞–Ω'}`, user });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:userId/stats', async (req, res) => {
  try {
    const { userId } = req.params;
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const progress = user.progress && typeof user.progress.values === 'function'
      ? Array.from(user.progress.values())
      : [];
    const completedLessons = progress.filter(p => p.completed).length;
    const totalProgress = progress.reduce((sum, p) => sum + p.progress, 0);
    const averageProgress = progress.length > 0 ? totalProgress / progress.length : 0;
    const totalTimeSpent = progress.reduce((sum, p) => sum + p.timeSpent, 0);
    const totalAttempts = progress.reduce((sum, p) => sum + p.attempts, 0);
    
    const stats = {
      user: {
        name: user.name,
        level: user.level,
        experience: user.experience,
        streak: user.streak,
        gems: user.gems
      },
      lessons: {
        completed: completedLessons,
        total: progress.length,
        averageProgress: Math.round(averageProgress),
        totalTimeSpent,
        totalAttempts
      }
    };
    
    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', timestamp: new Date().toISOString() });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find({}, 'username name role level experience lesson1 lesson2 lesson3 lesson4 lesson5 lesson6 lesson7 lesson8 lesson9 lesson10 lesson11 lesson12 lesson13 lesson14 lesson15');
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`MongoDB URL: mongodb://localhost:27017/duolingo`);
}); 