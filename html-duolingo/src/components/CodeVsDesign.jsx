import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

const CodeVsDesign = () => {
  const [userCode, setUserCode] = useState('');
  const [isCorrect, setIsCorrect] = useState(null);
  const [showHint, setShowHint] = useState(false);
  const [currentLevel, setCurrentLevel] = useState(0);

  const levels = [
    {
      title: "–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
      description: "–°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º",
      design: (
        <div className="w-64 p-4 bg-white rounded-lg shadow-md">
          <h2 className="text-xl font-bold text-gray-800 mb-2">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</h2>
          <p className="text-gray-600">–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.</p>
        </div>
      ),
      solution: `<div class="w-64 p-4 bg-white rounded-lg shadow-md">
  <h2 class="text-xl font-bold text-gray-800 mb-2">–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</h2>
  <p class="text-gray-600">–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç.</p>
</div>`,
      hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ div —Å –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏, h2 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ p –¥–ª—è —Ç–µ–∫—Å—Ç–∞"
    },
    {
      title: "–ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π",
      description: "–°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º",
      design: (
        <button className="flex items-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
          <span className="mr-2">üöÄ</span>
          –ù–∞—á–∞—Ç—å
        </button>
      ),
      solution: `<button class="flex items-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
  <span class="mr-2">üöÄ</span>
  –ù–∞—á–∞—Ç—å
</button>`,
      hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ button —Å flex –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞"
    },
    {
      title: "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      description: "–°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
      design: (
        <div className="w-80 p-6 bg-white rounded-xl shadow-lg">
          <div className="flex items-center mb-4">
            <div className="w-16 h-16 bg-gray-200 rounded-full mr-4"></div>
            <div>
              <h3 className="text-lg font-semibold text-gray-800">–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</h3>
              <p className="text-gray-500">Frontend Developer</p>
            </div>
          </div>
          <div className="space-y-2">
            <div className="flex items-center text-gray-600">
              <span className="mr-2">üìß</span>
              ivan@example.com
            </div>
            <div className="flex items-center text-gray-600">
              <span className="mr-2">üì±</span>
              +7 (999) 123-45-67
            </div>
          </div>
        </div>
      ),
      solution: `<div class="w-80 p-6 bg-white rounded-xl shadow-lg">
  <div class="flex items-center mb-4">
    <div class="w-16 h-16 bg-gray-200 rounded-full mr-4"></div>
    <div>
      <h3 class="text-lg font-semibold text-gray-800">–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</h3>
      <p class="text-gray-500">Frontend Developer</p>
    </div>
  </div>
  <div class="space-y-2">
    <div class="flex items-center text-gray-600">
      <span class="mr-2">üìß</span>
      ivan@example.com
    </div>
    <div class="flex items-center text-gray-600">
      <span class="mr-2">üì±</span>
      +7 (999) 123-45-67
    </div>
  </div>
</div>`,
      hint: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ div'—ã —Å flex –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è"
    }
  ];

  const checkSolution = () => {
    const normalizedUserCode = userCode.replace(/\s+/g, ' ').trim();
    const normalizedSolution = levels[currentLevel].solution.replace(/\s+/g, ' ').trim();
    setIsCorrect(normalizedUserCode === normalizedSolution);
  };

  const nextLevel = () => {
    if (currentLevel < levels.length - 1) {
      setCurrentLevel(currentLevel + 1);
      setUserCode('');
      setIsCorrect(null);
      setShowHint(false);
    }
  };

  const prevLevel = () => {
    if (currentLevel > 0) {
      setCurrentLevel(currentLevel - 1);
      setUserCode('');
      setIsCorrect(null);
      setShowHint(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-800 mb-8">–ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –¥–∏–∑–∞–π–Ω–∞</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* –î–∏–∑–∞–π–Ω */}
          <div className="bg-gray-50 p-6 rounded-lg">
            <h2 className="text-xl font-semibold mb-4">–î–∏–∑–∞–π–Ω</h2>
            <div className="flex justify-center items-center min-h-[300px] bg-white rounded-lg shadow-sm p-4">
              {levels[currentLevel].design}
            </div>
          </div>

          {/* –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ */}
          <div className="bg-gray-50 p-6 rounded-lg">
            <h2 className="text-xl font-semibold mb-4">–í–∞—à –∫–æ–¥</h2>
            <textarea
              value={userCode}
              onChange={(e) => setUserCode(e.target.value)}
              className="w-full h-64 p-4 font-mono text-sm bg-white rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HTML –∫–æ–¥ –∑–¥–µ—Å—å..."
            />
            <div className="mt-4 space-x-4">
              <button
                onClick={checkSolution}
                className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
              >
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
              </button>
              <button
                onClick={() => setShowHint(!showHint)}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                –ü–æ–¥—Å–∫–∞–∑–∫–∞
              </button>
            </div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="mt-8">
          {isCorrect !== null && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`p-4 rounded-lg ${
                isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
              }`}
            >
              {isCorrect ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}
            </motion.div>
          )}

          {showHint && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-lg"
            >
              {levels[currentLevel].hint}
            </motion.div>
          )}

          <div className="mt-8 flex justify-between items-center">
            <button
              onClick={prevLevel}
              disabled={currentLevel === 0}
              className={`px-4 py-2 rounded-md ${
                currentLevel === 0
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            </button>
            <span className="text-gray-600">
              –£—Ä–æ–≤–µ–Ω—å {currentLevel + 1} –∏–∑ {levels.length}
            </span>
            <button
              onClick={nextLevel}
              disabled={currentLevel === levels.length - 1}
              className={`px-4 py-2 rounded-md ${
                currentLevel === levels.length - 1
                  ? 'bg-gray-300 cursor-not-allowed'
                  : 'bg-blue-500 text-white hover:bg-blue-600'
              }`}
            >
              –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeVsDesign; 