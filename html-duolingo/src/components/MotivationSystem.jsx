import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useMotivation } from '../context/MotivationContext';

const MotivationSystem = () => {
  const { motivationData, updateStreak, updateWeeklyChallenges, updateSeasonalEvents, updateCompetitions, unlockReward } = useMotivation();
  const [activeTab, setActiveTab] = useState('streak');

  // –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const motivationalMessages = [
    {
      text: "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –Ω–æ–≤–∏—á–∫–æ–º. –Ø —Ç–æ–∂–µ –Ω–∞—á–∏–Ω–∞–ª —Å –ø—Ä–æ—Å—Ç—ã—Ö HTML-—Ç–µ–≥–æ–≤.",
      author: "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥",
      role: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Facebook"
    },
    {
      text: "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å. –≠—Ç–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–æ–±–æ–π. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –≤–ø–µ—Ä–µ–¥.",
      author: "–î–∂–µ–∫ –î–æ—Ä—Å–∏",
      role: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Twitter"
    },
    {
      text: "–í–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫ ‚Äî —ç—Ç–æ –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫. –°–Ω–∞—á–∞–ª–∞ —Ç—ã —É—á–∏—à—å—Å—è –¥–µ—Ä–∂–∞—Ç—å –∫–∏—Å—Ç—å, –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ—à—å —à–µ–¥–µ–≤—Ä—ã.",
      author: "–¢–∏–º –ë–µ—Ä–Ω–µ—Ä—Å-–õ–∏",
      role: "–°–æ–∑–¥–∞—Ç–µ–ª—å World Wide Web"
    },
    {
      text: "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ–≤–∞–ª, –∞ —à–∞–≥ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. –ù–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è!",
      author: "–õ–∏–Ω—É—Å –¢–æ—Ä–≤–∞–ª—å–¥—Å",
      role: "–°–æ–∑–¥–∞—Ç–µ–ª—å Linux"
    },
    {
      text: "–ö–æ–¥ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ —Ç–≤–æ–π —Å–ø–æ—Å–æ–± –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä. –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ, –º–µ—á—Ç–∞–π –æ –≤–µ–ª–∏–∫–æ–º!",
      author: "–°—Ç–∏–≤ –î–∂–æ–±—Å",
      role: "–°–æ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Apple"
    },
    {
      text: "–í –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
      author: "–ë–∏–ª–ª –ì–µ–π—Ç—Å",
      role: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Microsoft"
    },
    {
      text: "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –æ–Ω ‚Äî –Ω–∞—á–∞–ª–æ –±–æ–ª—å—à–æ–≥–æ –ø—É—Ç–∏. –ì–æ—Ä–¥–∏—Å—å –∫–∞–∂–¥—ã–º —Å–≤–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º!",
      author: "–î–∂–µ—Ñ—Ñ –ë–µ–∑–æ—Å",
      role: "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å Amazon"
    },
    {
      text: "–í–µ—Ä—Å—Ç–∫–∞ ‚Äî —ç—Ç–æ –∫–∞–∫ —Å–±–æ—Ä–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –°–Ω–∞—á–∞–ª–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–æ–∂–Ω—ã–º, –Ω–æ –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º!",
      author: "–ò–ª–æ–Ω –ú–∞—Å–∫",
      role: "CEO Tesla –∏ SpaceX"
    },
    {
      text: "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å —á—å–∏–º-—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º. –£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É.",
      author: "–°–µ—Ä–≥–µ–π –ë—Ä–∏–Ω",
      role: "–°–æ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Google"
    }
  ];

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const getRandomMessage = () => {
    return motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
  };

  const currentMessage = getRandomMessage();

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç—Ä–∏–∫–∏
  const streakData = {
    currentStreak: motivationData.streak.current,
    longestStreak: motivationData.streak.longest,
    nextReward: 5,
    streakHistory: motivationData.streak.history
  };

  // –ù–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
  const weeklyChallenges = motivationData.weeklyChallenges.length > 0 ? motivationData.weeklyChallenges : [
    {
      id: 1,
      title: '–ú–∞—Å—Ç–µ—Ä HTML',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ HTML',
      progress: 0,
      total: 10,
      reward: '500 XP',
      deadline: '2024-03-10'
    },
    {
      id: 2,
      title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–¥–µ—Ä',
      description: '–†–µ—à–∏—Ç–µ 5 –∑–∞–¥–∞—á –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
      progress: 0,
      total: 5,
      reward: '300 XP',
      deadline: '2024-03-10'
    }
  ];

  // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  const seasonalEvents = motivationData.seasonalEvents.length > 0 ? motivationData.seasonalEvents : [
    {
      id: 1,
      title: '–í–µ—Å–µ–Ω–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω',
      description: '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤–µ—Å–Ω—ã',
      startDate: '2024-03-01',
      endDate: '2024-05-31',
      progress: 0,
      total: 90,
      rewards: ['–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂', '1000 XP', '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø']
    }
  ];

  // –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
  const competitions = motivationData.competitions.length > 0 ? motivationData.competitions : [
    {
      id: 1,
      title: '–¢—É—Ä–Ω–∏—Ä –≤–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫–æ–≤',
      description: '–°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª—É—á—à–µ–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      participants: 0,
      prize: '2000 XP',
      deadline: '2024-03-15',
      leaderboard: []
    }
  ];

  // –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥
  const rewards = motivationData.rewards.length > 0 ? motivationData.rewards : [
    {
      id: 1,
      title: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –≤–µ—Ä—Å—Ç–∞–ª—å—â–∏–∫',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
      icon: 'üéØ',
      unlocked: false
    },
    {
      id: 2,
      title: '–ù–µ–¥–µ–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫',
      description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      icon: 'üî•',
      unlocked: false
    },
    {
      id: 3,
      title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–æ–¥–µ—Ä',
      description: '–†–µ—à–∏—Ç–µ 5 –∑–∞–¥–∞—á –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
      icon: '‚ö°',
      unlocked: false
    }
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleStreakUpdate = (completed) => {
    updateStreak(completed);
  };

  const handleChallengeProgress = (challengeId, progress) => {
    updateWeeklyChallenges(challengeId, progress);
  };

  const handleEventProgress = (eventId, progress) => {
    updateSeasonalEvents(eventId, progress);
  };

  const handleCompetitionPoints = (competitionId, points) => {
    updateCompetitions(competitionId, points);
  };

  const handleRewardUnlock = (rewardId) => {
    unlockReward(rewardId);
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –±–ª–æ–∫ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl p-6 mb-8 text-white shadow-lg"
      >
        <div className="flex items-start space-x-4">
          <div className="text-4xl">üí™</div>
          <div>
            <p className="text-xl font-medium mb-2">{currentMessage.text}</p>
            <div className="flex items-center space-x-2">
              <span className="font-semibold">{currentMessage.author}</span>
              <span className="text-blue-100">‚Ä¢</span>
              <span className="text-blue-100">{currentMessage.role}</span>
            </div>
          </div>
        </div>
      </motion.div>

      <h1 className="text-3xl font-bold text-gray-800 mb-8">–°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏</h1>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º */}
      <div className="flex space-x-4 mb-8">
        {['streak', 'weekly', 'seasonal', 'competitions', 'rewards'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab)}
            className={`px-4 py-2 rounded-lg ${
              activeTab === tab
                ? 'bg-blue-500 text-white'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            {tab === 'streak' && '–°—Ç—Ä–∏–∫–∏'}
            {tab === 'weekly' && '–í—ã–∑–æ–≤—ã'}
            {tab === 'seasonal' && '–°–æ–±—ã—Ç–∏—è'}
            {tab === 'competitions' && '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'}
            {tab === 'rewards' && '–ù–∞–≥—Ä–∞–¥—ã'}
          </button>
        ))}
      </div>

      <AnimatePresence mode="wait">
        {activeTab === 'streak' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white rounded-xl shadow-lg p-6"
          >
            <h2 className="text-2xl font-semibold mb-4">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç—Ä–∏–∫–∏</h2>
            <div className="flex items-center gap-4 mb-6">
              <div className="text-4xl">üî•</div>
              <div>
                <p className="text-2xl font-bold">{streakData.currentStreak} –¥–Ω–µ–π</p>
                <p className="text-gray-600">–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫</p>
              </div>
            </div>
            <div className="grid grid-cols-7 gap-2">
              {streakData.streakHistory.map((day, index) => (
                <div
                  key={index}
                  className={`aspect-square rounded-lg flex items-center justify-center ${
                    day.completed ? 'bg-green-500' : 'bg-gray-200'
                  }`}
                >
                  {day.completed ? '‚úì' : '√ó'}
                </div>
              ))}
            </div>
            <button
              onClick={() => handleStreakUpdate(true)}
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
            >
              –û—Ç–º–µ—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            </button>
          </motion.div>
        )}

        {activeTab === 'weekly' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <h2 className="text-2xl font-semibold mb-4">–ù–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã</h2>
            {weeklyChallenges.map((challenge) => (
              <div key={challenge.id} className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-semibold">{challenge.title}</h3>
                    <p className="text-gray-600">{challenge.description}</p>
                  </div>
                  <span className="text-blue-500 font-semibold">{challenge.reward}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-blue-500 h-2.5 rounded-full"
                    style={{ width: `${(challenge.progress / challenge.total) * 100}%` }}
                  />
                </div>
                <p className="text-sm text-gray-500 mt-2">
                  –ü—Ä–æ–≥—Ä–µ—Å—Å: {challenge.progress}/{challenge.total}
                </p>
                <button
                  onClick={() => handleChallengeProgress(challenge.id, challenge.progress + 1)}
                  className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                </button>
              </div>
            ))}
          </motion.div>
        )}

        {activeTab === 'seasonal' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <h2 className="text-2xl font-semibold mb-4">–°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</h2>
            {seasonalEvents.map((event) => (
              <div key={event.id} className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-2">{event.title}</h3>
                <p className="text-gray-600 mb-4">{event.description}</p>
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-green-500 h-2.5 rounded-full"
                    style={{ width: `${(event.progress / event.total) * 100}%` }}
                  />
                </div>
                <div className="mt-4">
                  <h4 className="font-semibold mb-2">–ù–∞–≥—Ä–∞–¥—ã:</h4>
                  <ul className="list-disc list-inside">
                    {event.rewards.map((reward, index) => (
                      <li key={index} className="text-gray-600">{reward}</li>
                    ))}
                  </ul>
                </div>
                <button
                  onClick={() => handleEventProgress(event.id, event.progress + 1)}
                  className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
                </button>
              </div>
            ))}
          </motion.div>
        )}

        {activeTab === 'competitions' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-4"
          >
            <h2 className="text-2xl font-semibold mb-4">–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è</h2>
            {competitions.map((competition) => (
              <div key={competition.id} className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-xl font-semibold mb-2">{competition.title}</h3>
                <p className="text-gray-600 mb-4">{competition.description}</p>
                <div className="mb-4">
                  <p className="text-blue-500 font-semibold">–ü—Ä–∏–∑: {competition.prize}</p>
                  <p className="text-gray-500">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {competition.participants}</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h4 className="font-semibold mb-2">–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:</h4>
                  {competition.leaderboard.map((player) => (
                    <div key={player.rank} className="flex justify-between items-center py-2">
                      <span className="font-medium">{player.name}</span>
                      <span className="text-blue-500">{player.points} –æ—á–∫–æ–≤</span>
                    </div>
                  ))}
                </div>
                <button
                  onClick={() => handleCompetitionPoints(competition.id, 100)}
                  className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏
                </button>
              </div>
            ))}
          </motion.div>
        )}

        {activeTab === 'rewards' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="grid grid-cols-1 md:grid-cols-2 gap-4"
          >
            <h2 className="text-2xl font-semibold col-span-2 mb-4">–ù–∞–≥—Ä–∞–¥—ã</h2>
            {rewards.map((reward) => (
              <div
                key={reward.id}
                className={`bg-white rounded-xl shadow-lg p-6 ${
                  reward.unlocked ? 'border-2 border-green-500' : 'border-2 border-gray-200'
                }`}
              >
                <div className="flex items-center gap-4">
                  <span className="text-4xl">{reward.icon}</span>
                  <div>
                    <h3 className="text-xl font-semibold">{reward.title}</h3>
                    <p className="text-gray-600">{reward.description}</p>
                  </div>
                </div>
                {reward.unlocked ? (
                  <div className="mt-4 text-green-500 font-semibold">–ü–æ–ª—É—á–µ–Ω–æ!</div>
                ) : (
                  <button
                    onClick={() => handleRewardUnlock(reward.id)}
                    className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                  >
                    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                )}
              </div>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default MotivationSystem; 