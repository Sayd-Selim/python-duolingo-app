import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom';

const Practice = () => {
  const navigate = useNavigate();
  const [selectedType, setSelectedType] = useState(null);
  const [userProgress, setUserProgress] = useState({
    completedExercises: 0,
    totalPoints: 0,
    achievements: []
  });
  const [showHelp, setShowHelp] = useState(false);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage
    const savedProgress = localStorage.getItem('practiceProgress');
    if (savedProgress) {
      setUserProgress(JSON.parse(savedProgress));
    }
  }, []);

  const practiceTypes = [
    {
      id: 'basic',
      title: '–ë–∞–∑–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
      icon: 'üìù',
      description: '–ü—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤',
      progress: userProgress.basicProgress || 0
    },
    {
      id: 'advanced',
      title: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
      icon: 'üöÄ',
      description: '–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
      progress: userProgress.advancedProgress || 0
    },
    {
      id: 'projects',
      title: '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
      icon: 'üéØ',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü',
      progress: userProgress.projectProgress || 0
    }
  ];

  const achievements = [
    {
      id: 'first_exercise',
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
      icon: 'üéØ',
      unlocked: userProgress.completedExercises > 0
    },
    {
      id: 'master_coder',
      title: '–ú–∞—Å—Ç–µ—Ä –∫–æ–¥–∞',
      description: '–ù–∞–±–µ—Ä–∏—Ç–µ 100 –æ—á–∫–æ–≤',
      icon: 'üèÜ',
      unlocked: userProgress.totalPoints >= 100
    },
    {
      id: 'perfect_score',
      title: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫',
      icon: '‚≠ê',
      unlocked: userProgress.achievements.includes('perfect_score')
    }
  ];

  const helpContent = {
    basic: {
      title: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π',
      steps: [
        '–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞',
        '–ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–¥–∞–Ω–∏—é',
        '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ',
        '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏'
      ]
    },
    advanced: {
      title: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
      steps: [
        '–ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü',
        '–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CSS –∏ JavaScript'
      ]
    },
    projects: {
      title: '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è',
      steps: [
        '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏',
        '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
        '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
      ]
    }
  };

  const handleTypeSelect = (type) => {
    switch (type) {
      case 'basic':
        setSelectedType(type);
        break;
      case 'advanced':
        navigate('/advanced-practice');
        break;
      case 'projects':
        navigate('/projects');
        break;
      default:
        setSelectedType(null);
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-4">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900">–ü—Ä–∞–∫—Ç–∏–∫–∞</h1>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setShowHelp(!showHelp)}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            {showHelp ? '–°–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'}
          </button>
          <div className="bg-white rounded-lg p-4 shadow-md">
            <div className="text-sm text-gray-600">–û—á–∫–∏</div>
            <div className="text-2xl font-bold text-indigo-600">{userProgress.totalPoints}</div>
          </div>
          <div className="bg-white rounded-lg p-4 shadow-md">
            <div className="text-sm text-gray-600">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            <div className="text-2xl font-bold text-green-600">{userProgress.completedExercises}</div>
          </div>
        </div>
      </div>

      {/* Help Modal */}
      <AnimatePresence>
        {showHelp && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
          >
            <div className="bg-white rounded-lg p-6 max-w-2xl w-full">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-gray-900">–ü–æ–º–æ—â—å</h2>
                <button
                  onClick={() => setShowHelp(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ‚úï
                </button>
              </div>
              <div className="space-y-6">
                {Object.entries(helpContent).map(([type, content]) => (
                  <div key={type}>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">
                      {content.title}
                    </h3>
                    <ul className="list-disc list-inside space-y-2 text-gray-600">
                      {content.steps.map((step, index) => (
                        <li key={index}>{step}</li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {achievements.map(achievement => (
            <motion.div
              key={achievement.id}
              whileHover={{ scale: 1.02 }}
              className={`bg-white rounded-lg p-4 shadow-md ${
                achievement.unlocked ? 'border-2 border-green-500' : 'opacity-50'
              }`}
            >
              <div className="text-3xl mb-2">{achievement.icon}</div>
              <h3 className="font-semibold text-gray-900">{achievement.title}</h3>
              <p className="text-sm text-gray-600">{achievement.description}</p>
            </motion.div>
          ))}
        </div>
      </div>
      
      {/* –¢–∏–ø—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {practiceTypes.map((type) => (
          <motion.div
            key={type.id}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="bg-white rounded-xl shadow-lg p-6 cursor-pointer"
            onClick={() => handleTypeSelect(type.id)}
          >
            <div className="flex items-center gap-4 mb-4">
              <span className="text-4xl">{type.icon}</span>
              <h2 className="text-xl font-semibold text-gray-800">{type.title}</h2>
            </div>
            <p className="text-gray-600 mb-4">{type.description}</p>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${type.progress}%` }}
              />
            </div>
            <p className="text-sm text-gray-500 mt-2">–ü—Ä–æ–≥—Ä–µ—Å—Å: {type.progress}%</p>
          </motion.div>
        ))}
      </div>

      <AnimatePresence>
        {selectedType === 'basic' && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
          >
            <BasicPractice
              onComplete={(points) => {
                const newProgress = {
                  ...userProgress,
                  completedExercises: userProgress.completedExercises + 1,
                  totalPoints: userProgress.totalPoints + points
                };
                setUserProgress(newProgress);
                localStorage.setItem('practiceProgress', JSON.stringify(newProgress));
              }}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

const BasicPractice = ({ onComplete }) => {
  const [code, setCode] = useState(`<!DOCTYPE html>
<html>
<head>
  <title>–ú–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
  <!-- –ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥ –∑–¥–µ—Å—å -->
</body>
</html>`);
  const [output, setOutput] = useState('');
  const [hints, setHints] = useState([
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥ <h1> –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞',
    '–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –ø–æ–º–æ—â—å—é —Ç–µ–≥–∞ <p>',
    '–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ç–µ–≥–æ–≤ <ul> –∏ <li>'
  ]);
  const [showHint, setShowHint] = useState(false);
  const [currentHintIndex, setCurrentHintIndex] = useState(0);

  const currentTask = {
    title: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–º –∏ —Å–ø–∏—Å–∫–æ–º',
    requirements: [
      '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è',
      '–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Ç–µ–∫—Å—Ç–∞',
      '–°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
    ]
  };

  const handleRunCode = () => {
    try {
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      document.body.appendChild(iframe);
      iframe.contentDocument.open();
      iframe.contentDocument.write(code);
      iframe.contentDocument.close();
      setOutput(iframe.contentDocument.body.innerHTML);
      document.body.removeChild(iframe);
    } catch (error) {
      setOutput('–û—à–∏–±–∫–∞: ' + error.message);
    }
  };

  const checkRequirements = () => {
    const checks = currentTask.requirements.map(req => {
      const passed = code.includes(req.toLowerCase());
      return { requirement: req, passed };
    });
    return checks;
  };

  const handleComplete = () => {
    const checks = checkRequirements();
    const allPassed = checks.every(check => check.passed);
    if (allPassed) {
      onComplete(10); // –ù–∞—á–∏—Å–ª—è–µ–º 10 –æ—á–∫–æ–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
  };

  const handleShowHint = () => {
    if (currentHintIndex < hints.length - 1) {
      setCurrentHintIndex(currentHintIndex + 1);
    }
    setShowHint(true);
  };

  return (
    <div className="mt-8">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <div className="p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h2>

          <div className="mb-6">
            <h3 className="text-xl font-medium text-gray-900 mb-2">
              {currentTask.title}
            </h3>
            <p className="text-gray-600 mb-4">{currentTask.description}</p>

            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
              <h4 className="font-medium text-yellow-800 mb-2">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
              <ul className="list-disc list-inside text-yellow-700">
                {currentTask.requirements.map((req, index) => (
                  <li key={index}>{req}</li>
                ))}
              </ul>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞
                </label>
                <textarea
                  value={code}
                  onChange={(e) => setCode(e.target.value)}
                  className="w-full h-96 font-mono text-sm p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  spellCheck="false"
                />
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => {
                    handleRunCode();
                    handleComplete();
                  }}
                  className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
                >
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥
                </button>
                <button
                  onClick={handleShowHint}
                  className="px-6 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
                </button>
              </div>
            </div>

            <div>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –†–µ–∑—É–ª—å—Ç–∞—Ç
                </label>
                <div
                  className="w-full h-96 p-4 border border-gray-300 rounded-lg bg-white overflow-auto"
                  dangerouslySetInnerHTML={{ __html: output }}
                />
              </div>

              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-2">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:</h4>
                <ul className="space-y-2">
                  {checkRequirements().map((check, index) => (
                    <li
                      key={index}
                      className="flex items-center space-x-2"
                    >
                      <span
                        className={`w-5 h-5 rounded-full flex items-center justify-center ${
                          check.passed
                            ? 'bg-green-100 text-green-600'
                            : 'bg-red-100 text-red-600'
                        }`}
                      >
                        {check.passed ? '‚úì' : '√ó'}
                      </span>
                      <span className="text-gray-700">{check.requirement}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>

          {/* Hint Display */}
          <AnimatePresence>
            {showHint && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="mt-4 bg-blue-50 rounded-lg p-4"
              >
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-medium text-blue-900">–ü–æ–¥—Å–∫–∞–∑–∫–∞ {currentHintIndex + 1}/{hints.length}</h4>
                  <button
                    onClick={() => setShowHint(false)}
                    className="text-blue-500 hover:text-blue-700"
                  >
                    ‚úï
                  </button>
                </div>
                <p className="text-blue-700">{hints[currentHintIndex]}</p>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};

export default Practice; 