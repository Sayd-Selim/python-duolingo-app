import React, { useState, useEffect } from "react";
import MotivationalMessage from "./MotivationalMessage";
import AvatarAssistant from "./AvatarAssistant";
import { motion, AnimatePresence } from "framer-motion";
import MentorEditor from "./MentorEditor";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, useGLTF, useAnimations } from "@react-three/drei";
import AnimatedImage from "./AnimatedImage";

const confettiEmojis = ["üéâ", "‚ú®", "üéä", "ü•≥", "üí•", "üåü"];

const bonusMessages = [
  "–ë–æ–Ω—É—Å! +1 –ø–æ–ø—ã—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ",
  "–¢—ã –Ω–∞—à—ë–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å–æ–≤—É! ü¶â",
  "HTML –ª—é–±–∏—Ç —Ç–≤–æ–π —ç–Ω—Ç—É–∑–∏–∞–∑–º! üöÄ",
  "–°—É–ø–µ—Ä! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –ª–∞–π–∫ –æ—Ç —Å–æ–≤—ã ü¶âüëç",
  "–í–∞—É! –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –ø—Ä–æ—Ñ–∏! üëë",
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è 3D-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function AnimatedCharacter({ url, animationName }) {
  const { scene, animations } = useGLTF(url);
  const { actions } = useAnimations(animations, scene);

  React.useEffect(() => {
    if (actions && animationName && actions[animationName]) {
      actions[animationName].reset().fadeIn(0.5).play();
    }
    return () => {
      if (actions && animationName && actions[animationName]) {
        actions[animationName].fadeOut(0.5);
      }
    };
  }, [actions, animationName]);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å scene
  if (!scene || typeof scene !== "object" || !("type" in scene)) {
    return null;
  }

  return <primitive object={scene} scale={1.5} />;
}

const PracticeTaskSection = ({ setCorrectAnswers, onComplete }) => {
  const [valueTask, setValueTask] = useState("");

  const tasks = [
    {
      id: 1,
      type: "write",
      question: "–ù–∞–ø–∏—à–∏—Ç–µ HTML-–∫–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!' —Å –Ω—É–ª—è.",
      trainingCode: `<!DOCTYPE html>
<html>
<head>
    <title>–ú–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
    <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
</body>
</html>`,
      freeCode: `<!DOCTYPE html>
<html>
<head>
    <title>–ú–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
    <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
</body>
</html>`,
      answer: `<!DOCTYPE html>
<html>
<head>
    <title>–ú–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
    <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
</body>
</html>`,
      hint: "–í–ø–∏—à–∏—Ç–µ '–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!' –≤–Ω—É—Ç—Ä—å —Ç–µ–≥–∞ <h1>.",
      browserSignals: [
        {
          signal: (code) => !code.includes("<!DOCTYPE html>"),
          message: "üòµ‚Äçüí´ –ë–µ–∑ DOCTYPE —è –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç! –î–æ–±–∞–≤—å <!DOCTYPE html> –≤ –Ω–∞—á–∞–ª–æ.",
        },
      ],
    },
    {
      id: 2,
      type: "fill",
      question: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–±–∑–∞—Ü —Å —Ç–µ–∫—Å—Ç–æ–º '–Ø —É—á—É HTML –Ω–∞ Duolingo!'",
      trainingCode: "<p>–Ø —É—á—É HTML –Ω–∞ Duolingo!</p>",
      freeCode: "<p>___</p>",
      answer: "–Ø —É—á—É HTML –Ω–∞ Duolingo!",
      hint: "–í–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä—å —Ç–µ–≥–∞ <p>.",
      browserMessage:
        "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∞–±–∑–∞—Ü. –¢–µ–≥ <p> –Ω—É–∂–µ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–Ø —É—á—É HTML –Ω–∞ Duolingo!' –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–∞–º–∏!",
    },
    {
      id: 3,
      type: "fix",
      question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ —Ç–µ–º —Ç–µ–≥–æ–º.",
      trainingCode: "<h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>",
      freeCode: "<h2>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h2>",
      answer: "<h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>",
      hint: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî —ç—Ç–æ <h1>.",
      browserMessage: "üîß –û–π! –Ø –≤–∏–∂—É –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ. –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª <h2>, –Ω–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω—É–∂–µ–Ω <h1>. –ò—Å–ø—Ä–∞–≤—å —ç—Ç–æ, –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
    },
  ];

  const [progress, setProgress] = useState(0);

  const [step, setStep] = useState(() => {
    const saved = localStorage.getItem("practiceStep");
    return saved ? Number(saved) : 0;
  });
  const [input, setInput] = useState(() => {
    const saved = localStorage.getItem("practiceInput");
    if (saved) return saved;
    return tasks[0].template !== undefined ? tasks[0].template : "";
  });
  const [showHint, setShowHint] = useState(false);
  const [feedback, setFeedback] = useState("");
  const [completed, setCompleted] = useState(() => {
    const saved = localStorage.getItem("practiceCompleted");
    return saved === "true";
  });
  const [attempts, setAttempts] = useState(() => {
    const saved = localStorage.getItem("practiceAttemptsCurrent");
    return saved ? Number(saved) : 0;
  });
  const [showAnswer, setShowAnswer] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);
  const [showMotivation, setShowMotivation] = useState(false);
  const [motivationType, setMotivationType] = useState("correct");
  const [showBonus, setShowBonus] = useState(false);
  const [bonusMsg, setBonusMsg] = useState("");
  const [bonusKey, setBonusKey] = useState(0);
  const [showNextButton, setShowNextButton] = useState(false);

  // useEffect(() => {
  //   localStorage.setItem("practiceStep", step);
  //   localStorage.setItem("practiceInput", input);
  //   localStorage.setItem("practiceCompleted", completed);
  //   localStorage.setItem("practiceAttemptsCurrent", attempts);
  // }, [step, input, completed, attempts]);

  const currentTask = tasks[step];
  const progress2 = Math.round((step / tasks.length) * 100);

  const typeLabels = {
    write: "–ù–∞–ø–∏—à–∏ —Å –Ω—É–ª—è",
    fill: "–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–∏",
    fix: "–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É",
  };

  const checkAnswer = () => {
    let isCorrect = false;
    console.log("currentTask", currentTask);

    isCorrect = valueTask.trim() === currentTask.answer.trim();

    if (isCorrect) {
      setFeedback("‚úÖ –í–µ—Ä–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!");
      setShowAnswer(false);
      setShowConfetti(true);
      setShowMotivation(true);
      setMotivationType("correct");
      setShowNextButton(true);
    } else {
      setFeedback("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!");
      setAttempts((a) => a + 1);
      setShowMotivation(true);
      setMotivationType("incorrect");
      if (attempts + 1 >= 3) {
        setShowAnswer(true);
      }
      setTimeout(() => setShowMotivation(false), 1500);
    }
  };

  const handleBonusClick = () => {
    setShowBonus(false);
    setBonusMsg(bonusMessages[Math.floor(Math.random() * bonusMessages.length)]);
    setTimeout(() => setBonusMsg(""), 2000);
  };

  const handleNext = () => {
    setShowNextButton(false);
    setShowConfetti(false);
    setShowMotivation(false);
    setValueTask("");
    setProgress(0);
    if (step + 1 < tasks.length) {
      setStep(step + 1);
      setInput(tasks[step + 1].template !== undefined ? tasks[step + 1].template : "");
      setShowHint(false);
      setFeedback("");
      setAttempts(0);
    } else {
      setCompleted(true);
    }
  };

  if (completed) {
    return (
      <section className="bg-gradient-to-br from-indigo-50 to-white p-8 rounded-2xl shadow-2xl text-center max-w-2xl mx-auto mt-8 animate-fade-in">
        <div className="flex flex-col items-center mb-4">
          <span className="text-5xl mb-2 animate-bounce">üéâ</span>
          <h2 className="text-3xl font-bold mb-2 text-indigo-700 drop-shadow">–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!</h2>
          <p className="text-gray-700 mb-4 text-lg">–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
        </div>
        <div className="flex items-center justify-center mb-6">
          <div className="flex items-start gap-3 p-4 rounded-xl border-l-4 shadow-lg bg-green-600 border-green-700 text-white">
            <div className="text-2xl mt-1">üéâ</div>
            <div className="flex-1">
              <div className="font-bold mb-1">–ë—Ä–∞—É–∑–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç:</div>
              <div className="text-sm leading-relaxed">–ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!</div>
            </div>
          </div>
        </div>
        <div className="mb-6 bg-white/80 rounded-xl shadow p-4">
          <h3 className="text-lg font-semibold text-indigo-700 mb-2 flex items-center gap-2">
            <span className="text-xl">üìä</span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ø—ã—Ç–∫–∞–º:
          </h3>
          <ul className="text-left mx-auto max-w-md divide-y divide-indigo-100">
            {tasks.map((t, i) => (
              <li key={i} className="py-2 flex items-center gap-2">
                <span className="text-indigo-500">{i + 1}.</span> <span className="flex-1">{t.question}</span>{" "}
                <span className="font-bold text-indigo-700">{attempts || 0}</span> –ø–æ–ø—ã—Ç–æ–∫
              </li>
            ))}
          </ul>
        </div>
        <button
          onClick={() => {
            setStep(0);
            setCompleted(false);
            setInput(tasks[0].template !== undefined ? tasks[0].template : "");
            setShowHint(false);
            setFeedback("");
            setAttempts(0);
            localStorage.removeItem("practiceStep");
            localStorage.removeItem("practiceInput");
            localStorage.removeItem("practiceCompleted");
            localStorage.removeItem("practiceAttemptsCurrent");
          }}
          className="px-6 py-3 bg-gradient-to-r from-green-400 to-green-600 text-white rounded-xl font-semibold shadow-lg hover:scale-105 transition-transform"
        >
          <span className="mr-2">üîÑ</span>–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
        </button>
      </section>
    );
  }

  return (
    <>
      <section className="bg-gradient-to-br from-indigo-50 to-white p-8 rounded-2xl shadow-2xl  mt-8 animate-fade-in relative overflow-hidden">
        {/* {showConfetti && (
          <motion.div
            key="confetti"
            initial={{ opacity: 0, y: -40 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 40 }}
            className="pointer-events-none absolute inset-0 flex flex-wrap justify-center items-start z-40"
          >
            {Array.from({ length: 18 }).map((_, i) => (
              <span
                key={i}
                className="text-3xl animate-bounce"
                style={{
                  position: "absolute",
                  left: `${Math.random() * 90}%`,
                  top: `${Math.random() * 60}%`,
                  animationDelay: `${Math.random()}s`,
                }}
              >
                {confettiEmojis[Math.floor(Math.random() * confettiEmojis.length)]}
              </span>
            ))}
          </motion.div>
        )} */}
        {showMotivation && <MotivationalMessage type={motivationType} />}
        {showBonus && (
          <motion.button
            key={bonusKey}
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0, opacity: 0 }}
            onClick={handleBonusClick}
            className="fixed top-24 right-10 z-50 px-6 py-3 bg-gradient-to-r from-pink-400 to-yellow-400 text-white rounded-full font-bold shadow-lg text-lg animate-pulse hover:scale-110 transition-transform"
          >
            üéÅ –ë–æ–Ω—É—Å!
          </motion.button>
        )}
        {bonusMsg && (
          <motion.div
            key={bonusMsg}
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="fixed top-36 right-10 z-50 bg-white rounded-xl shadow-lg px-6 py-4 text-lg text-indigo-700 border border-indigo-100"
          >
            {bonusMsg}
          </motion.div>
        )}
        <div className="mb-6">
          <div className="w-full bg-gray-200 rounded-full h-3 mb-2 overflow-hidden">
            <div
              className="bg-gradient-to-r from-indigo-400 to-indigo-600 h-3 rounded-full transition-all duration-500"
              style={{ width: `${progress2}%` }}
            ></div>
          </div>
          <span className="text-sm text-gray-600">
            –ó–∞–¥–∞–Ω–∏–µ <span className="font-bold text-indigo-700">{step + 1}</span> –∏–∑ {tasks.length}
          </span>
        </div>
        <div className="bg-white/80 rounded-xl shadow p-6 mb-6 flex flex-col gap-4">
          <div className="flex items-center gap-3 mb-2">
            <span className="text-2xl bg-indigo-100 text-indigo-600 rounded-full p-2 shadow">üìù</span>
            <h2 className="text-xl font-semibold text-indigo-700">{currentTask.question}</h2>
          </div>
          <div className="mb-2 flex items-center gap-2">
            <span
              className={`px-3 py-1 rounded-full text-xs font-bold shadow ${
                currentTask.type === "write"
                  ? "bg-blue-100 text-blue-700"
                  : currentTask.type === "fill"
                  ? "bg-yellow-100 text-yellow-700"
                  : "bg-red-100 text-red-700"
              }`}
            >
              {typeLabels[currentTask.type]}
            </span>
          </div>
          <section className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-2xl font-semibold mb-4 text-indigo-700">–ü—Ä–∞–∫—Ç–∏–∫–∞</h2>
            <MentorEditor
              task={currentTask}
              onComplete={() => {
                setAttempts((prev) => prev + 1);
                setCorrectAnswers((prev) => prev + 1);
                onComplete();
              }}
              valueTask={valueTask}
              setValueTask={setValueTask}
              progress={progress}
              setProgress={setProgress}
              userCode={valueTask}
              currentTask={currentTask}
              step={step}
            />
          </section>

          <div className="mb-2 p-3 bg-indigo-50 border border-indigo-100 rounded shadow-inner">
            <div className="text-xs text-gray-400 mb-1 flex items-center gap-1">
              <span>üëÅÔ∏è</span>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:
            </div>
            <div dangerouslySetInnerHTML={{ __html: input }} />
          </div>
          <div className="flex flex-wrap gap-3 mb-2 justify-center">
            {showNextButton ? (
              <button
                onClick={handleNext}
                className="flex items-center gap-2 px-5 py-2 bg-gradient-to-r from-green-500 to-green-700 text-white rounded-lg font-semibold shadow hover:scale-105 transition-transform"
              >
                <span>‚û°Ô∏è</span>–î–∞–ª—å—à–µ
              </button>
            ) : (
              <>
                <button
                  onClick={checkAnswer}
                  className="flex items-center gap-2 px-5 py-2 bg-gradient-to-r from-indigo-500 to-indigo-700 text-white rounded-lg font-semibold shadow hover:scale-105 transition-transform"
                >
                  <span>‚úÖ</span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                </button>
                <button
                  onClick={() => setShowHint(true)}
                  className="flex items-center gap-2 px-5 py-2 bg-gradient-to-r from-yellow-400 to-yellow-500 text-white rounded-lg font-semibold shadow hover:scale-105 transition-transform"
                >
                  <span>üí°</span>–ü–æ–¥—Å–∫–∞–∑–∫–∞
                </button>
              </>
            )}
          </div>
          {showHint && (
            <div className="mb-2 flex items-center gap-2 text-yellow-800 bg-yellow-100 p-3 rounded shadow animate-fade-in">
              <span className="text-xl">üí°</span> {currentTask.hint}
            </div>
          )}
          {/* {showAnswer && (
            <div className="mb-2 flex items-start gap-2 text-blue-800 bg-blue-100 p-3 rounded shadow animate-fade-in">
              <span className="text-xl">‚ÑπÔ∏è</span>{" "}
              <span>
                –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
                <br />
                <pre className="whitespace-pre-wrap break-words bg-blue-50 rounded p-2 mt-1">{currentTask.answer}</pre>
              </span>
            </div>
          )} */}
          {feedback && (
            <div
              className={`mb-2 flex items-center gap-2 p-3 rounded shadow animate-fade-in ${
                feedback.startsWith("‚úÖ") ? "bg-green-100 text-green-700" : "bg-red-100 text-red-700"
              }`}
            >
              {feedback.startsWith("‚úÖ") ? "üéâ" : "‚ùå"} {feedback}
            </div>
          )}
          <div className="text-xs text-gray-500 text-right">–ü–æ–ø—ã—Ç–æ–∫: {attempts}</div>
        </div>
        {/* <AnimatedImage /> */}
      </section>
      <AvatarAssistant />
    </>
  );
};

export default PracticeTaskSection;
