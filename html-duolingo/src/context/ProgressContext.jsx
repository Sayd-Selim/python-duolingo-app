import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useAuth } from './AuthContext';

const ProgressContext = createContext();

export const useProgress = () => {
  const context = useContext(ProgressContext);
  if (!context) {
    throw new Error('useProgress must be used within a ProgressProvider');
  }
  return context;
};

export const ProgressProvider = ({ children }) => {
  const [completedLessons, setCompletedLessons] = useState([]);
  const [lessonProgress, setLessonProgress] = useState({});
  const [allUsersProgress, setAllUsersProgress] = useState([]);
  const { user } = useAuth();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user && user.userId) {
      loadProgressFromServer();
      loadAllUsersProgress();
    }
  }, [user]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadProgressFromServer = async () => {
    try {
      console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.userId);
      
      const response = await fetch(`http://localhost:5000/api/progress/${user.userId}`);
      if (response.ok) {
        const progressData = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å–µ—Ä–≤–µ—Ä–∞:', progressData);
        
        const completed = progressData
          .filter(item => item.completed)
          .map(item => item.lessonId);
        
        const progress = {};
        progressData.forEach(item => {
          progress[item.lessonId] = item.progress;
        });
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å:', { completed, progress });
        console.log('üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:', completed);
        console.log('üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–∫–∞–º:', progress);
        setCompletedLessons(completed);
        setLessonProgress(progress);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const loadAllUsersProgress = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/users/all');
      if (response.ok) {
        const data = await response.json();
        setAllUsersProgress(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserProgress = async () => {
    if (user && user.userId) {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.userId);
      await loadProgressFromServer();
      await loadAllUsersProgress();
      console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  };


  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
  const isLessonCompleted = useCallback((lessonId) => {
    return completedLessons.includes(lessonId);
  }, [completedLessons]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—Ä–æ–∫
  const isLessonLocked = useCallback((lessonId) => {
    // –£—Ä–æ–∫ 1 –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (lessonId <= 1) return false;
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω
    const previousLessonId = lessonId - 1;
    return !completedLessons.includes(previousLessonId);
  }, [completedLessons]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞ (0-100)
  const getLessonProgress = useCallback((lessonId) => {
    return lessonProgress[lessonId] || 0;
  }, [lessonProgress]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞
  const updateLessonProgress = async (lessonId, progress) => {
    const newProgress = Math.min(100, Math.max(0, progress));
    setLessonProgress(prev => ({
      ...prev,
      [lessonId]: newProgress
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (user && user.userId) {
      try {
        const requestBody = {
          userId: user.userId,
          lessonId,
          progress: newProgress,
          completed: newProgress >= 100
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', requestBody);
        
        const response = await fetch('http://localhost:5000/api/progress', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      }
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
  const completeLesson = async (lessonId) => {
    if (!completedLessons.includes(lessonId)) {
      setCompletedLessons(prev => [...prev, lessonId]);
      updateLessonProgress(lessonId, 100);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      if (user && user.userId) {
        try {
          await fetch('http://localhost:5000/api/progress', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: user.userId,
              lessonId,
              progress: 100,
              completed: true
            }),
          });
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          loadAllUsersProgress();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
      }
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫—É—Ä—Å—É (0-100)
  const getCourseProgress = useCallback((total = 0) => {
    const totalLessons = 15; // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    for (let i = 1; i <= totalLessons; i++) {
      total += lessonProgress[i] || 0;
    }
    return (total / totalLessons).toFixed(2);
  }, [lessonProgress]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
  const getCompletedLessonsCount = useCallback(() => {
    return completedLessons.length;
  }, [completedLessons]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫–∞
  const getNextAvailableLesson = useCallback(() => {
    for (let i = 1; i <= 15; i++) {
      if (!isLessonLocked(i) && !isLessonCompleted(i)) {
        return i;
      }
    }
    return null; // –í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
  }, [isLessonLocked, isLessonCompleted]);

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const resetProgress = () => {
    setCompletedLessons([]);
    setLessonProgress({});
  };

  const value = {
    completedLessons,
    lessonProgress,
    allUsersProgress,
    isLessonCompleted,
    isLessonLocked,
    getLessonProgress,
    updateLessonProgress,
    completeLesson,
    getCourseProgress,
    getCompletedLessonsCount,
    getNextAvailableLesson,
    resetProgress,
    loadAllUsersProgress,
    refreshUserProgress
  };

  return (
    <ProgressContext.Provider value={value}>
      {children}
    </ProgressContext.Provider>
  );
}; 