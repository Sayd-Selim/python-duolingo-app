import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { useProgress } from '../context/ProgressContext';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';

function CSSCourse() {
  const { isLessonCompleted, isLessonLocked, getLessonProgress, getCourseProgress, refreshUserProgress } = useProgress();
  // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // const { user, refreshUserData } = useAuth();
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = useMemo(() => ({ userId: 'demo_user_123' }), []);
  const refreshUserData = useCallback(async () => true, []); // –§–∏–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  const [lessonAccess, setLessonAccess] = useState({});
  const [userProgress, setUserProgress] = useState({});
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [completedLessons, setCompletedLessons] = useState([]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
  const getCompletedLessonsCount = useCallback(() => {
    return cssUnits.filter(unit => {
      const progress = userProgress[unit.id];
      return progress?._doc?.completed || false;
    }).length;
  }, [userProgress]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (user && user.userId) {
      // –î–ï–ú–û –†–ï–ñ–ò–ú: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º
      // –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —É—Ä–æ–∫–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      const access = {};
      for (let i = 1; i <= 15; i++) {
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –æ—Ç–∫—Ä—ã—Ç—ã —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫–∏ 1-5
        access[i] = i <= 5
      }
      setLessonAccess(access);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏–∑ localStorage
      try {
        const completed = JSON.parse(localStorage.getItem('completedLessons') || '[]');
        setCompletedLessons(completed);
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:', completed);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:', error);
        setCompletedLessons([]);
      }
      
      setIsLoading(false); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É
      
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ –ë–î');
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }, [user]);

  const cssUnits = [
    { id: 1, title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ CSS', path: '/css-course/lesson/1', icon: 'üé®', description: '–û—Å–Ω–æ–≤—ã CSS, —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, —Å–≤–æ–π—Å—Ç–≤–∞' },
    { id: 2, title: '–°–µ–ª–µ–∫—Ç–æ—Ä—ã CSS', path: '/css-course/lesson/2', icon: 'üîç', description: '–¢–∏–ø—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å' },
    { id: 3, title: '–¶–≤–µ—Ç–∞ –∏ —Ñ–æ–Ω', path: '/css-course/lesson/3', icon: 'üåà', description: '–†–∞–±–æ—Ç–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Ñ–æ–Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏' },
    { id: 4, title: '–¢–µ–∫—Å—Ç –∏ —à—Ä–∏—Ñ—Ç—ã', path: '/css-course/lesson/4', icon: 'üìù', description: '–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞' },
    { id: 5, title: '–ë–ª–æ–∫–∏ –∏ –æ—Ç—Å—Ç—É–ø—ã', path: '/css-course/lesson/5', icon: 'üì¶', description: 'Box model, padding, margin' },
    { id: 6, title: '–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', path: '/css-course/lesson/6', icon: 'üìç', description: 'Position, z-index, float' },
    { id: 7, title: 'Flexbox', path: '/css-course/lesson/7', icon: 'üìê', description: 'Flexbox –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–∫–µ—Ç–æ–≤' },
    { id: 8, title: 'Grid Layout', path: '/css-course/lesson/8', icon: 'üî≤', description: 'CSS Grid –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤' },
    { id: 9, title: '–ê–Ω–∏–º–∞—Ü–∏–∏', path: '/css-course/lesson/9', icon: 'üé≠', description: 'CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã' },
    { id: 10, title: '–ú–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã', path: '/css-course/lesson/10', icon: 'üì±', description: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω' },
    { id: 11, title: 'CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', path: '/css-course/lesson/11', icon: 'üîß', description: 'Custom properties –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ' },
    { id: 12, title: '–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã', path: '/css-course/lesson/12', icon: '‚öôÔ∏è', description: 'Sass, Less, Stylus' },
    { id: 13, title: 'CSS –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏', path: '/css-course/lesson/13', icon: 'üèóÔ∏è', description: 'BEM, SMACSS, OOCSS' },
    { id: 14, title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS', path: '/css-course/lesson/14', icon: '‚ö°', description: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è' },
    { id: 15, title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç', path: '/css-course/lesson/15', icon: 'üöÄ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞' },
  ];
  
  // –î–ï–ú–û –†–ï–ñ–ò–ú: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefreshData = useCallback(async () => {
    setIsRefreshing(true);
    try {
      // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      alert('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    } finally {
      setIsRefreshing(false);
    }
  }, []);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="max-w-6xl mx-auto p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É—Ä—Å–∞ */}
      <div className="text-center mb-12">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="inline-block mb-6"
        >
          <div className="text-6xl mb-4">üé®</div>
          <h1 className="text-5xl font-bold text-blue-600 mb-4">
            –ö—É—Ä—Å CSS –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
          </h1>
        </motion.div>
        
        <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
          –ò–∑—É—á–∏—Ç–µ CSS - —è–∑—ã–∫ —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–µ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã. 
          –û—Ç –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤.
        </p>
        
        <div className="mt-8 flex justify-center space-x-4">
          <div className="bg-blue-100 px-4 py-2 rounded-lg">
            <span className="text-blue-800 font-semibold">15 —É—Ä–æ–∫–æ–≤</span>
          </div>
          <div className="bg-indigo-100 px-4 py-2 rounded-lg">
            <span className="text-indigo-800 font-semibold">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</span>
          </div>
          <div className="bg-purple-100 px-4 py-2 rounded-lg">
            <span className="text-purple-800 font-semibold">–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</span>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {cssUnits.map((unit, index) => {
          const hasAccess = lessonAccess[unit.id] || false;
          const progress = userProgress[unit.id];
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É—Ä–æ–∫ –≤ localStorage
          const isCompleted = completedLessons.includes(unit.id);
          // –ï—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∏–Ω–∞—á–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
          const progressPercent = isCompleted ? 100 : (progress?._doc?.progress || 0);
          const isLocked = !hasAccess;
          
          return (
            <motion.div
              key={unit.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 border-l-4 hover:shadow-lg ${
                isCompleted 
                  ? 'border-blue-500' 
                  : isLocked 
                    ? 'border-gray-300 opacity-60' 
                    : 'border-blue-500'
              }`}
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{unit.icon}</span>
                    <span className={`text-sm font-semibold ${
                      isCompleted ? 'text-blue-600' : isLocked ? 'text-gray-400' : 'text-blue-600'
                    }`}>
                      –£—Ä–æ–∫ {unit.id}
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    {isCompleted && (
                      <span className="text-blue-500 text-lg">‚úÖ</span>
                    )}
                    {isLocked && (
                      <span className="text-gray-400 text-lg">üîí</span>
                    )}
                  </div>
                </div>
                
                <h3 className={`text-xl font-semibold mb-2 ${
                  isCompleted ? 'text-gray-800' : isLocked ? 'text-gray-500' : 'text-gray-800'
                }`}>
                  {unit.title}
                </h3>
                
                <p className={`text-sm mb-4 ${
                  isCompleted ? 'text-gray-600' : isLocked ? 'text-gray-400' : 'text-gray-600'
                }`}>
                  {unit.description}
                </p>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
                {!isLocked && progress && (
                  <div className="mb-4">
                    <div className="flex justify-between text-xs text-gray-500 mb-1">
                      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                      <span>{progressPercent.toFixed(2)}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <motion.div 
                        className="bg-gradient-to-r from-blue-500 to-indigo-500 h-2 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ width: `${progressPercent.toFixed(2)}%` }}
                        transition={{ duration: 0.5 }}
                      />
                    </div>
                  </div>
                )}
                
                {isLocked ? (
                  <div className="mt-4 p-3 bg-gray-100 rounded-lg">
                    <p className="text-sm text-gray-500 text-center">
                      üîí –£—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    </p>
                  </div>
                ) : (
                  <Link
                    to={unit.path}
                    className={`mt-4 w-full px-4 py-3 rounded-lg transition-colors text-center block font-medium ${
                      isCompleted
                        ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                        : 'bg-gradient-to-r from-blue-500 to-indigo-500 text-white hover:from-blue-600 hover:to-indigo-600'
                    }`}
                  >
                    {isCompleted ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫' : '–ù–∞—á–∞—Ç—å —É—Ä–æ–∫'}
                  </Link>
                )}
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <div className="mt-12 text-center">
        <Link
          to="/"
          className="inline-flex items-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>
    </motion.div>
  );
}

export default CSSCourse; 