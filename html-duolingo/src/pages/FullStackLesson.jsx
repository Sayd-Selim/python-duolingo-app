import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useAuth } from '../context/AuthContext';
import { useProgress } from '../context/ProgressContext';

const FullStackLesson = () => {
  const { levelId, lessonId } = useParams();
  const { user } = useAuth();
  const { updateProgress } = useProgress();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [showSolution, setShowSolution] = useState(false);
  const [userCode, setUserCode] = useState('');
  const [isCompleted, setIsCompleted] = useState(false);

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ (—Ç–∞ –∂–µ, —á—Ç–æ –∏ –≤ FullStackCourse.jsx)
  const fullStackCourse = {
    levels: [
      {
        id: 1,
        name: 'üî∞ –£—Ä–æ–≤–µ–Ω—å 1: –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å Axios',
        color: 'from-green-500 to-emerald-600',
        lessons: [
          {
            id: '1.1',
            title: '–ß—Ç–æ —Ç–∞–∫–æ–µ HTTP –∏ –º–µ—Ç–æ–¥—ã',
            description: '–ü–æ–Ω—è—Ç–∏–µ HTTP, GET/POST/PUT/DELETE –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—Ç–µ–ª–µ',
            metaphor: '–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –æ—Ç–µ–ª—å –∏ –º–æ–∂–µ—Ç: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (GET), –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä (POST), –∏–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å (PUT), –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å (DELETE)',
            theory: [
              {
                title: 'HTTP - –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö',
                content: 'HTTP (HyperText Transfer Protocol) - —ç—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –∫–∞–∫ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –æ—Ç–µ–ª—è –∏ —Ä–µ—Ü–µ–ø—Ü–∏–µ–π.',
                code: null
              },
              {
                title: 'HTTP –º–µ—Ç–æ–¥—ã',
                content: 'GET - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å "–∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã?")\nPOST - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–∫–∞–∫ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)\nPUT - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å (–∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞)\nDELETE - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–∫–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å)',
                code: '// –ü—Ä–∏–º–µ—Ä—ã HTTP –º–µ—Ç–æ–¥–æ–≤\nGET /api/rooms - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤\nPOST /api/bookings - —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å\nPUT /api/bookings/123 - –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–æ–Ω—å\nDELETE /api/bookings/123 - –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å'
              }
            ],
            practice: {
              task: '–°–æ–∑–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä–∞" –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤',
              initialCode: 'import React, { useState } from "react";\nimport axios from "axios";\n\nfunction HotelRooms() {\n  const [rooms, setRooms] = useState([]);\n  \n  // –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n  \n  return (\n    <div>\n      <button>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä–∞</button>\n      <div>\n        {/* –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ */}\n      </div>\n    </div>\n  );\n}',
              solution: 'const fetchRooms = async () => {\n  try {\n    const response = await axios.get("/api/rooms");\n    setRooms(response.data);\n  } catch (error) {\n    console.error("–û—à–∏–±–∫–∞:", error);\n  }\n};\n\n// –í JSX:\n{rooms.map(room => (\n  <div key={room.id}>\n    <h3>–ù–æ–º–µ—Ä {room.number}</h3>\n    <p>–¶–µ–Ω–∞: {room.price} —Ä—É–±/–Ω–æ—á—å</p>\n  </div>\n))}'
            }
          },
          {
            id: '1.2',
            title: '–ü–µ—Ä–≤—ã–π GET –∑–∞–ø—Ä–æ—Å',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
            metaphor: '–ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É —Ä–µ—Ü–µ–ø—Ü–∏–∏: "–ö–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —É –≤–∞—Å –µ—Å—Ç—å?"',
            theory: [
              {
                title: 'Axios - HTTP –∫–ª–∏–µ–Ω—Ç',
                content: 'Axios - —ç—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤. –û–Ω–∞ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å API –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ.',
                code: 'import axios from "axios";\n\n// –ë–∞–∑–æ–≤—ã–π GET –∑–∞–ø—Ä–æ—Å\nconst response = await axios.get("/api/rooms");\nconsole.log(response.data);'
              },
              {
                title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞',
                content: 'Axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –∏ –ø–æ–º–µ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ response.data. –¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏.',
                code: 'try {\n  const response = await axios.get("/api/rooms");\n  setRooms(response.data);\n} catch (error) {\n  console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error.message);\n}'
              }
            ],
            practice: {
              task: '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π –æ—Ç–µ–ª—è',
              initialCode: 'import React, { useState, useEffect } from "react";\nimport axios from "axios";\n\nfunction GuestList() {\n  const [guests, setGuests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  \n  // –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n  \n  return (\n    <div>\n      <h2>–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π</h2>\n      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}\n      <div>\n        {/* –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π */}\n      </div>\n    </div>\n  );\n}',
              solution: 'useEffect(() => {\n  const fetchGuests = async () => {\n    setLoading(true);\n    try {\n      const response = await axios.get("/api/guests");\n      setGuests(response.data);\n    } catch (error) {\n      console.error("–û—à–∏–±–∫–∞:", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  fetchGuests();\n}, []);\n\n// –í JSX:\n{guests.map(guest => (\n  <div key={guest.id}>\n    <h3>{guest.name}</h3>\n    <p>–ù–æ–º–µ—Ä: {guest.roomNumber}</p>\n  </div>\n))}'
            }
          }
          // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –∑–¥–µ—Å—å
        ]
      }
      // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–¥–µ—Å—å
    ]
  };

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
  const currentLevel = fullStackCourse.levels.find(l => l.id === parseInt(levelId));
  const currentLesson = currentLevel?.lessons.find(l => l.id === lessonId);

  useEffect(() => {
    if (!currentLesson) {
      navigate('/fullstack-course');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
    const isDemoMode = !user || (user && user.userId === "demo_user_123");
    if (isDemoMode) {
      const savedProgress = localStorage.getItem('fullStackProgress');
      if (savedProgress) {
        const completed = JSON.parse(savedProgress);
        setIsCompleted(completed.includes(lessonId));
      }
    }
  }, [lessonId, levelId, user, navigate, currentLesson]);

  const handleComplete = () => {
    const isDemoMode = !user || (user && user.userId === "demo_user_123");
    
    if (isDemoMode) {
      const savedProgress = localStorage.getItem('fullStackProgress') || '[]';
      const completed = JSON.parse(savedProgress);
      if (!completed.includes(lessonId)) {
        const newCompleted = [...completed, lessonId];
        localStorage.setItem('fullStackProgress', JSON.stringify(newCompleted));
      }
    } else {
      updateProgress('fullStack', lessonId);
    }
    
    setIsCompleted(true);
  };

  const handleNextLesson = () => {
    const currentIndex = currentLevel.lessons.findIndex(l => l.id === lessonId);
    if (currentIndex < currentLevel.lessons.length - 1) {
      const nextLesson = currentLevel.lessons[currentIndex + 1];
      navigate(`/fullstack-course/level/${levelId}/lesson/${nextLesson.id}`);
    } else {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫—É—Ä—Å
      navigate('/fullstack-course');
    }
  };

  if (!currentLesson) {
    return <div>–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50">
      {/* Header */}
      <div className={`bg-gradient-to-r ${currentLevel.color} text-white`}>
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="flex items-center justify-between">
            <div>
              <button
                onClick={() => navigate('/fullstack-course')}
                className="text-white/80 hover:text-white transition-colors mb-2"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É
              </button>
              <h1 className="text-3xl font-bold mb-2">
                –£—Ä–æ–∫ {lessonId}: {currentLesson.title}
              </h1>
              <p className="text-white/80">{currentLesson.description}</p>
            </div>
            <div className="text-right">
              <div className="text-3xl mb-2">üè®</div>
              <div className="text-sm text-white/80">–£—Ä–æ–≤–µ–Ω—å {levelId}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center space-x-4">
            {['–¢–µ–æ—Ä–∏—è', '–ú–µ—Ç–∞—Ñ–æ—Ä–∞', '–ü—Ä–∞–∫—Ç–∏–∫–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'].map((step, index) => (
              <div
                key={step}
                className={`flex items-center ${
                  index <= currentStep ? 'text-blue-600' : 'text-gray-400'
                }`}
              >
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    index <= currentStep
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                >
                  {index + 1}
                </div>
                <span className="ml-2 hidden sm:inline">{step}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {currentStep === 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">üìö –¢–µ–æ—Ä–∏—è</h2>
              {currentLesson.theory?.map((section, index) => (
                <div key={index} className="mb-8">
                  <h3 className="text-xl font-semibold text-gray-800 mb-3">
                    {section.title}
                  </h3>
                  <p className="text-gray-600 mb-4 whitespace-pre-line">
                    {section.content}
                  </p>
                  {section.code && (
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h4 className="font-semibold text-gray-800 mb-2">üíª –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:</h4>
                      <pre className="text-sm text-gray-700 bg-gray-100 p-3 rounded overflow-x-auto">
                        {section.code}
                      </pre>
                    </div>
                  )}
                </div>
              ))}
              <button
                onClick={() => setCurrentStep(1)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                –î–∞–ª–µ–µ: –ú–µ—Ç–∞—Ñ–æ—Ä–∞ –æ—Ç–µ–ª—è ‚Üí
              </button>
            </div>
          </motion.div>
        )}

        {currentStep === 1 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-xl shadow-lg p-8"
          >
            <h2 className="text-2xl font-bold text-gray-800 mb-6">üè® –ú–µ—Ç–∞—Ñ–æ—Ä–∞ –æ—Ç–µ–ª—è</h2>
            <div className="bg-blue-50 rounded-lg p-6">
              <div className="text-4xl mb-4">üè®</div>
              <p className="text-lg text-blue-800 leading-relaxed">
                {currentLesson.metaphor}
              </p>
            </div>
            <div className="mt-6 flex space-x-4">
              <button
                onClick={() => setCurrentStep(0)}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              <button
                onClick={() => setCurrentStep(2)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                –î–∞–ª–µ–µ: –ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Üí
              </button>
            </div>
          </motion.div>
        )}

        {currentStep === 2 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6"
          >
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h2>
              <div className="bg-purple-50 rounded-lg p-6 mb-6">
                <h3 className="font-semibold text-purple-800 mb-2">–ó–∞–¥–∞–Ω–∏–µ:</h3>
                <p className="text-purple-700">{currentLesson.practice?.task}</p>
              </div>

              <div className="mb-6">
                <h3 className="font-semibold text-gray-800 mb-3">–í–∞—à –∫–æ–¥:</h3>
                <textarea
                  value={userCode}
                  onChange={(e) => setUserCode(e.target.value)}
                  placeholder={currentLesson.practice?.initialCode}
                  className="w-full h-64 p-4 border border-gray-300 rounded-lg font-mono text-sm resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setShowSolution(!showSolution)}
                  className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                >
                  {showSolution ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ä–µ—à–µ–Ω–∏–µ
                </button>
                <button
                  onClick={() => setCurrentStep(1)}
                  className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
              </div>

              {showSolution && (
                <div className="mt-6 bg-green-50 rounded-lg p-6">
                  <h3 className="font-semibold text-green-800 mb-3">‚úÖ –†–µ—à–µ–Ω–∏–µ:</h3>
                  <pre className="text-sm text-green-700 bg-green-100 p-4 rounded overflow-x-auto">
                    {currentLesson.practice?.solution}
                  </pre>
                </div>
              )}
            </div>

            <div className="bg-white rounded-xl shadow-lg p-8">
              <h3 className="text-xl font-bold text-gray-800 mb-4">üöÄ –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É?</h3>
              <button
                onClick={() => setCurrentStep(3)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-lg font-medium text-lg transition-colors"
              >
                –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫ ‚Üí
              </button>
            </div>
          </motion.div>
        )}

        {currentStep === 3 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-xl shadow-lg p-8 text-center"
          >
            <div className="text-6xl mb-6">üéâ</div>
            <h2 className="text-3xl font-bold text-gray-800 mb-4">
              –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
            </h2>
            <p className="text-gray-600 mb-8 text-lg">
              –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–∏–ª–∏: <strong>{currentLesson.title}</strong>
            </p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <div className="bg-green-50 rounded-lg p-6">
                <h3 className="font-semibold text-green-800 mb-2">‚úÖ –ß—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏:</h3>
                <ul className="text-green-700 text-left space-y-1">
                  {currentLesson.theory?.map((section, index) => (
                    <li key={index}>‚Ä¢ {section.title}</li>
                  ))}
                </ul>
              </div>
              <div className="bg-blue-50 rounded-lg p-6">
                <h3 className="font-semibold text-blue-800 mb-2">üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏:</h3>
                <p className="text-blue-700">{currentLesson.practice?.task}</p>
              </div>
            </div>

            <div className="flex justify-center space-x-4">
              {!isCompleted && (
                <button
                  onClick={handleComplete}
                  className="bg-green-600 hover:bg-green-700 text-white px-8 py-4 rounded-lg font-medium text-lg transition-colors"
                >
                  ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                </button>
              )}
              <button
                onClick={handleNextLesson}
                className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-lg font-medium text-lg transition-colors"
              >
                {isCompleted ? '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Üí' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí'}
              </button>
            </div>

            {isCompleted && (
              <div className="mt-6 bg-green-100 rounded-lg p-4">
                <p className="text-green-800 font-medium">‚úÖ –£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π!</p>
              </div>
            )}
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default FullStackLesson; 