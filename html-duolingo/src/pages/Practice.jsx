import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useProgress } from '../context/ProgressContext';
import { getRandomTasks } from '../data/practiceTasks';

function Practice() {
  const [selectedLesson, setSelectedLesson] = useState(null);
  const [currentTask, setCurrentTask] = useState(0);
  const [showHint, setShowHint] = useState(false);
  const [showAnswer, setShowAnswer] = useState(false);
  const [showInstructions, setShowInstructions] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [taskHistory, setTaskHistory] = useState([]);
  const { user } = useAuth();
  const { completedLessons, lessonProgress, refreshUserProgress, isLessonLocked } = useProgress();

  console.log('üîÑ Practice –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è:', {
    completedLessons,
    lessonProgress,
    user: user?.userId
  });

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–º —É—Ä–æ–∫–∞–º –∫—É—Ä—Å–∞)
  const availableLessons = useMemo(() => [
    {
      id: 1,
      title: '–£—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–∏–µ –≤ Python',
      description: '–û—Å–Ω–æ–≤—ã Python, —Ñ—É–Ω–∫—Ü–∏—è print(), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
      topics: ['print()', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', '—Å—Ç—Ä–æ–∫–∏'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 2,
      title: '–£—Ä–æ–∫ 2: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö',
      description: '–†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏, —Ñ—É–Ω–∫—Ü–∏–∏ print() –∏ input()',
      topics: ['–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'input()', 'print()'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 3,
      title: '–£—Ä–æ–∫ 3: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö',
      description: '–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–Ω–∏–º–∞—Ç—å, —Å —á–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å.',
      topics: ['–ß–∏—Å–ª–∞', '—Å—Ç—Ä–æ–∫–∏', '–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 4,
      title: '–£—Ä–æ–∫ 4: –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è',
      description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
      topics: ['–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', '–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', '–≤—ã—Ä–∞–∂–µ–Ω–∏—è'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 5,
      title: '–£—Ä–æ–∫ 5: –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
      description: 'if, elif, else - –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ',
      topics: ['if', 'elif', 'else', '—É—Å–ª–æ–≤–∏—è'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 6,
      title: '–£—Ä–æ–∫ 6: –¶–∏–∫–ª—ã for –∏ while',
      description: '–¶–∏–∫–ª—ã, –∏—Ç–µ—Ä–∞—Ü–∏–∏, range()',
      topics: ['for', 'while', '—Ü–∏–∫–ª—ã', 'range()'],
      difficulty: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
    },
    {
      id: 7,
      title: '–£—Ä–æ–∫ 7: –°–ø–∏—Å–∫–∏ –≤ Python',
      description: '–†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö',
      topics: ['–°–ø–∏—Å–∫–∏', '–º–∞—Å—Å–∏–≤—ã'],
      difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    },
    // {
    //   id: 7,
    //   title: '–£—Ä–æ–∫ 7: –°–ª–æ–≤–∞—Ä–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞',
    //   description: '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö Python',
    //   topics: ['—Å–ª–æ–≤–∞—Ä–∏', '–º–Ω–æ–∂–µ—Å—Ç–≤–∞', '–∫–ª—é—á–∏'],
    //   difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    // },
    // {
    //   id: 8,
    //   title: '–£—Ä–æ–∫ 8: –§—É–Ω–∫—Ü–∏–∏',
    //   description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π',
    //   topics: ['—Ñ—É–Ω–∫—Ü–∏–∏', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'return'],
    //   difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    // },
    // {
    //   id: 9,
    //   title: '–£—Ä–æ–∫ 9: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏',
    //   description: '–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤',
    //   topics: ['—Ñ–∞–π–ª—ã', 'open()', 'read()', 'write()'],
    //   difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    // },
    // {
    //   id: 10,
    //   title: '–£—Ä–æ–∫ 10: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π',
    //   description: 'try, except, finally',
    //   topics: ['try', 'except', '–∏—Å–∫–ª—é—á–µ–Ω–∏—è'],
    //   difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    // },
    // {
    //   id: 11,
    //   title: '–£—Ä–æ–∫ 11: –ú–æ–¥—É–ª–∏ –∏ –ø–∞–∫–µ—Ç—ã',
    //   description: '–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤',
    //   topics: ['import', '–º–æ–¥—É–ª–∏', '–ø–∞–∫–µ—Ç—ã'],
    //   difficulty: '–°—Ä–µ–¥–Ω–∏–π',
    // },
    // {
    //   id: 12,
    //   title: '–£—Ä–æ–∫ 12: –û–û–ü –æ—Å–Ω–æ–≤—ã',
    //   description: '–ö–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
    //   topics: ['–∫–ª–∞—Å—Å—ã', '–æ–±—ä–µ–∫—Ç—ã', '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'],
    //   difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    // },
    // {
    //   id: 13,
    //   title: '–£—Ä–æ–∫ 13: –†–∞–±–æ—Ç–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏',
    //   description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python',
    //   topics: ['–±–∏–±–ª–∏–æ—Ç–µ–∫–∏', 'pip', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞'],
    //   difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    // },
    // {
    //   id: 14,
    //   title: '–£—Ä–æ–∫ 14: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç',
    //   description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
    //   topics: ['–ø—Ä–æ–µ–∫—Ç', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–¥–µ–ø–ª–æ–π'],
    //   difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    // },
    // {
    //   id: 15,
    //   title: '–£—Ä–æ–∫ 15: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ–º—ã',
    //   description: '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã',
    //   topics: ['–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã', '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã', '–∫–æ–Ω—Ç–µ–∫—Å—Ç'],
    //   difficulty: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    // }
  ], []);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  const unlockedLessons = useMemo(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
    const completedFromArray = completedLessons || [];
    const completedFromProgress = Object.entries(lessonProgress || {})
      .filter(([lessonId, progress]) => progress >= 100)
      .map(([lessonId]) => Number(lessonId));
    
    const allCompleted = [...new Set([...completedFromArray, ...completedFromProgress])];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ (—É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫—É—Ä—Å–µ)
    const unlockedLessonIds = [];
    for (let i = 1; i <= 15; i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞
      if (!isLessonLocked(i)) { // –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        unlockedLessonIds.push(i);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
    const availableLessonIds = [...new Set([...allCompleted, ...unlockedLessonIds])];
    
   
    
    return availableLessons.filter(lesson => availableLessonIds.includes(lesson.id));
  }, [availableLessons, completedLessons, lessonProgress, isLessonLocked]);


  const [currentTasks, setCurrentTasks] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStep, setGenerationStep] = useState('');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–∫–∞
  useEffect(() => {
    if (selectedLesson && currentTasks.length === 0) {
      console.log('useEffect: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Ä–æ–∫–∞:', selectedLesson.id);
      generateNewTasks();
    }
  }, [selectedLesson]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
  const generateNewTasks = useCallback(async () => {
    console.log('generateNewTasks –≤—ã–∑–≤–∞–Ω–∞, selectedLesson:', selectedLesson);
    if (!selectedLesson) {
      console.log('selectedLesson –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }
    
    console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Ä–æ–∫–∞:', selectedLesson.id);
    setIsGenerating(true);
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - —É–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    setGenerationStep('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏...');
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    let newTasks = getRandomTasks(selectedLesson.id, 5);
    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', newTasks);
    
    if (!newTasks || newTasks.length === 0) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Ä–æ–∫–∞:', selectedLesson.id);
      setIsGenerating(false);
      setGenerationStep('');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    newTasks = newTasks.map(task => ({
      ...task,
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      content: task.content + (Math.random() > 0.7 ? '\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏!' : ''),
      hint: task.hint + (Math.random() > 0.8 ? '\n\nüéØ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏!' : '')
    }));
    
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:', newTasks);
    setCurrentTasks(newTasks);
    setCurrentTask(0);
    setIsCompleted(false);
    setShowHint(false);
    setShowAnswer(false);
    setShowInstructions(false);
    setTaskHistory([]);
    setIsGenerating(false);
    setGenerationStep('');
  }, [selectedLesson]);

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
  const nextTask = () => {
    if (currentTask < currentTasks.length - 1) {
      setCurrentTask(currentTask + 1);
      setShowHint(false);
      setShowAnswer(false);
      setShowInstructions(false);
    } else {
      setIsCompleted(true);
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ
  const previousTask = () => {
    if (currentTask > 0) {
      setCurrentTask(currentTask - 1);
      setShowHint(false);
      setShowAnswer(false);
      setShowInstructions(false);
    }
  };

  // –í—ã–±–æ—Ä —É—Ä–æ–∫–∞
  const selectLesson = (lesson) => {
    console.log('–í—ã–±—Ä–∞–Ω —É—Ä–æ–∫:', lesson);
    setSelectedLesson(lesson);
  };

  // –°–±—Ä–æ—Å –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–∫–∞
  const resetToLessonSelection = () => {
    setSelectedLesson(null);
    setCurrentTasks([]);
    setCurrentTask(0);
    setIsCompleted(false);
    setShowHint(false);
    setShowAnswer(false);
    setShowInstructions(false);
    setTaskHistory([]);
    setIsGenerating(false);
    setGenerationStep('');
  };

  if (!selectedLesson) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="max-w-6xl mx-auto p-6"
      >
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">üíª –ü—Ä–∞–∫—Ç–∏–∫–∞</h1>
          <p className="text-xl text-gray-600 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏</p>
          <div className="flex justify-center space-x-4">
           
            <div className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg">
              –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {unlockedLessons.length}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {availableLessons.map((lesson) => {
            const isCompleted = unlockedLessons.some(unlocked => unlocked.id === lesson.id);
            return (
              <motion.div
                key={lesson.id}
                whileHover={{ scale: isCompleted ? 1.02 : 1 }}
                whileTap={{ scale: isCompleted ? 0.98 : 1 }}
                className={`bg-white rounded-2xl shadow-lg p-6 transition-all duration-300 ${
                  isCompleted 
                    ? 'hover:shadow-2xl cursor-pointer border-2 border-transparent hover:border-blue-200' 
                    : 'opacity-60 cursor-not-allowed border-2 border-gray-100'
                }`}
                onClick={() => isCompleted && selectLesson(lesson)}
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
                <div className="flex items-start justify-between mb-6">
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-gray-800 mb-2 leading-tight">{lesson.title}</h3>
                    <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
                      isCompleted 
                        ? 'bg-green-100 text-green-700 border border-green-200' 
                        : 'bg-gray-100 text-gray-600 border border-gray-200'
                    }`}>
                      <span className={`w-2 h-2 rounded-full mr-2 ${
                        isCompleted ? 'bg-green-500' : 'bg-gray-400'
                      }`}></span>
                      {isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : lesson.difficulty}
                    </div>
                  </div>
                </div>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <p className="text-gray-600 mb-6 leading-relaxed text-sm">{lesson.description}</p>

                {/* –¢–æ–ø–∏–∫–∏ */}
                <div className="flex flex-wrap gap-2 mb-6">
                  {lesson.topics.map((topic, index) => (
                    <span
                      key={index}
                      className={`text-xs px-3 py-1.5 rounded-full font-medium ${
                        isCompleted 
                          ? 'bg-blue-50 text-blue-700 border border-blue-200' 
                          : 'bg-gray-50 text-gray-500 border border-gray-200'
                      }`}
                    >
                      {topic}
                    </span>
                  ))}
                </div>

                {/* –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∞ */}
                <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                  <div className="flex items-center">
                    <span className={`text-sm font-medium flex items-center ${
                      isCompleted ? 'text-green-600' : 'text-gray-500'
                    }`}>
                      {isCompleted ? (
                        <>
                          <span className="w-4 h-4 bg-green-500 rounded-full mr-2 flex items-center justify-center">
                            <span className="text-white text-xs">‚úì</span>
                          </span>
                          –î–æ—Å—Ç—É–ø–µ–Ω
                        </>
                      ) : (
                        <>
                          <span className="w-4 h-4 bg-gray-400 rounded-full mr-2 flex items-center justify-center">
                            <span className="text-white text-xs">üîí</span>
                          </span>
                          –ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Ä–æ–∫
                        </>
                      )}
                    </span>
                  </div>
                  <button 
                    className={`px-5 py-2.5 rounded-xl font-medium transition-all duration-200 ${
                      isCompleted
                        ? 'bg-blue-500 text-white hover:bg-blue-600 shadow-md hover:shadow-lg transform hover:-translate-y-0.5'
                        : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                    }`}
                    disabled={!isCompleted}
                  >
                    {isCompleted ? '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
                  </button>
                </div>
              </motion.div>
            );
          })}
        </div>

        <div className="text-center mt-8">
          <Link
            to="/python-course"
            className="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
          >
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É
          </Link>
        </div>
      </motion.div>
    );
  }

  if (currentTasks.length === 0 || isGenerating) {
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É:', { currentTasks: currentTasks.length, isGenerating, selectedLesson });
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">
            {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...' : '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏...'}
          </p>
          {isGenerating && generationStep && (
            <div className="mt-4 text-sm text-blue-600 font-medium">
              {generationStep}
            </div>
          )}
          {isGenerating && (
            <div className="mt-4 text-sm text-gray-500">
              –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è...
            </div>
          )}
          {!isGenerating && currentTasks.length === 0 && (
            <div className="mt-4">
              <div className="text-sm text-red-500 mb-4">
                –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
              </div>
              <button
                onClick={() => generateNewTasks()}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  const currentTaskData = currentTasks[currentTask];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="max-w-4xl mx-auto p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">
              üíª –ü—Ä–∞–∫—Ç–∏–∫–∞: {selectedLesson.title}
            </h1>
            <p className="text-gray-600">–ó–∞–¥–∞—á–∞ {currentTask + 1} –∏–∑ {currentTasks.length}</p>
          </div>
          <button
            onClick={resetToLessonSelection}
            className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
          >
            ‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–∫
          </button>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
          <motion.div
            className="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${((currentTask + 1) / currentTasks.length) * 100}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-xl shadow-xl p-8 mb-8 border border-gray-100">
        <motion.h2
          key={currentTask}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-2xl font-bold text-gray-800 mb-6"
        >
          {currentTaskData.title}
        </motion.h2>

        <motion.div
          key={`content-${currentTask}`}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          className="space-y-6"
        >
          {/* –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ */}
          <div className="text-gray-700 leading-relaxed text-lg">
            {currentTaskData.content.split('\n').map((line, index) => (
              <p key={index} className="mb-3">
                {line}
              </p>
            ))}
          </div>

          {/* –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
          <div className="bg-blue-50 border-l-4 border-blue-400 rounded-lg p-6 shadow-sm">
            <div className="flex items-center mb-4">
              <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <span className="text-xl">üéØ</span>
              </div>
              <span className="text-blue-900 font-semibold text-lg">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</span>
            </div>
            <div className="bg-gray-900 rounded-lg p-4 shadow-inner">
              <pre className="text-green-400 text-lg font-mono">
                {currentTaskData.expectedOutput}
              </pre>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex space-x-4">
            <button
              onClick={() => setShowInstructions(!showInstructions)}
              className="px-6 py-3 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
            >
              <span>üìù</span>
              <span>{showInstructions ? '–°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'}</span>
            </button>
            <button
              onClick={() => setShowHint(!showHint)}
              className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
            >
              <span>üí°</span>
              <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
            </button>
            <button
              onClick={() => setShowAnswer(!showAnswer)}
              className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
            >
              <span>üîç</span>
              <span>{showAnswer ? '–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç'}</span>
            </button>
          </div>

          {showInstructions && (
            <div className="bg-amber-50 border-l-4 border-amber-400 rounded-lg p-6 shadow-sm">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-xl">üìù</span>
                </div>
                <span className="text-amber-900 font-semibold text-lg">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</span>
              </div>
              <ol className="text-amber-800 text-lg space-y-3">
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">1</span>
                  <span>–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞</span>
                </li>
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">2</span>
                  <span>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª .py</span>
                </li>
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">3</span>
                  <span>–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é</span>
                </li>
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">4</span>
                  <span>–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É</span>
                </li>
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">5</span>
                  <span>–°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º</span>
                </li>
                <li className="flex items-start">
                  <span className="w-6 h-6 bg-amber-200 rounded-full flex items-center justify-center text-amber-900 font-bold text-sm mr-3 mt-0.5">6</span>
                  <span>–ù–∞–∂–º–∏—Ç–µ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã</span>
                </li>
              </ol>
            </div>
          )}

          {showHint && (
            <div className="bg-blue-50 border-l-4 border-blue-400 rounded-lg p-6 shadow-sm">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-xl">üí°</span>
                </div>
                <span className="text-blue-900 font-semibold text-lg">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
              </div>
              <div className="text-blue-800 text-lg space-y-3">
                {currentTaskData.hint.split('\n').map((line, index) => (
                  <p key={index} className="leading-relaxed">
                    {line}
                  </p>
                ))}
              </div>
            </div>
          )}

          {showAnswer && (
            <div className="bg-green-50 border-l-4 border-green-400 rounded-lg p-6 shadow-sm">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center mr-3">
                  <span className="text-xl">üîç</span>
                </div>
                <span className="text-green-900 font-semibold text-lg">–†–µ—à–µ–Ω–∏–µ</span>
              </div>
              <div className="bg-gray-900 rounded-lg p-4 mb-4 shadow-inner">
                <pre className="text-green-400 text-lg font-mono">
                  {currentTaskData.code}
                </pre>
              </div>
              <div className="text-green-800 text-lg space-y-3">
                <div className="flex items-start mb-4">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center mr-3">
                    <span className="text-lg">üìñ</span>
                  </div>
                  <span className="font-semibold text-green-900">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ</span>
                </div>
                {currentTaskData.explanation.split('\n').map((line, index) => (
                  <p key={index} className="leading-relaxed ml-11">
                    {line}
                  </p>
                ))}
              </div>
            </div>
          )}
        </motion.div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <button
          onClick={previousTask}
          disabled={currentTask === 0}
          className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${
            currentTask === 0
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-gray-600 text-white hover:bg-gray-700 shadow-md hover:shadow-lg transform hover:-translate-y-0.5'
          }`}
        >
          <span>‚Üê</span>
          <span>–ü—Ä–µ–¥—ã–¥—É—â–∞—è</span>
        </button>

        <div className="flex space-x-4">
          <button
            onClick={generateNewTasks}
            disabled={isGenerating}
            className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 ${
              isGenerating
                ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                : 'bg-purple-500 text-white hover:bg-purple-600'
            }`}
          >
            <span>{isGenerating ? '‚è≥' : 'üîÑ'}</span>
            <span>{isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏'}</span>
          </button>

          {currentTask < currentTasks.length - 1 ? (
            <button
              onClick={nextTask}
              className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
            >
              <span>–°–ª–µ–¥—É—é—â–∞—è</span>
              <span>‚Üí</span>
            </button>
          ) : (
            <button
              onClick={nextTask}
              className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-all duration-200 flex items-center space-x-2 shadow-md hover:shadow-lg transform hover:-translate-y-0.5"
            >
              <span>üéâ</span>
              <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å</span>
            </button>
          )}
        </div>
      </div>

      {/* –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
      {isCompleted && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        >
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="bg-white rounded-2xl p-8 max-w-md mx-4 text-center shadow-2xl"
          >
            <div className="text-6xl mb-4 animate-bounce">üéâ</div>
            <h2 className="text-2xl font-bold text-gray-800 mb-4">
              –û—Ç–ª–∏—á–Ω–æ!
            </h2>
            <p className="text-gray-600 mb-6">
              –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ —É—Ä–æ–∫—É "{selectedLesson.title}"!
            </p>
            <div className="space-y-3">
              <button
                onClick={generateNewTasks}
                disabled={isGenerating}
                className={`w-full px-6 py-3 rounded-lg transition-all duration-200 ${
                  isGenerating
                    ? 'bg-gray-400 text-gray-200 cursor-not-allowed'
                    : 'bg-blue-500 text-white hover:bg-blue-600 shadow-md hover:shadow-lg transform hover:-translate-y-0.5'
                }`}
              >
                {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üîÑ –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏'}
              </button>
              <button
                onClick={resetToLessonSelection}
                className="w-full px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–∫
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </motion.div>
  );
}

export default Practice; 