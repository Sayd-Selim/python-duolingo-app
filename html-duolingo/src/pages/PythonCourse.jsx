import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { useProgress } from '../context/ProgressContext';
import { useAuth } from '../context/AuthContext';
import axios from 'axios';

function PythonCourse() {
  const { isLessonCompleted, isLessonLocked, getLessonProgress, getCourseProgress, refreshUserProgress } = useProgress();
  // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // const { user, refreshUserData } = useAuth();
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = useMemo(() => ({ userId: 'demo_user_123' }), []);
  const refreshUserData = useCallback(async () => true, []); // –§–∏–∫—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  const [lessonAccess, setLessonAccess] = useState({});
  const [userProgress, setUserProgress] = useState({});
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [completedLessons, setCompletedLessons] = useState([]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
  const getCompletedLessonsCount = useCallback(() => {
    return pythonUnits.filter(unit => {
      const progress = userProgress[unit.id];
      return progress?._doc?.completed || false;
    }).length;
  }, [userProgress]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (user && user.userId) {
      // –î–ï–ú–û –†–ï–ñ–ò–ú: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º
      // –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —É—Ä–æ–∫–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      const access = {};
      for (let i = 1; i <= 15; i++) {
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –æ—Ç–∫—Ä—ã—Ç—ã —Ç–æ–ª—å–∫–æ —É—Ä–æ–∫–∏ 1-3
        access[i] = i <= 1;
      }
      setLessonAccess(access);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏–∑ localStorage
      try {
        const completed = JSON.parse(localStorage.getItem('completedLessons') || '[]');
        setCompletedLessons(completed);
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:', completed);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:', error);
        setCompletedLessons([]);
      }
      
      setIsLoading(false); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ä–∞–∑—É
      
      // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ —Ñ–æ–Ω–µ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
      /*
      const loadFreshData = async () => {
        try {
          const success = await refreshUserData();
          
          if (success) {
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = JSON.parse(localStorage.getItem('user') || '{}');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º
            const updatedAccess = {};
            for (let i = 1; i <= 15; i++) {
              const lessonKey = `lesson${i}`;
              updatedAccess[i] = updatedUser[lessonKey] === true;
            }
            setLessonAccess(updatedAccess);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          await refreshUserProgress();
        } catch (error) {
          console.error('PythonCourse: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error);
        }
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
      loadFreshData();
      */
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ –ë–î');
      
      // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
      /*
      const loadProgress = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/api/progress/${user.userId}`);
          const data = response.data;
          console.log('data',data);
          
          const progressMap = {};
          data.forEach(progress => {
            progressMap[progress.lessonId] = progress;
          });
          setUserProgress(progressMap);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
      };
      loadProgress();
      */
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }, [user]);

  const pythonUnits = [
    { id: 1, title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python', path: '/level/1/unit/1', icon: 'üêç', description: '–û—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞ Python, –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' },
    { id: 2, title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –í—ã–≤–æ–¥ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', path: '/level/1/unit/2', icon: 'üìä', description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, —Ñ—É–Ω–∫—Ü–∏–∏ print() –∏ input()' },
    { id: 3, title: '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', path: '/level/1/unit/3', icon: 'üî¢', description: '–ß–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è' },
    { id: 4, title: '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è', path: '/level/1/unit/4', icon: 'üîÄ', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã' },
    { id: 5, title: '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', path: '/level/1/unit/5', icon: 'üîÑ', description: 'if, elif, else - –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ' },
    { id: 6, title: '–¶–∏–∫–ª—ã for –∏ while', path: '/level/1/unit/6', icon: 'üìã', description: '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ' },
    { id: 7, title: '–°–ø–∏—Å–∫–∏ –∏ –∫–æ—Ä—Ç–µ–∂–∏', path: '/level/1/unit/7', icon: 'üìö', description: '–†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö' },
    { id: 8, title: '–°–ª–æ–≤–∞—Ä–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞', path: '/level/1/unit/8', icon: '‚öôÔ∏è', description: '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' },
    { id: 9, title: '–§—É–Ω–∫—Ü–∏–∏', path: '/level/1/unit/9', icon: 'üìÅ', description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π' },
    { id: 10, title: '–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏', path: '/level/1/unit/10', icon: 'üìÑ', description: '–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤' },
    { id: 11, title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π', path: '/level/1/unit/11', icon: '‚ö†Ô∏è', description: 'try, except - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫' },
    { id: 12, title: '–ú–æ–¥—É–ª–∏ –∏ –ø–∞–∫–µ—Ç—ã', path: '/level/1/unit/12', icon: 'üì¶', description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫' },
    { id: 13, title: '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', path: '/level/1/unit/13', icon: 'üèóÔ∏è', description: '–ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã' },
    { id: 14, title: '–†–∞–±–æ—Ç–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏', path: '/level/1/unit/14', icon: 'üìö', description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python' },
    { id: 15, title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç', path: '/level/1/unit/15', icon: 'üöÄ', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞' },
  ];
  
  // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
  /*
  const handleRefreshData = async () => {
    setIsRefreshing(true);
    try {
      const success = await refreshUserData();
      if (success) {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AuthContext
        const updatedUser = JSON.parse(localStorage.getItem('user') || '{}');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø—ã –∫ —É—Ä–æ–∫–∞–º
        const access = {};
        for (let i = 1; i <= 15; i++) {
          const lessonKey = `lesson${i}`;
          access[i] = updatedUser[lessonKey] === true;
          console.log(`PythonCourse (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): ${lessonKey} = ${updatedUser[lessonKey]}, –¥–æ—Å—Ç—É–ø –¥–ª—è —É—Ä–æ–∫–∞ ${i}: ${access[i]}`);
        }
        setLessonAccess(access);
        console.log('PythonCourse: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      } else {
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsRefreshing(false);
    }
  };
  */
  
  // –î–ï–ú–û –†–ï–ñ–ò–ú: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefreshData = useCallback(async () => {
    setIsRefreshing(true);
    try {
      // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      alert('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
      console.log('–î–µ–º–æ —Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    } finally {
      setIsRefreshing(false);
    }
  }, []);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="max-w-6xl mx-auto p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É—Ä—Å–∞ */}
      <div className="text-center mb-12">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="inline-block mb-6"
        >
          <div className="text-6xl mb-4">üêç</div>
          <h1 className="text-5xl font-bold text-green-600 mb-4">
            –ö—É—Ä—Å Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
          </h1>
        </motion.div>
        
        <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
          –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python - –æ–¥–Ω–æ–º –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. 
          –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.
        </p>
        
        <div className="mt-8 flex justify-center space-x-4">
          <div className="bg-green-100 px-4 py-2 rounded-lg">
            <span className="text-green-800 font-semibold">15 —É—Ä–æ–∫–æ–≤</span>
          </div>
          <div className="bg-blue-100 px-4 py-2 rounded-lg">
            <span className="text-blue-800 font-semibold">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</span>
          </div>
          <div className="bg-purple-100 px-4 py-2 rounded-lg">
            <span className="text-purple-800 font-semibold">–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã</span>
          </div>
        </div>
        
        
        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö */}
        {/* <div className="mt-4 flex justify-center">
          <button
            onClick={handleRefreshData}
            disabled={isRefreshing}
            className={`px-4 py-2 rounded-lg transition-colors text-sm ${
              isRefreshing 
                ? 'bg-gray-400 text-gray-200 cursor-not-allowed' 
                : 'bg-blue-500 text-white hover:bg-blue-600'
            }`}
          >
            {isRefreshing ? 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î'}
          </button>
          <div className="mt-2 text-xs text-gray-500">
            –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </div>
        </div> */}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞ */}
      {/* <div className="mb-8 p-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-semibold mb-4 text-gray-800">
          –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
        </h2>
        <div className="space-y-4">
          <div>
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞</span>
              <span className="text-green-600 font-semibold">
                {getCourseProgress(getCompletedLessonsCount() * 100)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3">
              <motion.div 
                className="bg-gradient-to-r from-green-500 to-emerald-500 h-3 rounded-full"
                initial={{ width: 0 }}
                animate={{ width: `${getCourseProgress(getCompletedLessonsCount() * 100)}%` }}
                transition={{ duration: 1, ease: "easeOut" }}
              />
            </div>
            <div className="mt-2 text-sm text-gray-500">
              –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {getCompletedLessonsCount()} –∏–∑ {pythonUnits.length}
            </div>
          </div>
        </div>
      </div> */}

      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
      {/* <div className="mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg shadow-md border border-blue-200">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold mb-2 text-blue-800">
              üíª –ü—Ä–∞–∫—Ç–∏–∫–∞
            </h2>
            <p className="text-blue-700">
              –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –∑–Ω–∞–Ω–∏—è, —Ä–µ—à–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–∫–∞–º
            </p>
          </div>
          <Link
            to="/practice"
            className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
          >
            <span>üöÄ</span>
            <span>–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É</span>
          </Link>
        </div>
      </div> */}

      {/* –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {pythonUnits.map((unit, index) => {
          const hasAccess = lessonAccess[unit.id] || false;
          const progress = userProgress[unit.id];
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É—Ä–æ–∫ –≤ localStorage
          const isCompleted = completedLessons.includes(unit.id);
          // –ï—Å–ª–∏ —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∏–Ω–∞—á–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
          const progressPercent = isCompleted ? 100 : (progress?._doc?.progress || 0);
          const isLocked = !hasAccess;
          
          return (
            <motion.div
              key={unit.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 border-l-4 hover:shadow-lg ${
                isCompleted 
                  ? 'border-green-500' 
                  : isLocked 
                    ? 'border-gray-300 opacity-60' 
                    : 'border-green-500'
              }`}
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{unit.icon}</span>
                    <span className={`text-sm font-semibold ${
                      isCompleted ? 'text-green-600' : isLocked ? 'text-gray-400' : 'text-green-600'
                    }`}>
                      –£—Ä–æ–∫ {unit.id}
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    {isCompleted && (
                      <span className="text-green-500 text-lg">‚úÖ</span>
                    )}
                    {isLocked && (
                      <span className="text-gray-400 text-lg">üîí</span>
                    )}
                  </div>
                </div>
                
                <h3 className={`text-xl font-semibold mb-2 ${
                  isCompleted ? 'text-gray-800' : isLocked ? 'text-gray-500' : 'text-gray-800'
                }`}>
                  {unit.title}
                </h3>
                
                <p className={`text-sm mb-4 ${
                  isCompleted ? 'text-gray-600' : isLocked ? 'text-gray-400' : 'text-gray-600'
                }`}>
                  {unit.description}
                </p>
                
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
                {!isLocked && progress && (
                  <div className="mb-4">
                    <div className="flex justify-between text-xs text-gray-500 mb-1">
                      <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                      <span>{progressPercent.toFixed(2)}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <motion.div 
                        className="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ width: `${progressPercent.toFixed(2)}%` }}
                        transition={{ duration: 0.5 }}
                      />
                    </div>
                  </div>
                )}
                
                {isLocked ? (
                  <div className="mt-4 p-3 bg-gray-100 rounded-lg">
                    <p className="text-sm text-gray-500 text-center">
                      üîí –£—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    </p>
                  </div>
                ) : (
                  <Link
                    to={unit.path}
                    className={`mt-4 w-full px-4 py-3 rounded-lg transition-colors text-center block font-medium ${
                      isCompleted
                        ? 'bg-green-100 text-green-700 hover:bg-green-200'
                        : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'
                    }`}
                  >
                    {isCompleted ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫' : '–ù–∞—á–∞—Ç—å —É—Ä–æ–∫'}
                  </Link>
                )}
              </div>
            </motion.div>
          );
        })}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
      <div className="mt-12 text-center">
        <Link
          to="/"
          className="inline-flex items-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>
    </motion.div>
  );
}

export default PythonCourse; 