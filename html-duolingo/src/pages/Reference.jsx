import React, { useState } from 'react';
import { motion } from 'framer-motion';

const pythonReference = [
    {
        concept: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
        description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ',
        metaphor: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∏ —Å –Ω–∞–∫–ª–µ–π–∫–∞–º–∏. –í—ã –∫–ª–∞–¥–µ—Ç–µ —á—Ç–æ-—Ç–æ –≤ –∫–æ—Ä–æ–±–∫—É –∏ –ø–∏—à–µ—Ç–µ –Ω–∞ –Ω–∞–∫–ª–µ–π–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ—Ç–æ–º –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç—É –∫–æ—Ä–æ–±–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –≤ –Ω–µ–π –ª–µ–∂–∏—Ç.',
        examples: [
            {
                code: 'name = "–ò–≤–∞–Ω"',
                result: '–°–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è name —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "–ò–≤–∞–Ω"'
            },
            {
                code: 'age = 25\nprint(age)',
                result: '25',
                note: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è age —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ 25'
            }
        ],
        pitfalls: [
            '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ Python (if, for, while, etc.)',
            '–ò–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É (name –∏ Name - —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)',
            '–ù–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–º–µ–Ω–∞ —Å —Ü–∏—Ñ—Ä'
        ]
    },
    {
        concept: '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö',
        description: '–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å Python',
        metaphor: '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±–∞–Ω–∫–∞ –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏, –∫–æ—Ä–æ–±–∫–∞ –¥–ª—è —Ç–≤–µ—Ä–¥—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ–Ω–≤–µ—Ä—Ç –¥–ª—è –±—É–º–∞–≥. –ö–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
        examples: [
            {
                code: '# –°—Ç—Ä–æ–∫–∞ (str)\nname = "Python"\n\n# –ß–∏—Å–ª–æ (int)\nage = 25\n\n# –ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (float)\nheight = 1.75\n\n# –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (bool)\nis_student = True',
                result: '–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π'
            }
        ],
        pitfalls: [
            '–ù–µ —Å–º–µ—à–∏–≤–∞–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
            '–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–µ–Ω–∏–µ –≤ Python –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float',
            '–°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞'
        ]
    },
    {
        concept: '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
        description: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ',
        metaphor: '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã - —ç—Ç–æ –∫–∞–∫ —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ –¥–æ—Ä–æ–≥–µ. –ï—Å–ª–∏ –≥–æ—Ä–∏—Ç –∑–µ–ª–µ–Ω—ã–π (—É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ) - –µ–¥–µ–º, –µ—Å–ª–∏ –∫—Ä–∞—Å–Ω—ã–π (—É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ) - —Å—Ç–æ–∏–º. –ü—Ä–æ–≥—Ä–∞–º–º–∞ "—Ä–µ—à–∞–µ—Ç", –∫–∞–∫–æ–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.',
        examples: [
            {
                code: 'age = 18\nif age >= 18:\n    print("–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")\nelse:\n    print("–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π")',
                result: '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π'
            }
        ],
        pitfalls: [
            '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è',
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å—Ç—É–ø–∞–π—Ç–µ –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ == –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∞ –Ω–µ ='
        ]
    },
    {
        concept: '–¶–∏–∫–ª—ã',
        description: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–æ–¥–∞',
        metaphor: '–¶–∏–∫–ª—ã - —ç—Ç–æ –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ. –û–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.',
        examples: [
            {
                code: '# –¶–∏–∫–ª for\nfor i in range(5):\n    print(i)\n\n# –¶–∏–∫–ª while\ncount = 0\nwhile count < 3:\n    print(count)\n    count += 1',
                result: '0\n1\n2\n3\n4\n\n0\n1\n2'
            }
        ],
        pitfalls: [
            '–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ while',
            '–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–µ–º—É',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ break –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞'
        ]
    },
    {
        concept: '–§—É–Ω–∫—Ü–∏–∏',
        description: '–ë–ª–æ–∫–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
        metaphor: '–§—É–Ω–∫—Ü–∏–∏ - —ç—Ç–æ –∫–∞–∫ —Ä–µ—Ü–µ–ø—Ç—ã. –í—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –æ–¥–∏–Ω —Ä–∞–∑, –∞ –ø–æ—Ç–æ–º –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –º–Ω–æ–≥–æ —Ä–∞–∑, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑—ã–≤–∞—è –µ–≥–æ –ø–æ –∏–º–µ–Ω–∏.',
        examples: [
            {
                code: 'def greet(name):\n    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"\n\nmessage = greet("–ò–≤–∞–Ω")\nprint(message)',
                result: '–ü—Ä–∏–≤–µ—Ç, –ò–≤–∞–Ω!'
            }
        ],
        pitfalls: [
            '–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ return –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π',
            '–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
        ]
    },
    {
        concept: '–°–ø–∏—Å–∫–∏',
        description: '–£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        metaphor: '–°–ø–∏—Å–∫–∏ - —ç—Ç–æ –∫–∞–∫ —à–∫–∞—Ñ —Å –ø–æ–ª–∫–∞–º–∏. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π –Ω–æ–º–µ—Ä (–∏–Ω–¥–µ–∫—Å), –∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ª—é–±–æ–π –ø–æ–ª–∫–µ.',
        examples: [
            {
                code: 'fruits = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω"]\nfruits.append("–≥—Ä—É—à–∞")\nprint(fruits[0])\nprint(len(fruits))',
                result: '—è–±–ª–æ–∫–æ\n4'
            }
        ],
        pitfalls: [
            '–ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –∞ –Ω–µ —Å 1',
            '–ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞',
            '–°–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ–º—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ø–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'
        ]
    }
];

function Reference() {
    const [activeConcept, setActiveConcept] = useState(0);
    const [activeTab, setActiveTab] = useState('examples');

    const toggleTab = (conceptIndex, tabName) => {
        setActiveConcept(conceptIndex);
        setActiveTab(tabName);
    };

    const getConceptCategory = (concept) => {
        if (['–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', '–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö'].includes(concept)) return '–û—Å–Ω–æ–≤—ã';
        if (['–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', '–¶–∏–∫–ª—ã'].includes(concept)) return '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
        if (['–§—É–Ω–∫—Ü–∏–∏', '–°–ø–∏—Å–∫–∏'].includes(concept)) return '–°—Ç—Ä—É–∫—Ç—É—Ä—ã';
        return '–î—Ä—É–≥–æ–µ';
    };

    const categories = ['–í—Å–µ', '–û—Å–Ω–æ–≤—ã', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–°—Ç—Ä—É–∫—Ç—É—Ä—ã'];
    const [activeCategory, setActiveCategory] = useState('–í—Å–µ');

    const filteredConcepts = activeCategory === '–í—Å–µ' 
        ? pythonReference 
        : pythonReference.filter(concept => getConceptCategory(concept.concept) === activeCategory);

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="max-w-7xl mx-auto p-6"
        >
            <div className="text-center mb-8">
                <h1 className="text-4xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent mb-4">
                    üêç –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ Python
                </h1>
                <p className="text-gray-600 text-lg max-w-3xl mx-auto">
                    –ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–∞–º Python —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ —Ç–∏–ø–∏—á–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
                </p>
            </div>

            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div className="flex justify-center mb-8">
                <div className="inline-flex rounded-lg border border-green-200 p-1 bg-green-50">
                    {categories.map((category) => (
                        <button
                            key={category}
                            onClick={() => setActiveCategory(category)}
                            className={`px-6 py-2 rounded-lg transition-colors ${
                                activeCategory === category
                                    ? 'bg-green-600 text-white'
                                    : 'text-green-600 hover:bg-green-100'
                            }`}
                        >
                            {category}
                        </button>
                    ))}
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                {filteredConcepts.map((concept, index) => (
                    <motion.div
                        key={concept.concept}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow border-l-4 border-green-500"
                    >
                        <div className="p-6">
                            <div className="flex items-center justify-between mb-4">
                                <span className="text-sm font-semibold text-green-600">
                                    {getConceptCategory(concept.concept)}
                                </span>
                                <span className="text-sm text-gray-500">
                                    Python
                                </span>
                            </div>
                            <h3 className="text-xl font-semibold text-gray-800 mb-2">
                                {concept.concept}
                            </h3>
                            <p className="text-gray-600 mb-4">
                                {concept.description}
                            </p>
                            <button
                                onClick={() => toggleTab(index, 'examples')}
                                className="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
                            >
                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                            </button>
                        </div>
                    </motion.div>
                ))}
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            {filteredConcepts.length > 0 && (
                <div className="bg-white rounded-lg shadow-lg p-8">
                    <div className="flex items-center justify-between mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            {filteredConcepts[activeConcept].concept}
                        </h2>
                        <div className="flex space-x-2">
                            <button
                                onClick={() => setActiveTab('examples')}
                                className={`px-4 py-2 rounded-lg transition-colors ${
                                    activeTab === 'examples'
                                        ? 'bg-green-600 text-white'
                                        : 'text-green-600 hover:bg-green-100'
                                }`}
                            >
                                –ü—Ä–∏–º–µ—Ä—ã
                            </button>
                            <button
                                onClick={() => setActiveTab('metaphor')}
                                className={`px-4 py-2 rounded-lg transition-colors ${
                                    activeTab === 'metaphor'
                                        ? 'bg-green-600 text-white'
                                        : 'text-green-600 hover:bg-green-100'
                                }`}
                            >
                                –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
                            </button>
                            <button
                                onClick={() => setActiveTab('pitfalls')}
                                className={`px-4 py-2 rounded-lg transition-colors ${
                                    activeTab === 'pitfalls'
                                        ? 'bg-green-600 text-white'
                                        : 'text-green-600 hover:bg-green-100'
                                }`}
                            >
                                –û—à–∏–±–∫–∏
                            </button>
                        </div>
                    </div>

                    <div className="space-y-6">
                        {activeTab === 'examples' && (
                            <div>
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                                <div className="space-y-4">
                                    {filteredConcepts[activeConcept].examples.map((example, index) => (
                                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                                            <div className="bg-gray-900 rounded-lg p-4 mb-3">
                                                <div className="flex items-center justify-between mb-2">
                                                    <span className="text-green-400 font-medium">Python</span>
                                                    <button
                                                        onClick={() => navigator.clipboard.writeText(example.code)}
                                                        className="text-gray-400 hover:text-white transition-colors"
                                                    >
                                                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                                                    </button>
                                                </div>
                                                <pre className="text-green-400 overflow-x-auto">
                                                    <code>{example.code}</code>
                                                </pre>
                                            </div>
                                            <div className="text-gray-700">
                                                <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {example.result}
                                            </div>
                                            {example.note && (
                                                <div className="mt-2 text-sm text-blue-600 bg-blue-50 p-2 rounded">
                                                    üí° {example.note}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {activeTab === 'metaphor' && (
                            <div>
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">–ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ</h3>
                                <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
                                    <p className="text-blue-800 leading-relaxed">
                                        {filteredConcepts[activeConcept].metaphor}
                                    </p>
                                </div>
                            </div>
                        )}

                        {activeTab === 'pitfalls' && (
                            <div>
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏</h3>
                                <div className="space-y-3">
                                    {filteredConcepts[activeConcept].pitfalls.map((pitfall, index) => (
                                        <div key={index} className="flex items-start space-x-3">
                                            <span className="text-red-500 text-lg">‚ö†Ô∏è</span>
                                            <p className="text-gray-700">{pitfall}</p>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}
        </motion.div>
    );
}

export default Reference; 