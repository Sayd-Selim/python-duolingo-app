import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';
import { useLessonProgress } from '../../hooks/useLessonProgress';
import { useAuth } from '../../context/AuthContext';
import { useProgress } from '../../context/ProgressContext';
import CandlestickChart from '../../components/CandlestickChart';
import ProfessionalCandlestickChart from '../../components/ProfessionalCandlestickChart';
import RechartsCandlestickChart from '../../components/RechartsCandlestickChart';

function CryptoLesson2() {
  const [showHint, setShowHint] = useState(false);
  const [userAnswer, setUserAnswer] = useState('');
  const [isCorrect, setIsCorrect] = useState(null);
  const [lessonCompleted, setLessonCompleted] = useState(false);
  const [showCongratulations, setShowCongratulations] = useState(false);
  const [isLessonPassed, setIsLessonPassed] = useState(false);
  const navigate = useNavigate();
  const { refreshUserProgress } = useProgress();
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = { userId: 'demo_user_123' };
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem('cryptoCompletedLessons') || '[]');
      if (!completedLessons.includes(lessonId)) {
        completedLessons.push(lessonId);
        localStorage.setItem('cryptoCompletedLessons', JSON.stringify(completedLessons));
      }
      console.log('–£—Ä–æ–∫ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:', lessonId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
    }
  };

  const checkLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem('cryptoCompletedLessons') || '[]');
      return completedLessons.includes(lessonId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:', error);
      return false;
    }
  };
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const {
    currentStep,
    lessonProgress,
    isLoading,
    updateCurrentStep,
    saveStepAnswer,
    getStepAnswer,
    isLessonCompleted,
    completeLesson,
    clearLessonProgress,
    loadProgressFromServer
  } = useLessonProgress(2);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  const chartData = useMemo(() => [
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    { open: 100, high: 105, low: 98, close: 103 },
    { open: 103, high: 108, low: 102, close: 106 },
    { open: 106, high: 110, low: 104, close: 107 },
    { open: 107, high: 112, low: 105, close: 109 },
    { open: 109, high: 115, low: 107, close: 113 },
    { open: 113, high: 118, low: 110, close: 116 },
    { open: 116, high: 120, low: 112, close: 114 },
    { open: 114, high: 116, low: 108, close: 110 },
    { open: 110, high: 113, low: 105, close: 107 },
    { open: 107, high: 109, low: 100, close: 102 }
  ], []);

  // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
  const professionalChartData = useMemo(() => {
    const now = Math.floor(Date.now() / 1000);
    const data = [];
    
    for (let i = 0; i < 100; i++) {
      const basePrice = 50000 + Math.sin(i * 0.1) * 5000 + Math.random() * 2000;
      const open = basePrice;
      const close = basePrice + (Math.random() - 0.5) * 1000;
      const high = Math.max(open, close) + Math.random() * 500;
      const low = Math.min(open, close) - Math.random() * 500;
      const volume = Math.floor(Math.random() * 1000000) + 500000;
      
      data.push({
        time: now - (100 - i) * 3600, // –ö–∞–∂–¥—ã–π —á–∞—Å
        open: Math.round(open),
        high: Math.round(high),
        low: Math.round(low),
        close: Math.round(close),
        volume: volume
      });
    }
    
    return data;
  }, []);

  const specialPatternsData = useMemo(() => [
    // –î–æ–¥–∂–∏
    { open: 100, high: 102, low: 98, close: 100 },
    // –ú–∞—Ä—É–±–æ–∑—É (–±—ã—á–∏–π)
    { open: 100, high: 110, low: 100, close: 110 },
    // –•–∞–º–º–µ—Ä
    { open: 100, high: 102, low: 90, close: 101 },
    // –û–±—ã—á–Ω–∞—è —Å–≤–µ—á–∞
    { open: 100, high: 105, low: 98, close: 103 }
  ], []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏ —É—Ä–æ–∫–∞
  const steps = useMemo(() => [
    {
      type: 'intro',
      title: 'üïØÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π! üìä',
      content: 'üéØ –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö. –û–Ω–∏ –±—ã–ª–∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω—ã –≤ –Ø–ø–æ–Ω–∏–∏ –≤ XVIII –≤–µ–∫–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ä–∏—Å–æ–º –∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–æ –≤—Å–µ–º –º–∏—Ä–µ.\n\nüí° –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–µ—á—É –∫–∞–∫ —Ä–∞—Å—Å–∫–∞–∑ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ —Å —Ü–µ–Ω–æ–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏. –ö–∞–∂–¥–∞—è —Å–≤–µ—á–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ, –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º —Ü–µ–Ω—ã.\n\nüöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—É—á–∏—Ç—å—Å—è —á–∏—Ç–∞—Ç—å —ç—Ç–∏ "–∏—Å—Ç–æ—Ä–∏–∏" –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω?',
      code: null
    },
    {
      type: 'theory',
      title: 'ü§î –ß—Ç–æ —Ç–∞–∫–æ–µ —è–ø–æ–Ω—Å–∫–∞—è —Å–≤–µ—á–∞?',
      content: '‚ú® –Ø–ø–æ–Ω—Å–∫–∞—è —Å–≤–µ—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π:\n\nüìù –¢–µ–ª–æ —Å–≤–µ—á–∏ (body) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è\nüìö –¢–µ–Ω–∏ (shadows/wicks) - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã\n\nüë• –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ (–±—ã—á—å—è) - —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è\nüåç –ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞ (–º–µ–¥–≤–µ–∂—å—è) - —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∏–∂–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è\n\nüéÆ –°–≤–µ—á–∏ ‚Äî –∫–∞–∫ —ç–º–æ—Ü–∏–∏ —Ä—ã–Ω–∫–∞. –ó–µ–ª–µ–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–º (–±—ã–∫–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç), –∞ –∫—Ä–∞—Å–Ω—ã–µ - –ø–µ—Å—Å–∏–º–∏–∑–º (–º–µ–¥–≤–µ–¥–∏ –ø–æ–±–µ–∂–¥–∞—é—Ç).\n\nüí™ –ù–∞—É—á–∏–≤—à–∏—Å—å —á–∏—Ç–∞—Ç—å —Å–≤–µ—á–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞!',
      code: null
    },
    {
      type: 'code',
      title: 'üéâ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —è–ø–æ–Ω—Å–∫–æ–π —Å–≤–µ—á–∏',
      content: 'üéØ –ö–∞–∂–¥–∞—è —Å–≤–µ—á–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n\nüí≠ Open (–û—Ç–∫—Ä—ã—Ç–∏–µ) - —Ü–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–∏–æ–¥–∞\nHigh (–ú–∞–∫—Å–∏–º—É–º) - —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\nLow (–ú–∏–Ω–∏–º—É–º) - —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥\nClose (–ó–∞–∫—Ä—ã—Ç–∏–µ) - —Ü–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞\n\nüé™ –¢–µ–ª–æ —Å–≤–µ—á–∏ - —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–∂–¥—É Open –∏ Close\n–¢–µ–Ω–∏ - —ç—Ç–æ —Ç–æ–Ω–∫–∏–µ –ª–∏–Ω–∏–∏ –æ—Ç —Ç–µ–ª–∞ –¥–æ High –∏ Low\n\nüé® –¶–≤–µ—Ç —Å–≤–µ—á–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã!\n\nüìä –ù–∏–∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫. –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–≤–µ—á–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–µ!',
      code: '–ë—ã—á—å—è —Å–≤–µ—á–∞ (–∑–µ–ª–µ–Ω–∞—è):\nOpen: $100\nHigh: $110\nLow: $95\nClose: $108\n\n–ú–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞ (–∫—Ä–∞—Å–Ω–∞—è):\nOpen: $100\nHigh: $105\nLow: $90\nClose: $92',
      explanation: 'üîç –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞: Close > Open (—Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞)\n–ö—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞: Close < Open (—Ü–µ–Ω–∞ —É–ø–∞–ª–∞)\n\n–†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è.\n–î–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.\n\nüìù –ß–µ–º –±–æ–ª—å—à–µ —Ç–µ–ª–æ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞.\n\nüé® –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —è–∑—ã–∫ —Å–≤–µ—á–µ–π!',
      chart: chartData
    },
    {
      type: 'practice',
      title: 'üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!',
      content: '‚úçÔ∏è –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±—É–¥–µ—Ç —Å–≤–µ—á–∞, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è $100, –∞ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è $105?\n\nüó£Ô∏è –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è, —Ç–æ —ç—Ç–æ –±—ã—á—å—è —Å–≤–µ—á–∞.\n\nüé≠ –≠—Ç–æ –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤—ã—Ä–æ—Å–ª–∞ –ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –¥–µ–Ω—å!\n\nüìä –ò–∑—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤–µ—á–µ–π!',
      code: '–¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: $100\n–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: $105\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ (–±—ã—á—å—è)',
      task: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç',
      answer: '–ó–µ–ª–µ–Ω–∞—è',
      hint: 'üí° –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è, —Å–≤–µ—á–∞ –∑–µ–ª–µ–Ω–∞—è.\n\nüìù –ó–µ–ª–µ–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç —Ü–µ–Ω—ã (–±—ã—á–∏–π —Ç—Ä–µ–Ω–¥).\n\nüéØ –ë—ã–∫–∏ = —Ä–æ—Å—Ç = –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç.',
      chart: chartData
    },
    {
      type: 'theory',
      title: 'üí¨ –¢–∏–ø—ã —Å–≤–µ—á–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É',
      content: 'üìù –°–≤–µ—á–∏ –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏—Ö —Ç–µ–ª–∞:\n\nüìñ –î–æ–¥–∂–∏ (Doji) - —Ç–µ–ª–æ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n–ú–∞—Ä—É–±–æ–∑—É (Marubozu) - —Ç–µ–ª–æ –±–æ–ª—å—à–æ–µ, —Ç–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n–•–∞–º–º–µ—Ä (Hammer) - –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ, –¥–ª–∏–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å\n\nüé® –ö–∞–∂–¥—ã–π —Ç–∏–ø —Å–≤–µ—á–∏ –∏–º–µ–µ—Ç —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±—É–¥—É—â–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã.\n\nüìå –î–æ–¥–∂–∏ —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞.\n–ú–∞—Ä—É–±–æ–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n–•–∞–º–º–µ—Ä –º–æ–∂–µ—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ —Ç—Ä–µ–Ω–¥–∞.\n\nüìä –ò–∑—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –Ω–∏–∂–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–≤–µ—á–µ–π!',
      code: '–î–æ–¥–∂–∏: Open ‚âà Close\n–ú–∞—Ä—É–±–æ–∑—É: Open = Low, Close = High (–±—ã—á–∏–π)\n–•–∞–º–º–µ—Ä: –º–∞–ª–µ–Ω—å–∫–æ–µ —Ç–µ–ª–æ + –¥–ª–∏–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è —Ç–µ–Ω—å',
      explanation: 'üîç –î–æ–¥–∂–∏ - —Ä—ã–Ω–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n\n–ú–∞—Ä—É–±–æ–∑—É - —Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–∫–∞—Ç–æ–≤.\n\n–•–∞–º–º–µ—Ä - –ø—Ä–æ–¥–∞–≤—Ü—ã –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã, –Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –æ—Ç–±–∏–ª–∏ —Ü–µ–Ω—É.\n\nüìå –≠—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞.\n\nüí≠ –ö–∞–∂–¥–∞—è —Å–≤–µ—á–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é!',
      chart: specialPatternsData
    },
    {
      type: 'quiz',
      title: 'üß† –¢–µ—Å—Ç: –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏',
      content: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–∞—Ö',
      question: '–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–ª–æ —è–ø–æ–Ω—Å–∫–æ–π —Å–≤–µ—á–∏?',
      options: [
        '–¢–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã',
        '–¶–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è',
        '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤',
        '–í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤'
      ],
      correctAnswer: 1,
      hint: 'üí° –¢–µ–ª–æ —Å–≤–µ—á–∏ - —ç—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è.\n\nüìù –¢–µ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º.\n\nüéØ –¢–µ–ª–æ = Open –∏ Close, —Ç–µ–Ω–∏ = High –∏ Low.'
    },
    {
      type: 'theory_practice',
      title: 'üíª –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π',
      content: '–ò–∑—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Ö —Ç–∏–ø—ã',
      expectedOutput: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ù–∞–π–¥–µ–Ω–æ: 5 –±—ã—á—å–∏—Ö —Å–≤–µ—á–µ–π, 3 –º–µ–¥–≤–µ–∂—å–∏—Ö —Å–≤–µ—á–∏\n–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: 2 –¥–æ–¥–∂–∏, 1 —Ö–∞–º–º–µ—Ä\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ–¥–∂–∏',
      hint: 'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TradingView –∏–ª–∏ Binance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n\nüìù –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–ª –∏ —Ç–µ–Ω–µ–π.\n\nüéØ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.'
    },
    {
      type: 'intro',
      title: 'üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤',
      content: 'üéØ –í –º–∏—Ä–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n\nüöÄ **TradingView Lightweight Charts** - —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤\nüìà **Recharts** - –º–æ—â–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è React —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤\nüé® **Chart.js** - –ø—Ä–æ—Å—Ç–∞—è –∏ –≥–∏–±–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞\nüìä **D3.js** - —Å–∞–º–∞—è –º–æ—â–Ω–∞—è, –Ω–æ —Å–ª–æ–∂–Ω–∞—è –≤ –æ—Å–≤–æ–µ–Ω–∏–∏\n\nüí° –ö–∞–∂–¥–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á.',
      code: '// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TradingView\nimport { createChart } from "lightweight-charts";\n\nconst chart = createChart(container, {\n  width: 800,\n  height: 400\n});\n\nconst candlestickSeries = chart.addCandlestickSeries();\ncandlestickSeries.setData(data);',
      explanation: 'üîç TradingView - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤\n\nRecharts - –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n\nChart.js - –ø—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\nD3.js - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è\n\nüìù –í—ã–±–æ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞!'
    }
  ], []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const toggleHint = useCallback(() => {
    setShowHint(prev => !prev);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
  const handleLessonCompletion = useCallback(async () => {
    try {
      console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π...');
      
      const success = await completeLesson();
      if (success) {
        setLessonCompleted(true);
        setShowCongratulations(true);
        setIsLessonPassed(true);
        saveLessonProgress(2);
        console.log('–£—Ä–æ–∫ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        
        setTimeout(() => {
          navigate('/crypto-trading-course');
        }, 3000);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', error);
    }
  }, [completeLesson, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
  useEffect(() => {
    const stepAnswer = getStepAnswer(currentStep);
    if (stepAnswer && stepAnswer.answer) {
      setUserAnswer(stepAnswer.answer);
      setIsCorrect(stepAnswer.isCorrect);
    } else {
      setUserAnswer('');
      setIsCorrect(null);
    }
  }, [currentStep, getStepAnswer]);

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞
  useEffect(() => {
    if (!isLessonCompleted) {
      clearLessonProgress();
      console.log('–û—á–∏—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è');
    }
  }, [isLessonCompleted, clearLessonProgress]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (lessonProgress.progress === 0) {
      updateCurrentStep(currentStep, steps.length);
    }
    
    const lessonPassed = checkLessonProgress(2);
    setIsLessonPassed(lessonPassed);
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–∫–∞ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π:', { lessonPassed, currentStep, lessonProgress });
  }, [currentStep, steps.length, lessonProgress.progress, updateCurrentStep]);

  const handleNext = useCallback(() => {
    const currentStepData = steps[currentStep];
    let canProceed = true;
    
    if (currentStepData.type === 'practice' || currentStepData.type === 'quiz' || currentStepData.type === 'theory_practice') {
      if (isCorrect !== true) {
        canProceed = false;
      }
    }
    
    if (currentStep >= steps.length - 1) {
      canProceed = false;
    }
    
    if (canProceed && currentStep < steps.length - 1) {
      updateCurrentStep(currentStep + 1, steps.length);
      setShowHint(false);
    } else if (!canProceed) {
      if (currentStep >= steps.length - 1) {
        alert('üéØ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —É—Ä–æ–∫–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!');
      } else {
        alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
      }
    }
  }, [currentStep, steps, isCorrect, updateCurrentStep]);

  const handlePrevious = useCallback(() => {
    if (currentStep > 0) {
      updateCurrentStep(currentStep - 1, steps.length);
      setShowHint(false);
    }
  }, [currentStep, updateCurrentStep, steps.length]);

  const normalizeAnswer = useCallback((answer) => {
    const normalized = answer
      .trim()
      .replace(/#\s+/g, '# ')
      .replace(/\s+#/g, ' #')
      .replace(/\s+/g, ' ')
      .replace(/["""]/g, '"')
      .replace(/[''']/g, "'")
      .toLowerCase();
    
    console.log('–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:', { original: answer, normalized });
    return normalized;
  }, []);

  const handleAnswerSubmit = useCallback(() => {
    console.log('handleAnswerSubmit –≤—ã–∑–≤–∞–Ω–∞!', {
      currentStep,
      userAnswer,
      stepType: steps[currentStep]?.type
    });
    
    const currentStepData = steps[currentStep];
    let isAnswerCorrect = false;
    
    if (currentStepData.type === 'practice') {
      const normalizedUserAnswer = normalizeAnswer(userAnswer);
      const normalizedCorrectAnswer = normalizeAnswer(currentStepData.answer);
      isAnswerCorrect = normalizedUserAnswer === normalizedCorrectAnswer;
    } else if (currentStepData.type === 'quiz') {
      isAnswerCorrect = parseInt(userAnswer) === currentStepData.correctAnswer;
    }
    
    setIsCorrect(isAnswerCorrect);
    saveStepAnswer(currentStep, userAnswer, isAnswerCorrect);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isAnswerCorrect);
  }, [currentStep, userAnswer, steps, normalizeAnswer, saveStepAnswer]);

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ —è–ø–æ–Ω—Å–∫–∏—Ö —Å–≤–µ—á–µ–π...</p>
          </div>
        </div>
      </div>
    );
  }

  const currentStepData = steps[currentStep];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="max-w-6xl mx-auto p-6"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ */}
      <div className="text-center mb-8">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="inline-block mb-6"
        >
          <div className="text-6xl mb-4">üïØÔ∏è</div>
          <h1 className="text-4xl font-bold text-green-600 mb-4">
            –£—Ä–æ–∫ 2: –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏
          </h1>
        </motion.div>
        
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <div className="w-full max-w-2xl mx-auto mb-6">
          <div className="flex justify-between text-sm text-gray-600 mb-2">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞</span>
            <span>{Math.round(((currentStep + 1) / steps.length) * 100)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-3">
            <motion.div 
              className="bg-gradient-to-r from-green-500 to-emerald-500 h-3 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
          <div className="text-sm text-gray-500 mt-2">
            –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ */}
      <div className="mb-8">
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.3 }}
          className="bg-white rounded-xl shadow-lg overflow-hidden"
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ */}
          <div className="bg-gradient-to-r from-green-500 to-emerald-500 p-6">
            <h2 className="text-2xl font-bold text-white flex items-center">
              <span className="text-3xl mr-3">{currentStepData.icon || 'üìö'}</span>
              {currentStepData.title}
            </h2>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–≥–∞ */}
          <div className="p-6">

            {/* –í–≤–µ–¥–µ–Ω–∏–µ */}
            {currentStepData.type === 'intro' && (
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 shadow-lg">
                <div className="text-lg text-blue-800 space-y-4">
                  {currentStepData.content.split('\n').map((line, index) => (
                    <p key={index} className="leading-relaxed">
                      {line}
                    </p>
                  ))}
                </div>
              </div>
            )}

            {/* –¢–µ–æ—Ä–∏—è */}
            {currentStepData.type === 'theory' && (
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6 shadow-lg">
                <div className="text-lg text-green-800 space-y-4">
                  {currentStepData.content.split('\n').map((line, index) => (
                    <p key={index} className="leading-relaxed">
                      {line}
                    </p>
                  ))}
                </div>
                
                {currentStepData.code && (
                  <div className="mt-6 bg-gradient-to-r from-gray-50 to-slate-50 border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üíª</span>
                      <span className="text-gray-800 font-semibold">–ü—Ä–∏–º–µ—Ä:</span>
                    </div>
                    <div className="bg-gray-900 rounded-lg p-4">
                      <pre className="text-green-400 text-lg font-mono">
                        {currentStepData.code}
                      </pre>
                    </div>
                    {currentStepData.explanation && (
                      <div className="mt-4 bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                        <div className="text-blue-800 text-lg space-y-3">
                          {currentStepData.explanation.split('\n').map((line, index) => (
                            <p key={index} className="leading-relaxed">
                              {line}
                            </p>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ */}
                {currentStepData.chart && (
                  <div className="mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6">
                    <div className="flex items-center mb-4">
                      <span className="text-xl mr-2">üìä</span>
                      <span className="text-blue-800 font-semibold text-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫</span>
                    </div>
                    <div className="flex justify-center">
                      <CandlestickChart 
                        data={currentStepData.chart} 
                        width={600} 
                        height={300}
                        interactive={true}
                      />
                    </div>
                    <div className="mt-4 text-center text-blue-700 text-sm">
                      üí° –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–≤–µ—á–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–µ. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è.
                    </div>
                  </div>
                )}

                {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ */}
                {currentStepData.type === 'code' && (
                  <div className="mt-8 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-6">
                    <div className="flex items-center mb-4">
                      <span className="text-xl mr-2">üöÄ</span>
                      <span className="text-green-800 font-semibold text-lg">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (TradingView)</span>
                    </div>
                    <div className="flex justify-center">
                      <ProfessionalCandlestickChart 
                        data={professionalChartData} 
                        width={800} 
                        height={400}
                        title="Bitcoin/USD - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫"
                      />
                    </div>
                    <div className="mt-4 text-center text-green-700 text-sm">
                      üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ SMA 20 –∏ SMA 50. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!
                    </div>
                  </div>
                )}

                {/* Recharts –≥—Ä–∞—Ñ–∏–∫ */}
                {currentStepData.type === 'theory' && currentStepData.chart && (
                  <div className="mt-8 bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-6">
                    <div className="flex items-center mb-4">
                      <span className="text-xl mr-2">üìà</span>
                      <span className="text-purple-800 font-semibold text-lg">–ì—Ä–∞—Ñ–∏–∫ Recharts</span>
                    </div>
                    <div className="flex justify-center">
                      <RechartsCandlestickChart 
                        data={currentStepData.chart} 
                        width={800} 
                        height={400}
                        title="–¢–∏–ø—ã —Å–≤–µ—á–µ–π - Recharts"
                      />
                    </div>
                    <div className="mt-4 text-center text-purple-700 text-sm">
                      üé® –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Recharts. –ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–≤–µ—á–µ–π!
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
            {currentStepData.type === 'practice' && (
              <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-xl p-6 shadow-lg">
                <h3 className="text-xl font-semibold text-yellow-800 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üéØ</span>
                  –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </h3>
                
                <div className="text-yellow-700 mb-6 text-lg space-y-4">
                  {currentStepData.content.split('\n').map((line, index) => (
                    <p key={index} className="leading-relaxed">
                      {line}
                    </p>
                  ))}
                </div>

                {currentStepData.code && (
                  <div className="bg-gradient-to-r from-gray-50 to-slate-50 border border-gray-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üíª</span>
                      <span className="text-gray-800 font-semibold">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</span>
                    </div>
                    <div className="bg-gray-900 rounded-lg p-4">
                      <pre className="text-green-400 text-lg font-mono">
                        {currentStepData.code}
                      </pre>
                    </div>
                  </div>
                )}

                {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
                {currentStepData.chart && (
                  <div className="mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6">
                    <div className="flex items-center mb-4">
                      <span className="text-xl mr-2">üìä</span>
                      <span className="text-blue-800 font-semibold text-lg">–ò–∑—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫</span>
                    </div>
                    <div className="flex justify-center">
                      <CandlestickChart 
                        data={currentStepData.chart} 
                        width={600} 
                        height={300}
                        interactive={true}
                      />
                    </div>
                    <div className="mt-4 text-center text-blue-700 text-sm">
                      üí° –ù–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–≤–µ—á–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –¥–∞–Ω–Ω—ã–µ. –ù–∞–π–¥–∏—Ç–µ –∑–µ–ª–µ–Ω—ã–µ –∏ –∫—Ä–∞—Å–Ω—ã–µ —Å–≤–µ—á–∏!
                    </div>
                  </div>
                )}

                <div className="space-y-4">
                  <div>
                    <label className="block text-yellow-800 font-semibold mb-2">
                      –í–∞—à –æ—Ç–≤–µ—Ç:
                    </label>
                    <input
                      type="text"
                      value={userAnswer}
                      onChange={(e) => setUserAnswer(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                      className="w-full px-4 py-3 border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent text-lg"
                    />
                  </div>

                  <div className="flex space-x-4">
                    <button
                      onClick={handleAnswerSubmit}
                      className="px-6 py-3 bg-gradient-to-r from-yellow-500 to-orange-500 text-white rounded-lg hover:from-yellow-600 hover:to-orange-600 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                    >
                      <span>‚úÖ</span>
                      <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç</span>
                    </button>
                    <button
                      onClick={toggleHint}
                      className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                    >
                      <span>üí°</span>
                      <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </button>
                  </div>

                  {showHint && currentStepData.hint && (
                    <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                      <div className="flex items-center mb-2">
                        <span className="text-xl mr-2">üí°</span>
                        <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                      </div>
                      <div className="text-blue-800 text-lg space-y-3">
                        {currentStepData.hint.split('\n').map((line, index) => (
                          <p key={index} className="leading-relaxed">
                            {line}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}

                  {isCorrect !== null && (
                    <div className={`p-4 rounded-lg ${isCorrect ? 'bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300' : 'bg-gradient-to-r from-red-100 to-pink-100 border border-red-300'}`}>
                      <p className={`text-lg font-semibold ${isCorrect ? 'text-green-800' : 'text-red-800'}`}>
                        {isCorrect ? 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–µ–ª–µ–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç —Ü–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}
                      </p>
                    </div>
                  )}

                  {currentStepData.type === 'practice' && isCorrect === null && (
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                        <p className="text-yellow-800 text-lg">
                          –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* –¢–µ—Å—Ç */}
            {currentStepData.type === 'quiz' && (
              <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 shadow-lg">
                <h3 className="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üß†</span>
                  –í–æ–ø—Ä–æ—Å
                </h3>
                <p className="text-purple-700 mb-6 text-lg">{currentStepData.question}</p>
                
                <div className="space-y-3">
                  {currentStepData.options.map((option, index) => (
                    <label key={index} className="flex items-center space-x-3 cursor-pointer p-3 rounded-lg hover:bg-purple-100 transition-colors">
                      <input
                        type="radio"
                        name="quiz"
                        value={index}
                        checked={userAnswer === index.toString()}
                        onChange={(e) => {
                          setUserAnswer(e.target.value);
                        }}
                        className="text-purple-600 focus:ring-purple-500"
                      />
                      <span className="text-purple-700 text-lg">{option}</span>
                    </label>
                  ))}
                </div>

                <div className="flex space-x-4 mt-4">
                  <button
                    onClick={handleAnswerSubmit}
                    className="px-6 py-3 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>‚úÖ</span>
                    <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç</span>
                  </button>
                  <button
                    onClick={toggleHint}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üí°</span>
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </button>
                </div>

                {showHint && currentStepData.hint && (
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4 mt-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üí°</span>
                      <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </div>
                    <div className="text-blue-800 text-lg space-y-3">
                      {currentStepData.hint.split('\n').map((line, index) => (
                        <p key={index} className="leading-relaxed">
                          {line}
                        </p>
                      ))}
                    </div>
                  </div>
                )}

                {isCorrect !== null && (
                  <div className={`mt-4 p-4 rounded-lg ${isCorrect ? 'bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300' : 'bg-gradient-to-r from-red-100 to-pink-100 border border-red-300'}`}>
                    <p className={`text-lg font-semibold ${isCorrect ? 'text-green-800' : 'text-red-800'}`}>
                      {isCorrect ? 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–µ–ª–æ —Å–≤–µ—á–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}
                    </p>
                  </div>
                )}

                {currentStepData.type === 'quiz' && isCorrect === null && (
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mt-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                      <p className="text-blue-800 text-lg">
                        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* –¢–µ–æ—Ä–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π */}
            {currentStepData.type === 'theory_practice' && (
              <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-xl p-6 shadow-lg">
                <h3 className="text-xl font-semibold text-emerald-800 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üíª</span>
                  –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
                </h3>
                
                <div className="space-y-6">
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üéØ</span>
                      <span className="text-blue-800 font-semibold">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                    </div>
                    <div className="bg-gray-900 rounded-lg p-4">
                      <pre className="text-green-400 text-lg font-mono">
                        {currentStepData.expectedOutput}
                      </pre>
                    </div>
                  </div>

                  <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üìù</span>
                      <span className="text-yellow-800 font-semibold">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</span>
                    </div>
                    <ol className="text-yellow-700 text-lg space-y-2">
                      <li>1. –û—Ç–∫—Ä–æ–π—Ç–µ TradingView –∏–ª–∏ Binance</li>
                      <li>2. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (BTC, ETH)</li>
                      <li>3. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫</li>
                      <li>4. –ò–∑—É—á–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–≤–µ—á–µ–π</li>
                      <li>5. –ù–∞–π–¥–∏—Ç–µ –¥–æ–¥–∂–∏, —Ö–∞–º–º–µ—Ä—ã, –º–∞—Ä—É–±–æ–∑—É</li>
                      <li>6. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</li>
                    </ol>
                  </div>

                  <div className="flex space-x-4">
                    <button
                      onClick={() => {
                        setIsCorrect(true);
                        saveStepAnswer(currentStep, 'theory_practice_completed', true);
                      }}
                      className="px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-lg hover:from-emerald-600 hover:to-emerald-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                    >
                      <span>‚úÖ</span>
                      <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                    </button>
                    <button
                      onClick={toggleHint}
                      className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                    >
                      <span>üí°</span>
                      <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </button>
                  </div>

                  {showHint && currentStepData.hint && (
                    <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                      <div className="flex items-center mb-2">
                        <span className="text-xl mr-2">üí°</span>
                        <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                      </div>
                      <div className="text-blue-800 text-lg space-y-3">
                        {currentStepData.hint.split('\n').map((line, index) => (
                          <p key={index} className="leading-relaxed">
                            {line}
                          </p>
                        ))}
                      </div>
                    </div>
                  )}

                  {isCorrect === null && (
                    <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-lg p-4">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                        <p className="text-emerald-800 text-lg">
                          –ò–∑—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                        </p>
                      </div>
                    </div>
                  )}

                  {isCorrect === true && (
                    <div className="bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300 rounded-lg p-4">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">üéâ</span>
                        <p className="text-green-800 text-lg font-semibold">
                          –û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </motion.div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <button
          onClick={handlePrevious}
          disabled={currentStep === 0}
          className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${
            currentStep === 0
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-gradient-to-r from-gray-600 to-gray-700 text-white hover:from-gray-700 hover:to-gray-800 shadow-lg'
          }`}
        >
          <span>‚Üê</span>
          <span>–ù–∞–∑–∞–¥</span>
        </button>

        <div className="flex space-x-4">
          <Link
            to="/crypto-trading-course"
            className="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
          >
            <span>üìö</span>
            <span>–ö –∫—É—Ä—Å—É –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞</span>
          </Link>
          
          {lessonCompleted ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg animate-pulse">
              <span>üéâ</span>
              <span>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</span>
            </div>
          ) : isLessonPassed ? (
            <button
              onClick={() => {
                clearLessonProgress();
                setLessonCompleted(false);
                setShowCongratulations(false);
                setIsLessonPassed(false);
                updateCurrentStep(0, steps.length);
                setUserAnswer('');
                setIsCorrect(null);
                setShowHint(false);
                
                try {
                  const completedLessons = JSON.parse(localStorage.getItem('cryptoCompletedLessons') || '[]');
                  const updatedLessons = completedLessons.filter(id => id !== 2);
                  localStorage.setItem('cryptoCompletedLessons', JSON.stringify(updatedLessons));
                  console.log('–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ localStorage –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è');
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –∏–∑ localStorage:', error);
                }
              }}
              className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üîÑ</span>
              <span>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 && isCorrect === true ? (
            <button
              onClick={handleLessonCompletion}
              className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üéâ</span>
              <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg">
              <span>üéØ</span>
              <span>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞</span>
            </div>
          ) : (
            <button
              onClick={handleNext}
              disabled={(() => {
                const currentStepData = steps[currentStep];
                if (currentStepData.type === 'practice' || currentStepData.type === 'quiz' || currentStepData.type === 'theory_practice') {
                  return isCorrect !== true && !isLessonPassed;
                }
                return false;
              })()}
              className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${
                (() => {
                  const currentStepData = steps[currentStep];
                  if (currentStepData.type === 'practice' || currentStepData.type === 'quiz' || currentStepData.type === 'theory_practice') {
                    return (isCorrect !== true && !isLessonPassed)
                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      : 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg';
                  }
                  return 'bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg';
                })()
              }`}
            >
              <span>–î–∞–ª–µ–µ</span>
              <span>‚Üí</span>
            </button>
          )}
        </div>
      </div>
    </motion.div>
  );
}

export default CryptoLesson2; 