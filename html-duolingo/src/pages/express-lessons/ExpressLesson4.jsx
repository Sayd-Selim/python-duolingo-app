import React, { useState, useEffect, useCallback, useMemo } from "react";
import { motion } from "framer-motion";
import { Link, useNavigate } from "react-router-dom";
import { useLessonProgress } from "../../hooks/useLessonProgress";
import CodeHighlight from "../../components/CodeHighlight";
import WarningHighlight from "../../components/WarningHighlight";
import ReminderBlock from "../../components/ReminderBlock";

function ExpressLesson2() {
  const [showHint, setShowHint] = useState(false);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userAnswer, setUserAnswer] = useState("");
  const [additionalTaskAnswers, setAdditionalTaskAnswers] = useState({});
  const [additionalTaskHints, setAdditionalTaskHints] = useState({});
  const [additionalTaskAttempts, setAdditionalTaskAttempts] = useState({});
  const [additionalTaskShowAnswer, setAdditionalTaskShowAnswer] = useState({});
  const [isCorrect, setIsCorrect] = useState(null);
  const [lessonCompleted, setLessonCompleted] = useState(false);
  const [showCongratulations, setShowCongratulations] = useState(false);
  const [isLessonPassed, setIsLessonPassed] = useState(false);
  const [activeCodeTab, setActiveCodeTab] = useState("app.js");
  const navigate = useNavigate();

  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = { userId: "demo_user_123" };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      if (!completedLessons.includes(lessonId)) {
        completedLessons.push(lessonId);
        localStorage.setItem("completedLessons", JSON.stringify(completedLessons));
      }
      console.log("–£—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:", lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", error);
    }
  };

  const checkLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      return completedLessons.includes(lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:", error);
      return false;
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const { currentStep, lessonProgress, updateCurrentStep, saveStepAnswer, getStepAnswer, isLessonCompleted, completeLesson, clearLessonProgress } =
    useLessonProgress(4); // ID –¥–ª—è —É—Ä–æ–∫–∞ 2

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏ —É—Ä–æ–∫–∞
  const steps = useMemo(
    () => [
      {
        type: "intro",
        title: "–£—Ä–æ–∫ 2: –†–æ—É—Ç–∏–Ω–≥ –°–∏—Å—Ç–µ–º–∞ —Ä–æ—É—Ç–æ–≤ üõ£Ô∏è",
        content:
          "–¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã –ø–æ–Ω–∏–º–∞–µ–º –æ—Å–Ω–æ–≤—ã HTTP-—Å–µ—Ä–≤–µ—Ä–æ–≤, –¥–∞–≤–∞–π—Ç–µ –∏–∑—É—á–∏–º —Å–∏—Å—Ç–µ–º—É —Ä–æ—É—Ç–∏–Ω–≥–∞ ‚Äî —Å–µ—Ä–¥—Ü–µ –ª—é–±–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!\n\n–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∫–æ–Ω–µ—á–Ω—ã–º —Ç–æ—á–∫–∞–º (endpoints).\n\nüèóÔ∏è –ú–µ—Ç–∞—Ñ–æ—Ä–∞: –†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –±–æ–ª—å—à–æ–º –∑–¥–∞–Ω–∏–∏. –ö–∞–∂–¥—ã–π URL ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å –∫–æ–º–Ω–∞—Ç—ã, –∞ —Ä–æ—É—Ç ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –∏ —á—Ç–æ —Ç–∞–º –¥–µ–ª–∞—Ç—å.\n\nüéØ –¶–µ–ª—å: –ù–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ—É—Ç–∞–º–∏ –≤ Express.js, –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.",
        motivation: "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! –ë–µ–∑ –Ω–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∞–π—Ç –∏–ª–∏ API.",
      },

      {
        type: "theory",
        title: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–æ—É—Ç–∏–Ω–≥ –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω?",
        content:
          "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º URL-–∞–¥—Ä–µ—Å–∞–º.\n\n–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç, –±—Ä–∞—É–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π URL. –†–æ—É—Ç–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞:\n‚Ä¢ <CodeHighlight>–ú–∞—Ä—à—Ä—É—Ç (Route)</CodeHighlight> ‚Äî —ç—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è HTTP-–º–µ—Ç–æ–¥–∞ –∏ URL-–ø—É—Ç–∏\n‚Ä¢ <CodeHighlight>–û–±—Ä–∞–±–æ—Ç—á–∏–∫ (Handler)</CodeHighlight> ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞\n‚Ä¢ <CodeHighlight>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</CodeHighlight> ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ URL, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è",
        metaphor: [
          "üèóÔ∏è –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –±–æ–ª—å—à–æ–π –æ—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–æ–º–Ω–∞—Ç.",
          "–ö–∞–∂–¥—ã–π URL ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /users ‚Äî –∫–æ–º–Ω–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, /products ‚Äî –∫–æ–º–Ω–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤).",
          "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–¥—ë—Ç –≤ –∫–æ–º–Ω–∞—Ç—É /users, –ø–æ–∫–∞–∂–∏ –µ–º—É —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π¬ª.",
          "–ë–µ–∑ —Ä–æ—É—Ç–∏–Ω–≥–∞ –≤—Å–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –ø–æ–ø–∞–¥–∞–ª–∏ –±—ã –≤ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–æ–º–Ω–∞—Ç—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—É–¥–∞ –æ–Ω–∏ —Ö–æ—Ç—è—Ç –ø–æ–ø–∞—Å—Ç—å!",
        ],
        code: `// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç–∏–Ω–≥ –≤ Express.js

const express = require('express');
const app = express();

// –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!');
});

// –†–æ—É—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', (req, res) => {
  res.send('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/users/:id', (req, res) => {
  res.send(\`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: \${req.params.id}\`);
});

app.listen(3000);`,
        explanation:
          "–†–æ—É—Ç–∏–Ω–≥ –≤ Express.js —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å, Express.js –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.\n\n–ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä–µ–¥ –±–æ–ª–µ–µ –æ–±—â–∏–º–∏.",
        examples: [
          "–ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã —Ä–æ—É—Ç–æ–≤:",
          "1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã:",
          "–ú–∞—Ä—à—Ä—É—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º URL-–ø—É—Ç—ë–º.",
          `app.get('/about', (req, res) => {
  res.send('–û –Ω–∞—Å');
});`,
          "2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã:",
          "–ú–∞—Ä—à—Ä—É—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è.",
          `app.get('/users/:id', (req, res) => {
  const userId = req.params.id;
  res.send(\`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \${userId}\`);
});`,
          "3. –†–æ—É—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:",
          "–ú–∞—Ä—à—Ä—É—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —á–∞—Å—Ç—è–º–∏.",
          `app.get('/users/:userId/posts/:postId', (req, res) => {
  const { userId, postId } = req.params;
  res.send(\`–ü–æ—Å—Ç \${postId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userId}\`);
});`,
        ],
        whatWeLearned: [
          "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è URL-–∑–∞–ø—Ä–æ—Å–æ–≤",
          "–ö–∞–∂–¥—ã–π —Ä–æ—É—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ HTTP-–º–µ—Ç–æ–¥–∞ (GET, POST, PUT, DELETE) –∏ URL-–ø—É—Ç–∏",
          "Express.js –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL",
          "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, :id)",
          "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ req.params",
        ],
      },

      {
        type: "code",
        title: "–°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–æ—É—Ç–∏–Ω–≥–∞",
        content:
          "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ—É—Ç–∏–Ω–≥–∞. –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ—É—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        code: `const express = require('express');
const app = express();

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ API!',
    endpoints: [
      'GET /users - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'GET /users/:id - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID',
      'POST /users - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      'GET /products - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã'
    ]
  });
});

// –†–æ—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', (req, res) => {
  const users = [
    { id: 1, name: '–ê–Ω–Ω–∞', email: 'anna@example.com' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', email: 'boris@example.com' },
    { id: 3, name: '–í–∏–∫—Ç–æ—Ä–∏—è', email: 'victoria@example.com' }
  ];
  res.json(users);
});

app.get('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const users = [
    { id: 1, name: '–ê–Ω–Ω–∞', email: 'anna@example.com' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', email: 'boris@example.com' },
    { id: 3, name: '–í–∏–∫—Ç–æ—Ä–∏—è', email: 'victoria@example.com' }
  ];
  
  const user = users.find(u => u.id === userId);
  
  if (user) {
    res.json(user);
  } else {
    res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

app.post('/users', (req, res) => {
  const { name, email } = req.body;
  
  if (!name || !email) {
    return res.status(400).json({ error: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  const newUser = {
    id: Date.now(),
    name,
    email
  };
  
  res.status(201).json(newUser);
});

// –†–æ—É—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
app.get('/products', (req, res) => {
  const products = [
    { id: 1, name: '–ù–æ—É—Ç–±—É–∫', price: 50000 },
    { id: 2, name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', price: 25000 },
    { id: 3, name: '–ù–∞—É—à–Ω–∏–∫–∏', price: 5000 }
  ];
  res.json(products);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use('*', (req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(\`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
});`,
        metaphor: [
          "üèóÔ∏è –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–ú—ã —Å–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –æ—Ñ–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–º–Ω–∞—Ç—É.",
          "–ö–∞–∂–¥—ã–π —Ä–æ—É—Ç ‚Äî —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ï—Å–ª–∏ –∏–¥—ë—à—å —Å—é–¥–∞, —Ç–æ –¥–µ–ª–∞–π —ç—Ç–æ¬ª.",
          "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (/) ‚Äî —ç—Ç–æ —Ä–µ—Å–µ–ø—à–Ω, –≥–¥–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –∫–∞—Ä—Ç—É –∑–¥–∞–Ω–∏—è.",
          "–ö–æ–º–Ω–∞—Ç—ã /users –∏ /products ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—ã —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.",
        ],
        explanation:
          "–í —ç—Ç–æ–º –∫–æ–¥–µ –º—ã —Å–æ–∑–¥–∞–ª–∏ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–æ—É—Ç–∏–Ω–≥–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n\n1. <CodeHighlight>GET /</CodeHighlight> ‚Äî –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints\n2. <CodeHighlight>GET /users</CodeHighlight> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n3. <CodeHighlight>GET /users/:id</CodeHighlight> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID\n4. <CodeHighlight>POST /users</CodeHighlight> ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n5. <CodeHighlight>GET /products</CodeHighlight> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n6. <CodeHighlight>app.use('*')</CodeHighlight> ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (404 –æ—à–∏–±–∫–∞)",
        whatWeLearned: [
          "–ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ GET –∏ POST —Ä–æ—É—Ç—ã",
          "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL (:id)",
          "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (req.body)",
          "–ö–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON –æ—Ç–≤–µ—Ç—ã",
          "–ö–∞–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã",
          "–ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ 404",
        ],
      },

      {
        type: "practice",
        title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ—É—Ç—ã",
        content:
          "–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å! –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ—É—Ç—ã –≤ –Ω–∞—à API. –ù–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–ó–∞–¥–∞—á–∞: –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥, –¥–æ–±–∞–≤–∏–≤ —Ä–æ—É—Ç—ã –¥–ª—è:\n1. <CodeHighlight>PUT /users/:id</CodeHighlight> ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n2. <CodeHighlight>DELETE /users/:id</CodeHighlight> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n3. <CodeHighlight>GET /products/:id</CodeHighlight> ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
        code: `const express = require('express');
const app = express();

app.use(express.json());

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã...
app.get('/', (req, res) => {
  res.json({ message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

app.get('/users', (req, res) => {
  res.json([
    { id: 1, name: '–ê–Ω–Ω–∞', email: 'anna@example.com' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', email: 'boris@example.com' }
  ]);
});

// TODO: –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–æ—É—Ç—ã –∑–¥–µ—Å—å
// 1. PUT /users/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 2. DELETE /users/:id - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
// 3. GET /products/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID

app.listen(3000);`,
        correctAnswer: `// 1. PUT /users/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.put('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  const { name, email } = req.body;
  
  if (!name || !email) {
    return res.status(400).json({ error: '–ò–º—è –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const updatedUser = { id: userId, name, email };
  res.json(updatedUser);
});

// 2. DELETE /users/:id - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  res.status(204).send();
});

// 3. GET /products/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.get('/products/:id', (req, res) => {
  const productId = parseInt(req.params.id);
  const products = [
    { id: 1, name: '–ù–æ—É—Ç–±—É–∫', price: 50000 },
    { id: 2, name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', price: 25000 }
  ];
  
  const product = products.find(p => p.id === productId);
  
  if (product) {
    res.json(product);
  } else {
    res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});`,
        hint: "–í—Å–ø–æ–º–Ω–∏, —á—Ç–æ:\n- PUT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤\n- DELETE –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤\n- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π req.params.id\n- –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π req.body\n- –°—Ç–∞—Ç—É—Å 204 –æ–∑–Ω–∞—á–∞–µ—Ç 'No Content' (—É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)",
        whatWeLearned: [
          "PUT —Ä–æ—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤",
          "DELETE —Ä–æ—É—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤",
          "–°—Ç–∞—Ç—É—Å 204 (No Content) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏",
          "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ req.params",
          "–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ req.body",
        ],
      },

      {
        type: "theory",
        title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞",
        content:
          "–¢–µ–ø–µ—Ä—å –∏–∑—É—á–∏–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∏ –≥–∏–±–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º:\n‚Ä¢ <CodeHighlight>Router</CodeHighlight> ‚Äî –º–æ–¥—É–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Ä–æ—É—Ç–æ–≤\n‚Ä¢ <CodeHighlight>Middleware</CodeHighlight> ‚Äî –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ <CodeHighlight>Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</CodeHighlight> ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∏—Å–∫\n‚Ä¢ <CodeHighlight>–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã</CodeHighlight> ‚Äî –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
        metaphor: [
          "üèóÔ∏è –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã—Ä–æ—Å–ª–æ –∏ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ñ–∏—Å, –∞ —Ü–µ–ª—ã–π –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–¥–∞–Ω–∏—è–º–∏.",
          "Router ‚Äî —ç—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
          "Middleware ‚Äî —ç—Ç–æ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∑–¥–∞–Ω–∏–µ.",
          "Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî —ç—Ç–æ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        ],
        code: `// –ú–æ–¥—É–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ —Å Router

const express = require('express');
const app = express();

// –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
const userRouter = express.Router();
const productRouter = express.Router();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(\`\${req.method} \${req.url} - \${new Date().toISOString()}\`);
  next();
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization;
  
  if (!token) {
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  req.user = { id: 1, name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' };
  next();
};

// –†–æ—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
userRouter.get('/', (req, res) => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const { page = 1, limit = 10, search } = req.query;
  
  let users = [
    { id: 1, name: '–ê–Ω–Ω–∞', email: 'anna@example.com' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', email: 'boris@example.com' },
    { id: 3, name: '–í–∏–∫—Ç–æ—Ä–∏—è', email: 'victoria@example.com' }
  ];
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
  if (search) {
    users = users.filter(user => 
      user.name.toLowerCase().includes(search.toLowerCase())
    );
  }
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const startIndex = (page - 1) * limit;
  const endIndex = page * limit;
  const paginatedUsers = users.slice(startIndex, endIndex);
  
  res.json({
    users: paginatedUsers,
    pagination: {
      page: parseInt(page),
      limit: parseInt(limit),
      total: users.length,
      pages: Math.ceil(users.length / limit)
    }
  });
});

// –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã
userRouter.get('/:id/posts', (req, res) => {
  const userId = parseInt(req.params.id);
  res.json([
    { id: 1, title: '–ú–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç', userId },
    { id: 2, title: '–í—Ç–æ—Ä–æ–π –ø–æ—Å—Ç', userId }
  ]);
});

userRouter.get('/:id/posts/:postId', (req, res) => {
  const { id: userId, postId } = req.params;
  res.json({
    id: parseInt(postId),
    title: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç',
    userId: parseInt(userId)
  });
});

// –†–æ—É—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
productRouter.use(authMiddleware); // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º —Ä–æ—É—Ç–∞–º —Ç–æ–≤–∞—Ä–æ–≤

productRouter.get('/', (req, res) => {
  const { category, minPrice, maxPrice } = req.query;
  
  let products = [
    { id: 1, name: '–ù–æ—É—Ç–±—É–∫', price: 50000, category: 'electronics' },
    { id: 2, name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', price: 25000, category: 'electronics' },
    { id: 3, name: '–ö–Ω–∏–≥–∞', price: 500, category: 'books' }
  ];
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (category) {
    products = products.filter(p => p.category === category);
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
  if (minPrice) {
    products = products.filter(p => p.price >= parseInt(minPrice));
  }
  
  if (maxPrice) {
    products = products.filter(p => p.price <= parseInt(maxPrice));
  }
  
  res.json(products);
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
app.use('/users', userRouter);
app.use('/products', productRouter);

app.listen(3000);`,
        explanation:
          "–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø–æ–∫–∞–∑–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫:\n\n1. <CodeHighlight>Router</CodeHighlight> ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–æ—É—Ç—ã –≤ –º–æ–¥—É–ª–∏\n2. <CodeHighlight>Middleware</CodeHighlight> ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\n3. <CodeHighlight>Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</CodeHighlight> ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ req.query –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n4. <CodeHighlight>–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã</CodeHighlight> ‚Äî —Å–æ–∑–¥–∞—é—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL\n5. <CodeHighlight>–ü–∞–≥–∏–Ω–∞—Ü–∏—è</CodeHighlight> ‚Äî —Ä–∞–∑–±–∏–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        whatWeLearned: [
          "Router –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥—É–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ä–æ—É—Ç—ã",
          "Middleware –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Ä–æ—É—Ç–æ–≤",
          "Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ req.query",
          "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL",
          "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
          "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        ],
      },

      {
        type: "recap",
        title: "üéâ –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ Express.js –æ—Å–≤–æ–µ–Ω–∞!",
        content:
          "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–∏–ª —Å–∏—Å—Ç–µ–º—É —Ä–æ—É—Ç–∏–Ω–≥–∞ Express.js. –¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n<WarningHighlight>–ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏:</WarningHighlight>\n‚Ä¢ –û—Å–Ω–æ–≤—ã —Ä–æ—É—Ç–∏–Ω–≥–∞ –∏ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ GET, POST, PUT, DELETE –º–∞—Ä—à—Ä—É—Ç–æ–≤\n‚Ä¢ –†–∞–±–æ—Ç—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ URL –∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞\n‚Ä¢ –ú–æ–¥—É–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å Router\n‚Ä¢ Middleware –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n‚Ä¢ Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n‚Ä¢ –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä\n\n<WarningHighlight>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:</WarningHighlight> –£—Ä–æ–∫ 3: Middleware –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        metaphor: [
          "üèóÔ∏è –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–¢—ã –ø–æ—Å—Ç—Ä–æ–∏–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!",
          "–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ —Å —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏, —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞.",
          "–¢–≤–æ—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ –ª—é–±—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Ö –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å.",
        ],
        motivation: "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ API –∏ –≤–µ–±-—Å–∞–π—Ç—ã!",
        whatWeLearned: [
          "–†–æ—É—Ç–∏–Ω–≥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º URL",
          "Express.js –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤",
          "GET, POST, PUT, DELETE ‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏",
          "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL (:id) –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã",
          "req.params —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL",
          "req.body —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞",
          "req.query —Å–æ–¥–µ—Ä–∂–∏—Ç query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
          "Router –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥—É–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Ä–æ—É—Ç—ã",
          "Middleware –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤",
          "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã —Å–æ–∑–¥–∞—é—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL",
          "–ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
          "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–¥—ë–∂–Ω—ã—Ö API",
        ],
        whatNext: "–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –∏–∑—É—á–∏–º Middleware ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!",
        reminders: [
          "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –∫—É—Ä—Å–∞:",
          "Express.js ‚Äî —ç—Ç–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å HTTP-—Å–µ—Ä–≤–µ—Ä–æ–º Node.js",
          "–†–æ—É—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ —Å–µ—Ä–¥—Ü–µ –ª—é–±–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
          "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º",
        ],
        summary: [
          "üéØ <WarningHighlight>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —É—Ä–æ–∫–∞</WarningHighlight>",
          "",
          "üõ£Ô∏è <CodeHighlight>–†–æ—É—Ç–∏–Ω–≥</CodeHighlight> ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º URL.",
          "",
          "üìç <CodeHighlight>–ú–∞—Ä—à—Ä—É—Ç</CodeHighlight> ‚Äî —ç—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è HTTP-–º–µ—Ç–æ–¥–∞ (GET, POST, PUT, DELETE) –∏ URL-–ø—É—Ç–∏.",
          "",
          "üë®‚Äçüíº <CodeHighlight>–û–±—Ä–∞–±–æ—Ç—á–∏–∫</CodeHighlight> ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞.",
          "",
          "üîß <CodeHighlight>Router</CodeHighlight> ‚Äî —ç—Ç–æ –º–æ–¥—É–ª—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã.",
          "",
          "üõ°Ô∏è <CodeHighlight>Middleware</CodeHighlight> ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
          "",
          "üîç <CodeHighlight>Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</CodeHighlight> ‚Äî —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –≤ URL (?page=1&search=test) –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
          "",
          "üìÅ <CodeHighlight>–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã</CodeHighlight> ‚Äî —ç—Ç–æ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ URL (/users/1/posts/2) –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.",
          "",
          "üéâ <WarningHighlight>–ò—Ç–æ–≥</WarningHighlight>: –ú—ã —Å–æ–∑–¥–∞–ª–∏ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!",
        ],
        codeFiles: {
          "app.js": `const express = require('express');
const app = express();

// Middleware
app.use(express.json());

// –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
app.get('/', (req, res) => {
  res.json({ message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

app.get('/users', (req, res) => {
  res.json([
    { id: 1, name: '–ê–Ω–Ω–∞', email: 'anna@example.com' },
    { id: 2, name: '–ë–æ—Ä–∏—Å', email: 'boris@example.com' }
  ]);
});

app.get('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id);
  res.json({ id: userId, name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', email: 'user@example.com' });
});

app.post('/users', (req, res) => {
  const { name, email } = req.body;
  res.status(201).json({ id: Date.now(), name, email });
});

app.listen(3000);`,
          "routes/users.js": `const express = require('express');
const router = express.Router();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
router.use((req, res, next) => {
  console.log(\`User route: \${req.method} \${req.url}\`);
  next();
});

// –†–æ—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/', (req, res) => {
  const { page = 1, limit = 10 } = req.query;
  res.json({ users: [], pagination: { page, limit } });
});

router.get('/:id', (req, res) => {
  const userId = req.params.id;
  res.json({ id: userId, name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' });
});

router.post('/', (req, res) => {
  const { name, email } = req.body;
  res.status(201).json({ id: Date.now(), name, email });
});

router.put('/:id', (req, res) => {
  const userId = req.params.id;
  const { name, email } = req.body;
  res.json({ id: userId, name, email });
});

router.delete('/:id', (req, res) => {
  const userId = req.params.id;
  res.status(204).send();
});

module.exports = router;`
        }
      }
    ],
    [currentStep]
  );

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π isCorrect
  useEffect(() => {
    console.log("=== isCorrect –ò–ó–ú–ï–ù–ò–õ–°–Ø ===");
    console.log("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isCorrect:", isCorrect);
    console.log("–¢–µ–∫—É—â–∏–π —à–∞–≥:", currentStep);
    console.log("userAnswer:", userAnswer);
  }, [isCorrect, currentStep, userAnswer]);

  // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log("=== –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–ï–†–ï–†–ï–ù–î–ï–†–ï–ù ===");
  console.log("currentStep:", currentStep);
  console.log("userAnswer:", userAnswer);
  console.log("isCorrect:", isCorrect);

  const currentStepData = steps[currentStep];

  const saveAnswer = (answer) => {
    saveStepAnswer(currentStep, answer);
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      updateCurrentStep(currentStep + 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setIsCorrect(null);
    } else {
      setLessonCompleted(true);
      setShowCongratulations(true);
      completeLesson();
      saveLessonProgress(4); // ID –¥–ª—è —É—Ä–æ–∫–∞ 2
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      updateCurrentStep(currentStep - 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setIsCorrect(null);
    }
  };

  const parseJSXInText = (text) => {
    if (!text) return [];
    const parts = [];
    let currentIndex = 0;
    while (currentIndex < text.length) {
      const codeOpenTagIndex = text.indexOf("<CodeHighlight>", currentIndex);
      const warningOpenTagIndex = text.indexOf("<WarningHighlight>", currentIndex);
      let openTagIndex = -1;
      let tagType = "";
      let openTagLength = 0;
      let closeTagLength = 0;
      if (codeOpenTagIndex !== -1 && (warningOpenTagIndex === -1 || codeOpenTagIndex < warningOpenTagIndex)) {
        openTagIndex = codeOpenTagIndex;
        tagType = "code";
        openTagLength = 15; // "<CodeHighlight>".length
        closeTagLength = 16; // "</CodeHighlight>".length
      } else if (warningOpenTagIndex !== -1) {
        openTagIndex = warningOpenTagIndex;
        tagType = "warning";
        openTagLength = 18; // "<WarningHighlight>".length
        closeTagLength = 19; // "</WarningHighlight>".length
      }
      if (openTagIndex === -1) {
        parts.push({ type: "text", content: text.slice(currentIndex) });
        break;
      }
      if (openTagIndex > currentIndex) {
        parts.push({ type: "text", content: text.slice(currentIndex, openTagIndex) });
      }
      const closeTagName = tagType === "code" ? "</CodeHighlight>" : "</WarningHighlight>";
      const closeTagIndex = text.indexOf(closeTagName, openTagIndex);
      if (closeTagIndex === -1) {
        parts.push({ type: "text", content: text.slice(currentIndex) });
        break;
      }
      const tagContent = text.slice(openTagIndex + openTagLength, closeTagIndex);
      parts.push({ type: tagType, content: tagContent });
      currentIndex = closeTagIndex + closeTagLength;
    }
    return parts;
  };

  const normalizeAnswer = (answer) => {
    return answer.toLowerCase().trim().replace(/\s+/g, " ");
  };

  const analyzeCodeErrors = (userCode, correctCode) => {
    const userLines = userCode.split("\n").filter(line => line.trim());
    const correctLines = correctCode.split("\n").filter(line => line.trim());
    
    const errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!userCode.includes("app.put") && correctCode.includes("app.put")) {
      errors.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç PUT —Ä–æ—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
    
    if (!userCode.includes("app.delete") && correctCode.includes("app.delete")) {
      errors.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DELETE —Ä–æ—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
    
    if (!userCode.includes("app.get('/products/:id'") && correctCode.includes("app.get('/products/:id'")) {
      errors.push("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GET —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID");
    }
    
    if (!userCode.includes("req.params.id") && correctCode.includes("req.params.id")) {
      errors.push("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è req.params.id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∏–∑ URL");
    }
    
    if (!userCode.includes("req.body") && correctCode.includes("req.body")) {
      errors.push("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è req.body –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞");
    }
    
    return errors;
  };

  const handleCodeSubmit = () => {
    const userCode = userAnswer;
    const correctCode = currentStepData.correctAnswer;
    
    if (!userCode.trim()) {
      setIsCorrect(false);
      return;
    }
    
    const errors = analyzeCodeErrors(userCode, correctCode);
    
    if (errors.length === 0) {
      setIsCorrect(true);
      saveAnswer(userCode);
    } else {
      setIsCorrect(false);
    }
  };

  const handleTextSubmit = () => {
    const normalizedUserAnswer = normalizeAnswer(userAnswer);
    const normalizedCorrectAnswer = normalizeAnswer(currentStepData.correctAnswer);
    
    if (normalizedUserAnswer === normalizedCorrectAnswer) {
      setIsCorrect(true);
      saveAnswer(userAnswer);
    } else {
      setIsCorrect(false);
    }
  };

  const handleSubmit = () => {
    if (currentStepData.type === "code") {
      handleCodeSubmit();
    } else {
      handleTextSubmit();
    }
  };

  const handleAdditionalTaskSubmit = (taskIndex) => {
    const task = currentStepData.additionalTasks[taskIndex];
    const userTaskAnswer = additionalTaskAnswers[taskIndex] || "";
    
    if (!userTaskAnswer.trim()) {
      setAdditionalTaskAttempts(prev => ({ ...prev, [taskIndex]: (prev[taskIndex] || 0) + 1 }));
      return;
    }
    
    const normalizedUserAnswer = normalizeAnswer(userTaskAnswer);
    const normalizedCorrectAnswer = normalizeAnswer(task.correctAnswer);
    
    if (normalizedUserAnswer === normalizedCorrectAnswer) {
      setAdditionalTaskShowAnswer(prev => ({ ...prev, [taskIndex]: true }));
      saveAnswer(userTaskAnswer);
    } else {
      setAdditionalTaskAttempts(prev => ({ ...prev, [taskIndex]: (prev[taskIndex] || 0) + 1 }));
    }
  };

  const handleAdditionalTaskHint = (taskIndex) => {
    setAdditionalTaskHints(prev => ({ ...prev, [taskIndex]: !prev[taskIndex] }));
  };

  const handleAdditionalTaskShowAnswer = (taskIndex) => {
    setAdditionalTaskShowAnswer(prev => ({ ...prev, [taskIndex]: !prev[taskIndex] }));
  };

  const handleQuizSubmit = () => {
    const selectedAnswers = {};
    currentStepData.questions.forEach((question, index) => {
      const answerKey = `question_${index}`;
      selectedAnswers[answerKey] = getStepAnswer(answerKey) || "";
    });
    
    let correctCount = 0;
    currentStepData.questions.forEach((question, index) => {
      const answerKey = `question_${index}`;
      if (selectedAnswers[answerKey] === question.correctAnswer) {
        correctCount++;
      }
    });
    
    const isPassed = correctCount >= currentStepData.questions.length * 0.7;
    setIsCorrect(isPassed);
    
    if (isPassed) {
      saveAnswer(JSON.stringify(selectedAnswers));
    }
  };

  const handleQuizAnswerChange = (questionIndex, answer) => {
    const answerKey = `question_${questionIndex}`;
    saveStepAnswer(answerKey, answer);
  };

  const handleCloseCongratulations = () => {
    setShowCongratulations(false);
    navigate("/express-lessons");
  };

  const handleRestartLesson = () => {
    clearLessonProgress();
    updateCurrentStep(0);
    setShowHint(false);
    setShowAnswer(false);
    setUserAnswer("");
    setIsCorrect(null);
    setLessonCompleted(false);
    setShowCongratulations(false);
    setIsLessonPassed(false);
    setAdditionalTaskAnswers({});
    setAdditionalTaskHints({});
    setAdditionalTaskAttempts({});
    setAdditionalTaskShowAnswer({});
  };

  if (showCongratulations) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full text-center"
        >
          <div className="text-6xl mb-4">üéâ</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-4">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
          <p className="text-gray-600 mb-6">
            –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —É—Ä–æ–∫ –ø–æ —Ä–æ—É—Ç–∏–Ω–≥—É –≤ Express.js!
          </p>
          <div className="space-y-3">
            <button
              onClick={handleCloseCongratulations}
              className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫–∞–º
            </button>
            <button
              onClick={handleRestartLesson}
              className="w-full bg-gray-200 text-gray-800 py-3 px-6 rounded-lg hover:bg-gray-300 transition-colors"
            >
              –ü—Ä–æ–π—Ç–∏ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ
            </button>
          </div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <Link
                to="/express-lessons"
                className="text-gray-600 hover:text-gray-900 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </Link>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">–£—Ä–æ–∫ 2: –†–æ—É—Ç–∏–Ω–≥</h1>
                <p className="text-sm text-gray-500">–°–∏—Å—Ç–µ–º–∞ —Ä–æ—É—Ç–æ–≤ Express.js</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-500">
                –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
              </div>
              <div className="w-32 bg-gray-200 rounded-full h-2">
                <div
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
                ></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Lesson Content */}
          <div className="lg:col-span-2">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              className="bg-white rounded-xl shadow-lg p-6 mb-6"
            >
              {/* Step Title */}
              <div className="mb-6">
                <h2 className="text-2xl font-bold text-gray-900 mb-2">
                  {currentStepData.title}
                </h2>
                {currentStepData.type === "intro" && (
                  <div className="text-sm text-gray-500">
                    –í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É —É—Ä–æ–∫–∞
                  </div>
                )}
              </div>

              {/* Step Content */}
              <div className="prose prose-lg max-w-none mb-6">
                {currentStepData.content && (
                  <div className="text-gray-700 leading-relaxed">
                    {currentStepData.content.split('\n').map((paragraph, index) => (
                      <div key={index} className="mb-4">
                        {parseJSXInText(paragraph).map((part, partIndex) =>
                          part.type === "code" ? (
                            <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                          ) : part.type === "warning" ? (
                            <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                          ) : (
                            <span key={partIndex}>{part.content}</span>
                          )
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Metaphor */}
              {currentStepData.metaphor && (
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-purple-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üèóÔ∏è</span>
                    –ú–µ—Ç–∞—Ñ–æ—Ä–∞
                  </h3>
                  <div className="space-y-3">
                    {currentStepData.metaphor.map((item, index) => (
                      <div key={index} className="text-purple-800">
                        {parseJSXInText(item).map((part, partIndex) =>
                          part.type === "code" ? (
                            <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                          ) : part.type === "warning" ? (
                            <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                          ) : (
                            <span key={partIndex}>{part.content}</span>
                          )
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Reminder Block */}
              {currentStepData.reminders && (
                <ReminderBlock reminders={currentStepData.reminders} />
              )}

              {/* Summary Block */}
              {currentStepData.summary && (
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 shadow-lg">
                  <h3 className="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üéØ</span>
                    –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —É—Ä–æ–∫–∞
                  </h3>
                  <div className="space-y-3">
                    {currentStepData.summary.map((item, index) => (
                      <div key={index} className="text-purple-800 text-lg">
                        {parseJSXInText(item).map((part, partIndex) =>
                          part.type === "code" ? (
                            <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                          ) : part.type === "warning" ? (
                            <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                          ) : (
                            <span key={partIndex}>{part.content}</span>
                          )
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Code Block */}
              {currentStepData.code && (
                <div className="bg-gray-900 rounded-xl p-6 mb-6 overflow-x-auto">
                  <pre className="text-green-400 text-sm">
                    <code>{currentStepData.code}</code>
                  </pre>
                </div>
              )}

              {/* Tabbed Code Files */}
              {currentStepData.codeFiles && (
                <div className="bg-white border border-gray-200 rounded-xl overflow-hidden mb-6">
                  <div className="flex items-center justify-between mb-4 bg-gray-50 px-6 py-3 border-b">
                    <div className="flex space-x-1">
                      {Object.keys(currentStepData.codeFiles).map((fileName) => (
                        <button
                          key={fileName}
                          onClick={() => setActiveCodeTab(fileName)}
                          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                            activeCodeTab === fileName
                              ? "bg-blue-600 text-white"
                              : "text-gray-600 hover:text-gray-900 hover:bg-gray-100"
                          }`}
                        >
                          {fileName}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div className="p-6">
                    <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                      <pre className="text-green-400 text-sm">
                        <code>{currentStepData.codeFiles[activeCodeTab]}</code>
                      </pre>
                    </div>
                  </div>
                </div>
              )}

              {/* Explanation */}
              {currentStepData.explanation && (
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-blue-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üí°</span>
                    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
                  </h3>
                  <div className="text-blue-800 leading-relaxed">
                    {currentStepData.explanation.split('\n').map((paragraph, index) => (
                      <div key={index} className="mb-4">
                        {parseJSXInText(paragraph).map((part, partIndex) =>
                          part.type === "code" ? (
                            <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                          ) : part.type === "warning" ? (
                            <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                          ) : (
                            <span key={partIndex}>{part.content}</span>
                          )
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Examples */}
              {currentStepData.examples && (
                <div className="bg-green-50 border border-green-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-green-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üìö</span>
                    –ü—Ä–∏–º–µ—Ä—ã
                  </h3>
                  <div className="space-y-4">
                    {currentStepData.examples.map((example, index) => (
                      <div key={index} className="text-green-800">
                        {parseJSXInText(example).map((part, partIndex) =>
                          part.type === "code" ? (
                            <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                          ) : part.type === "warning" ? (
                            <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                          ) : (
                            <span key={partIndex}>{part.content}</span>
                          )
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* What We Learned */}
              {currentStepData.whatWeLearned && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-yellow-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üéì</span>
                    –ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏
                  </h3>
                  <ul className="space-y-2">
                    {currentStepData.whatWeLearned.map((item, index) => (
                      <li key={index} className="flex items-start">
                        <span className="text-yellow-600 mr-2">‚Ä¢</span>
                        <span className="text-yellow-800">
                          {parseJSXInText(item).map((part, partIndex) =>
                            part.type === "code" ? (
                              <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                            ) : part.type === "warning" ? (
                              <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                            ) : (
                              <span key={partIndex}>{part.content}</span>
                            )
                          )}
                        </span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* What Next */}
              {currentStepData.whatNext && (
                <div className="bg-indigo-50 border border-indigo-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-indigo-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üöÄ</span>
                    –ß—Ç–æ –¥–∞–ª—å—à–µ
                  </h3>
                  <div className="text-indigo-800 leading-relaxed">
                    {parseJSXInText(currentStepData.whatNext).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </div>
                </div>
              )}

              {/* Motivation */}
              {currentStepData.motivation && (
                <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-xl p-6 mb-6">
                  <h3 className="text-lg font-semibold text-green-800 mb-4 flex items-center">
                    <span className="text-2xl mr-2">üí™</span>
                    –ú–æ—Ç–∏–≤–∞—Ü–∏—è
                  </h3>
                  <div className="text-green-800 leading-relaxed">
                    {parseJSXInText(currentStepData.motivation).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </div>
                </div>
              )}
            </motion.div>

            {/* Practice Section */}
            {currentStepData.type === "practice" && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="bg-white rounded-xl shadow-lg p-6 mb-6"
              >
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üíª</span>
                  –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </h3>
                
                <div className="mb-6">
                  <textarea
                    value={userAnswer}
                    onChange={(e) => setUserAnswer(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å..."
                    className="w-full h-64 p-4 border border-gray-300 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div className="flex space-x-4 mb-4">
                  <button
                    onClick={() => setShowHint(!showHint)}
                    className="px-4 py-2 bg-yellow-100 text-yellow-800 rounded-lg hover:bg-yellow-200 transition-colors"
                  >
                    {showHint ? "–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"}
                  </button>
                  <button
                    onClick={() => setShowAnswer(!showAnswer)}
                    className="px-4 py-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition-colors"
                  >
                    {showAnswer ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç" : "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"}
                  </button>
                </div>

                {showHint && currentStepData.hint && (
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                    <h4 className="font-semibold text-yellow-800 mb-2">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</h4>
                    <div className="text-yellow-800 whitespace-pre-line">
                      {currentStepData.hint}
                    </div>
                  </div>
                )}

                {showAnswer && currentStepData.correctAnswer && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                    <h4 className="font-semibold text-green-800 mb-2">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</h4>
                    <pre className="text-green-800 bg-green-100 p-3 rounded font-mono text-sm overflow-x-auto">
                      {currentStepData.correctAnswer}
                    </pre>
                  </div>
                )}

                <div className="flex space-x-4">
                  <button
                    onClick={handleSubmit}
                    className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥
                  </button>
                </div>

                {isCorrect !== null && (
                  <div className={`mt-4 p-4 rounded-lg ${
                    isCorrect ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                  }`}>
                    <div className={`font-semibold ${
                      isCorrect ? 'text-green-800' : 'text-red-800'
                    }`}>
                      {isCorrect ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}
                    </div>
                    {!isCorrect && (
                      <div className="text-red-700 mt-2">
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–æ—É—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
                      </div>
                    )}
                  </div>
                )}
              </motion.div>
            )}

            {/* Quiz Section */}
            {currentStepData.type === "quiz" && currentStepData.questions && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="bg-white rounded-xl shadow-lg p-6 mb-6"
              >
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üß†</span>
                  –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
                </h3>
                
                <div className="space-y-6">
                  {currentStepData.questions.map((question, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-3">
                        {index + 1}. {question.question}
                      </h4>
                      <div className="space-y-2">
                        {question.options.map((option, optionIndex) => (
                          <label key={optionIndex} className="flex items-center">
                            <input
                              type="radio"
                              name={`question_${index}`}
                              value={option}
                              checked={getStepAnswer(`question_${index}`) === option}
                              onChange={(e) => handleQuizAnswerChange(index, e.target.value)}
                              className="mr-3"
                            />
                            <span className="text-gray-700">{option}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6">
                  <button
                    onClick={handleQuizSubmit}
                    className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
                  </button>
                </div>

                {isCorrect !== null && (
                  <div className={`mt-4 p-4 rounded-lg ${
                    isCorrect ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'
                  }`}>
                    <div className={`font-semibold ${
                      isCorrect ? 'text-green-800' : 'text-red-800'
                    }`}>
                      {isCorrect ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!' : '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'}
                    </div>
                  </div>
                )}
              </motion.div>
            )}

            {/* Additional Practice Section */}
            {currentStepData.type === "additional_practice" && currentStepData.additionalTasks && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="bg-white rounded-xl shadow-lg p-6 mb-6"
              >
                <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <span className="text-2xl mr-2">üîß</span>
                  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
                </h3>
                
                <div className="space-y-6">
                  {currentStepData.additionalTasks.map((task, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <h4 className="font-semibold text-gray-900 mb-3">
                        –ó–∞–¥–∞–Ω–∏–µ {index + 1}: {task.title}
                      </h4>
                      <p className="text-gray-700 mb-4">{task.description}</p>
                      
                      <textarea
                        value={additionalTaskAnswers[index] || ""}
                        onChange={(e) => setAdditionalTaskAnswers(prev => ({
                          ...prev,
                          [index]: e.target.value
                        }))}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
                        className="w-full h-32 p-3 border border-gray-300 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-3"
                      />
                      
                      <div className="flex space-x-3">
                        <button
                          onClick={() => handleAdditionalTaskSubmit(index)}
                          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm"
                        >
                          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                        </button>
                        <button
                          onClick={() => handleAdditionalTaskHint(index)}
                          className="px-4 py-2 bg-yellow-100 text-yellow-800 rounded-lg hover:bg-yellow-200 transition-colors text-sm"
                        >
                          {additionalTaskHints[index] ? "–°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É" : "–ü–æ–¥—Å–∫–∞–∑–∫–∞"}
                        </button>
                        <button
                          onClick={() => handleAdditionalTaskShowAnswer(index)}
                          className="px-4 py-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition-colors text-sm"
                        >
                          {additionalTaskShowAnswer[index] ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç" : "–û—Ç–≤–µ—Ç"}
                        </button>
                      </div>
                      
                      {additionalTaskHints[index] && task.hint && (
                        <div className="mt-3 bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                          <div className="text-yellow-800 text-sm">{task.hint}</div>
                        </div>
                      )}
                      
                      {additionalTaskShowAnswer[index] && task.correctAnswer && (
                        <div className="mt-3 bg-green-50 border border-green-200 rounded-lg p-3">
                          <div className="text-green-800 text-sm font-mono">{task.correctAnswer}</div>
                        </div>
                      )}
                      
                      {additionalTaskAttempts[index] > 0 && (
                        <div className="mt-3 text-sm text-gray-600">
                          –ü–æ–ø—ã—Ç–æ–∫: {additionalTaskAttempts[index]}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </motion.div>
            )}
          </div>

          {/* Right Column - Navigation */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-lg p-6 sticky top-8">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫—É</h3>
              
              <div className="space-y-2 mb-6">
                {steps.map((step, index) => (
                  <button
                    key={index}
                    onClick={() => updateCurrentStep(index)}
                    className={`w-full text-left p-3 rounded-lg transition-colors ${
                      currentStep === index
                        ? "bg-blue-100 text-blue-800 border border-blue-200"
                        : "text-gray-600 hover:bg-gray-50"
                    }`}
                  >
                    <div className="flex items-center">
                      <span className="w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs font-medium mr-3">
                        {index + 1}
                      </span>
                      <span className="text-sm font-medium">{step.title}</span>
                    </div>
                  </button>
                ))}
              </div>

              <div className="space-y-3">
                <button
                  onClick={handlePrevious}
                  disabled={currentStep === 0}
                  className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${
                    currentStep === 0
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-gray-200 text-gray-800 hover:bg-gray-300"
                  }`}
                >
                  ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
                </button>
                
                <button
                  onClick={handleNext}
                  className="w-full py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  {currentStep === steps.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫" : "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Üí"}
                </button>
              </div>

              <div className="mt-6 pt-6 border-t border-gray-200">
                <button
                  onClick={handleRestartLesson}
                  className="w-full py-2 px-4 text-gray-600 hover:text-gray-800 transition-colors text-sm"
                >
                  –ù–∞—á–∞—Ç—å —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ExpressLesson2;
