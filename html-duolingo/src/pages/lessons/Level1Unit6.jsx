import React, { useState, useEffect, useCallback, useMemo } from "react";
import { motion } from "framer-motion";
import { Link, useNavigate } from "react-router-dom";
import { useLessonProgress } from "../../hooks/useLessonProgress";
import { useAuth } from "../../context/AuthContext";

function Level1Unit6() {
  const [showHint, setShowHint] = useState(false);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userAnswer, setUserAnswer] = useState("");
  const [additionalTaskAnswers, setAdditionalTaskAnswers] = useState({});
  const [additionalTaskHints, setAdditionalTaskHints] = useState({});
  const [additionalTaskAttempts, setAdditionalTaskAttempts] = useState({});
  const [additionalTaskShowAnswer, setAdditionalTaskShowAnswer] = useState({});
  const [isCorrect, setIsCorrect] = useState(null);
  const [lessonCompleted, setLessonCompleted] = useState(false);
  const [showCongratulations, setShowCongratulations] = useState(false);
  const [isLessonPassed, setIsLessonPassed] = useState(false);
  const navigate = useNavigate();
  // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // const { user } = useAuth();

  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = { userId: "demo_user_123" };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      if (!completedLessons.includes(lessonId)) {
        completedLessons.push(lessonId);
        localStorage.setItem("completedLessons", JSON.stringify(completedLessons));
      }
      console.log("–£—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:", lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", error);
    }
  };

  const checkLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      return completedLessons.includes(lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:", error);
      return false;
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const { currentStep, lessonProgress, updateCurrentStep, saveStepAnswer, getStepAnswer, isLessonCompleted, completeLesson, clearLessonProgress } =
    useLessonProgress(3); // –ù–æ–≤—ã–π id —É—Ä–æ–∫–∞

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π isCorrect (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è currentStep)
  useEffect(() => {
    console.log("=== isCorrect –ò–ó–ú–ï–ù–ò–õ–°–Ø ===");
    console.log("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isCorrect:", isCorrect);
    console.log("–¢–µ–∫—É—â–∏–π —à–∞–≥:", currentStep);
    console.log("userAnswer:", userAnswer);
  }, [isCorrect, currentStep, userAnswer]);

  // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log("=== –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–ï–†–ï–†–ï–ù–î–ï–†–ï–ù ===");
  console.log("currentStep:", currentStep);
  console.log("userAnswer:", userAnswer);
  console.log("isCorrect:", isCorrect);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏ —É—Ä–æ–∫–∞
  const steps = useMemo(
    () => [
      {
        type: "intro",
        title: "–¶–∏–∫–ª—ã for –∏ while ‚Äî –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π üîÑ",
        content:
          "–í –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è –º–Ω–æ–≥–æ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –≤ Python –µ—Å—Ç—å —Ü–∏–∫–ª—ã: for –∏ while.\n\n–û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ.\n\n\uD83D\uDCDD –ü—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å print(1), print(2), print(3)... –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏–∫–ª!",
        code: `for i in range(1, 4):\n    print(i)\n# –í—ã–≤–µ–¥–µ—Ç: 1, 2, 3`,
        motivation: "–¶–∏–∫–ª—ã ‚Äî —ç—Ç–æ –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ –∑–∞–≤–æ–¥–µ. –û–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç —Ä–∞–±–æ—Ç—É, —ç–∫–æ–Ω–æ–º—è —Ç–≤–æ—ë –≤—Ä–µ–º—è –∏ —Å–∏–ª—ã!"
      },
      {
        type: "theory",
        title: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–∏–∫–ª—ã for –∏ while?",
        content:
          "for ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Å–ø–∏—Å–æ–∫, —Å—Ç—Ä–æ–∫–∞, range).\nwhile ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞, –ø–æ–∫–∞ —É—Å–ª–æ–≤–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ.\n\n–¶–∏–∫–ª—ã –ø–æ–º–æ–≥–∞—é—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏ –¥–µ–ª–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏.",
        metaphor: [
          "\uD83D\uDEA7 –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–¶–∏–∫–ª—ã ‚Äî —ç—Ç–æ –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è —Å–±–æ—Ä–∫–∏.",
          "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ –∏–≥—Ä—É—à–µ–∫: –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—Ä—É—á–Ω—É—é —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–∂–¥—É—é –∏–≥—Ä—É—à–∫—É, —Ç—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –∫–æ–Ω–≤–µ–π–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–≥—Ä—É—à–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É.",
          "–ü—Ä–æ–≥—Ä–∞–º–º–∞, –∫–∞–∫ –∏ –∫–æ–Ω–≤–µ–π–µ—Ä, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!"
        ],
        code: `# –¶–∏–∫–ª for\nfor i in range(5):\n    print(f'–®–∞–≥ {i}')\n\n# –¶–∏–∫–ª while\ncount = 0\nwhile count < 3:\n    print(f'–°—á—ë—Ç—á–∏–∫: {count}')\n    count += 1`,
        explanation:
          "–¶–∏–∫–ª for –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ range(5) (0, 1, 2, 3, 4).\n–¶–∏–∫–ª while –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∫–∞ count < 3, –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç count –Ω–∞ 1 –≤ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.\n\n–û—Ç—Å—Ç—É–ø—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, –∫–∞–∫–æ–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ.",
        examples: [
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ü–∏–∫–ª for?:",
          "–ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞: for item in list: ...",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –¶–∏–∫–ª for –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–π–¥—ë—Ç –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
          `users = ['–ê–Ω–Ω–∞', '–ë–æ—Ä–∏—Å', '–í–∏–∫—Ç–æ—Ä']\nfor user in users:\n    print(f'–ü—Ä–∏–≤–µ—Ç, {user}!')`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è range()?:",
          "–°—á—ë—Ç—á–∏–∫ –æ—Ç 1 –¥–æ N:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10. range(1, 11) —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1, 2, 3, ..., 10.",
          `for i in range(1, 11):\n    print(i)  # –í—ã–≤–µ–¥–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ü–∏–∫–ª while?:",
          "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–¥—ë—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. while –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π.",
          `password = ''\nwhile password != 'secret':\n    password = input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ')`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è enumerate()?:",
          "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. enumerate() –¥–∞—ë—Ç –∏ –∏–Ω–¥–µ–∫—Å, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞.",
          `tasks = ['–£—á—ë–±–∞', '–°–ø–æ—Ä—Ç', '–û—Ç–¥—ã—Ö']\nfor i, task in enumerate(tasks, 1):\n    print(f'{i}. {task}')`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è break?:",
          "–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, –¥–µ–ª—è—â–µ–µ—Å—è –Ω–∞ 7, –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è. break –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.",
          `for i in range(1, 100):\n    if i % 7 == 0:\n        print(f'–ù–∞–π–¥–µ–Ω–æ: {i}')\n        break`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è continue?:",
          "–ü—Ä–æ–ø—É—Å–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10, –∫—Ä–æ–º–µ —á—ë—Ç–Ω—ã—Ö. continue –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é.",
          `for i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)  # –í—ã–≤–µ–¥–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ü–∏–∫–ª —Å —É—Å–ª–æ–≤–∏–µ–º?:",
          "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 7. –¶–∏–∫–ª for –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —á–∏—Å–ª–∞–º, –∞ if –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ.",
          `for i in range(1, 101):\n    if i % 7 == 0:\n        print(i)`,
          "–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–æ–∫–µ?:",
          "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤:",
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ '–∞' –≤ —Å–ª–æ–≤–µ. –¶–∏–∫–ª for –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É —Å—Ç—Ä–æ–∫–∏.",
          `word = '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'\ncount = 0\nfor letter in word:\n    if letter == '–∞':\n        count += 1\nprint(f'–ë—É–∫–≤ "–∞": {count}')`,
        ],
        exampleAnalysis: {
          title: "–†–∞–∑–±–æ—Ä –ø—Ä–∏–º–µ—Ä–∞: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
          content: `\uD83D\uDD0E –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –í –Ω—ë–º –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞:\n\n1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n2. –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ.\n\n–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:\n\nnew_users = ['–ê–Ω–Ω–∞', '–ë–æ—Ä–∏—Å', '–í–∏–∫—Ç–æ—Ä']\nfor user in new_users:\n    print(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ {user}')\n    \nconfirmations = 0\nwhile confirmations < len(new_users):\n    print('–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...')\n    confirmations += 1\n\n–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ:\n- –¶–∏–∫–ª for –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n- –¶–∏–∫–ª while –∂–¥—ë—Ç, –ø–æ–∫–∞ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ.\n\n\uD83D\uDCA1 –ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è?\n- –í —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Ç–æ–≤–∞—Ä—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç.–¥.\n- –¶–∏–∫–ª—ã –¥–µ–ª–∞—é—Ç –∫–æ–¥ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.`
        },
        motivation: "–° –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–æ–≤ —Ç–≤–æ–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –º–æ—â–Ω–µ–µ –∏ —É–º–Ω–µ–µ! –û–Ω–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–≥—Ä–æ–º–Ω—ã–µ –æ–±—ä—ë–º—ã –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
      },
      {
        type: "practice",
        title: "–ü—Ä–∞–∫—Ç–∏–∫–∞: —Ü–∏–∫–ª—ã for –∏ while",
        content:
          "\uD83D\uDCDD –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for, –∞ –∑–∞—Ç–µ–º —Å—á–∏—Ç–∞–µ—Ç –æ—Ç 10 –¥–æ 1, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while.",
        code: `# –¶–∏–∫–ª for –æ—Ç 1 –¥–æ 10\nfor i in range(1, 11):\n    print(i)\n\n# –¶–∏–∫–ª while –æ—Ç 10 –¥–æ 1\ncount = 10\nwhile count >= 1:\n    print(count)\n    count -= 1`,
        task: "–í—ã–≤–µ–¥–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 —á–µ—Ä–µ–∑ for, –∑–∞—Ç–µ–º –æ—Ç 10 –¥–æ 1 —á–µ—Ä–µ–∑ while.",
        answer: `# –¶–∏–∫–ª for –æ—Ç 1 –¥–æ 10\nfor i in range(1, 11):\n    print(i)\n\n# –¶–∏–∫–ª while –æ—Ç 10 –¥–æ 1\ncount = 10\nwhile count >= 1:\n    print(count)\n    count -= 1`,
        hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(1, 11) –¥–ª—è for, –∏ while —Å count -= 1. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –æ—Ç—Å—Ç—É–ø—ã!",
        errorExample: {
          code: `for i in range(10):\nprint(i)`,
          explanation: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ç—Å—Ç—É–ø—ã! –ö–æ–¥ –≤ —Ü–∏–∫–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–¥–≤–∏–Ω—É—Ç –≤–ø—Ä–∞–≤–æ."
        },
        motivation: "–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ü–∏–∫–ª—ã! –ù–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è: –∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ."
      },
      {
        type: "additional_practice",
        title: "\uD83D\uDCDD –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Ü–∏–∫–ª—ã",
        difficulty: "easy",
        content: "\uD83C\uDF4E –õ–µ–≥–∫–∏–µ –∑–∞–¥–∞—á–∏:",
        tasks: [
          {
            task: "–í—ã–≤–µ–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `for i in range(1, 6):\n    print(i)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(1, 6) –∏ print()"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ –≤—Å–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 10, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `for i in range(2, 11, 2):\n    print(i)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(2, 11, 2) –¥–ª—è —à–∞–≥–∞ 2"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ —á–∏—Å–ª–∞ –æ—Ç 5 –¥–æ 1, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while",
            answer: `count = 5\nwhile count >= 1:\n    print(count)\n    count -= 1`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π while —Å count -= 1"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ –≤—Å–µ –±—É–∫–≤—ã —Å–ª–æ–≤–∞ 'Python', –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `word = 'Python'\nfor letter in word:\n    print(letter)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª for –ø–æ —Å—Ç—Ä–æ–∫–µ"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 5, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `sum = 0\nfor i in range(1, 6):\n    sum += i\nprint(sum)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é sum –∏ += –≤ —Ü–∏–∫–ª–µ"
          }
        ]
      },
      {
        type: "additional_practice",
        title: "\uD83D\uDCDD –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Ü–∏–∫–ª—ã",
        difficulty: "medium",
        content: "\uD83D\uDD25 –°—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        tasks: [
          {
            task: "–ù–∞–π–¥–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `sum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(1, 101) –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π —Å—É–º–º—É"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 20, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `for i in range(1, 21):\n    if i % 3 == 0:\n        print(i)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π if —Å % 3 == 0 –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞"
          },
          {
            task: "–ù–∞–π–¥–∏ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 5, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while",
            answer: `n = 5\nfactorial = 1\nwhile n > 0:\n    factorial *= n\n    n -= 1\nprint(factorial)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π while —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º n"
          },
          {
            task: "–í—ã–≤–µ–¥–∏ —Ç–∞–±–ª–∏—Ü—É —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 5 (–æ—Ç 1 –¥–æ 10), –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `for i in range(1, 11):\n    print(f'5 x {i} = {5 * i}')`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π f-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
          },
          {
            task: "–ù–∞–π–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ '–∞' –≤ —Å–ª–æ–≤–µ '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
            answer: `word = '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'\ncount = 0\nfor letter in word:\n    if letter == '–∞':\n        count += 1\nprint(count)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –ø–æ —Å—Ç—Ä–æ–∫–µ –∏ if –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞"
          }
        ]
      },
      {
        type: "additional_practice",
        title: "\uD83D\uDCDD –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: —Ü–∏–∫–ª—ã",
        difficulty: "hard",
        content: "\uD83D\uDCAA –°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:",
        tasks: [
                      {
              task: "–ù–∞–π–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 50, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3 –∏ –Ω–∞ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
              answer: `for num in range(1, 51):\n    if num % 3 == 0 and num % 5 == 0:\n        print(num)`,
              hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª for —Å —É—Å–ª–æ–≤–∏–µ–º if –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º and"
            },
            {
              task: "–í—ã–≤–µ–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 10 –¥–æ 1 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
              answer: `for i in range(10, 0, -1):\n    print(i)`,
              hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(10, 0, -1) –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞"
            },
          {
            task: "–ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å –¥–≤—É—Ö —á–∏—Å–µ–ª, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while",
            answer: `a = 48\nb = 18\nwhile b:\n    a, b = b, a % b\nprint(a)`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π –∞–ª–≥–æ—Ä–∏—Ç–º –ï–≤–∫–ª–∏–¥–∞ —Å while"
          },
          {
            task: "–ü—Ä–æ–≤–µ—Ä—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while",
            answer: `num = 12321\noriginal = num\nreverse = 0\nwhile num > 0:\n    reverse = reverse * 10 + num % 10\n    num //= 10\nif original == reverse:\n    print('–ü–∞–ª–∏–Ω–¥—Ä–æ–º')\nelse:\n    print('–ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º')`,
            hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π while –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —á–∏—Å–ª–∞"
          },
                      {
              task: "–ù–∞–π–¥–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 2 –¥–æ 100, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª for",
              answer: `sum_even = 0\nfor i in range(2, 101, 2):\n    sum_even += i\nprint(sum_even)`,
              hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π range(2, 101, 2) –¥–ª—è —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π —Å—É–º–º—É"
            }
        ]
      },
      {
        type: "theory_practice",
        title: "\uD83D\uDCDD –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: —Ü–∏–∫–ª—ã",
        content:
          "\uD83D\uDCBB –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:\n1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ N\n2. –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ N, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3 –∏–ª–∏ –Ω–∞ 5\n3. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n4. –í—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª",
        code: `N = int(input('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ N: '))\ncount = 0\nsum_numbers = 0\n\nfor i in range(1, N + 1):\n    if i % 3 == 0 or i % 5 == 0:\n        print(i)\n        count += 1\n        sum_numbers += i\n\nprint(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}')\nprint(f'–°—É–º–º–∞: {sum_numbers}')`,
        expectedOutput: "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ N: 10\n3\n5\n6\n9\n10\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5\n–°—É–º–º–∞: 33",
        hint: "\uD83D\uDCA1 –ò—Å–ø–æ–ª—å–∑—É–π for, if —Å or, –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞."
      },
      {
        type: "quiz",
        title: "–ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è \uD83E\uDDE0",
        question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?\\n\\nfor i in range(3):\\n    print(i)\\n    if i == 1:\\n        break",
        options: ["0, 1, 2", "0, 1", "1, 2", "–û—à–∏–±–∫–∞"],
        correct: 1,
        hint: "\uD83D\uDCA1 –¶–∏–∫–ª –≤—ã–≤–æ–¥–∏—Ç 0, –∑–∞—Ç–µ–º 1, –∏ break –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
      },
    ],
    []
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
  const currentStepData = useMemo(() => steps[currentStep], [steps, currentStep]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
  const handleLessonCompletion = useCallback(async () => {
    if (isLessonCompleted) return;

    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
      const success = await completeLesson();
      if (success) {
        setLessonCompleted(true);
        setShowCongratulations(true);
        setIsLessonPassed(true);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ localStorage
        saveLessonProgress(3);
        console.log("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          navigate("/python-course");
        }, 3000);
      } else {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    }
  }, [completeLesson, isLessonCompleted, navigate, user?.userId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
  useEffect(() => {
    const stepAnswer = getStepAnswer(currentStep);
    if (stepAnswer && stepAnswer.answer) {
      setUserAnswer(stepAnswer.answer);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
      setIsCorrect(stepAnswer.isCorrect);
    } else {
      setUserAnswer("");
      setIsCorrect(null);
    }
  }, [currentStep, getStepAnswer, steps]);

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞ (–µ—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
  useEffect(() => {
    if (!isLessonCompleted) {
      clearLessonProgress();
      console.log("–û—á–∏—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è");
    }
  }, [isLessonCompleted, clearLessonProgress]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (lessonProgress.progress === 0) {
      updateCurrentStep(currentStep, steps.length);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É—Ä–æ–∫
    const lessonPassed = checkLessonProgress(3);
    setIsLessonPassed(lessonPassed);
  }, [currentStep, steps.length, lessonProgress.progress, updateCurrentStep]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ localStorage
  const saveAnswer = (answer) => {
    saveStepAnswer(currentStep, answer);
  };

  const handleNext = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    const currentStepData = steps[currentStep];
    let canProceed = true;

    if (currentStepData.type === "practice") {
      // –î–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "quiz") {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "theory_practice") {
      // –î–ª—è —Ç–µ–æ—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "additional_practice") {
      // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ 5 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const completedTasks = currentStepData.tasks.filter((_, index) => 
        additionalTaskAnswers[`${index}_correct`] === true
      );
      if (completedTasks.length < 5) {
        canProceed = false;
      }
    }

    // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
    if (currentStep >= steps.length - 1) {
      canProceed = false;
    }

    if (canProceed && currentStep < steps.length - 1) {
      updateCurrentStep(currentStep + 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setAdditionalTaskAnswers({});
      setAdditionalTaskHints({});
      setAdditionalTaskAttempts({});
      setAdditionalTaskShowAnswer({});
      setIsCorrect(null);
    } else if (!canProceed) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (currentStep >= steps.length - 1) {
        alert("üéØ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —É—Ä–æ–∫–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!");
      } else if (currentStepData.type === "additional_practice") {
        const completedTasks = currentStepData.tasks.filter((_, index) => 
          additionalTaskAnswers[`${index}_correct`] === true
        );
        alert(`‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 5 –∑–∞–¥–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks.length}/5`);
      } else {
        alert("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!");
      }
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      updateCurrentStep(currentStep - 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setAdditionalTaskAnswers({});
      setAdditionalTaskHints({});
      setAdditionalTaskAttempts({});
      setAdditionalTaskShowAnswer({});
      setIsCorrect(null);
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleTextChange = useCallback((e) => {
    setUserAnswer(e.target.value);
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ
  const handleQuizAnswerChange = useCallback((e) => {
    console.log("=== –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í –¢–ï–°–¢–ï ===");
    console.log("e.target.value:", e.target.value);
    console.log("typeof e.target.value:", typeof e.target.value);
    setUserAnswer(e.target.value);
    console.log("setUserAnswer –≤—ã–∑–≤–∞–Ω —Å:", e.target.value);
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const toggleHint = useCallback(() => {
    setShowHint((prev) => !prev);
  }, []);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
  const normalizeAnswer = (answer) => {
    return answer
      .trim()
      .replace(/\s+/g, "") // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/["""]/g, '"') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏
      .replace(/[''']/g, "'") // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      .toLowerCase();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ
  const analyzeCodeErrors = (userCode, correctCode) => {
    const userLines = userCode.trim().split('\n').filter(line => line.trim());
    const correctLines = correctCode.trim().split('\n').filter(line => line.trim());
    
    const errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if (userLines.length < correctLines.length) {
      errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –≤—Å–µ ${correctLines.length} —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!userCode.includes('print')) {
      errors.push('–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é print() –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const operators = ['+', '-', '*', '/', '//', '%', '**'];
    const missingOperators = operators.filter(op => correctCode.includes(op) && !userCode.includes(op));
    if (missingOperators.length > 0) {
      if (missingOperators.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä ${missingOperators[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${missingOperators.join(', ')}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    const variablePattern = /([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([^#\n]+)/g;
    const correctVars = {};
    const userVars = {};
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    let match;
    while ((match = variablePattern.exec(correctCode)) !== null) {
      const varName = match[1].trim();
      const varValue = match[2].trim();
      correctVars[varName] = varValue;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    variablePattern.lastIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    while ((match = variablePattern.exec(userCode)) !== null) {
      const varName = match[1].trim();
      const varValue = match[2].trim();
      userVars[varName] = varValue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const missingVars = Object.keys(correctVars).filter(varName => !userVars[varName]);
    if (missingVars.length > 0) {
      errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${missingVars[0]}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    Object.keys(correctVars).forEach(varName => {
      if (userVars[varName] && userVars[varName] !== correctVars[varName]) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${varName} - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á–∏—Å–ª–æ ${correctVars[varName]}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const comparisonOps = ['==', '!=', '>', '<', '>=', '<='];
    const missingComparison = comparisonOps.filter(op => correctCode.includes(op) && !userCode.includes(op));
    if (missingComparison.length > 0) {
      if (missingComparison.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${missingComparison[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${missingComparison.join(', ')}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if (userCode.includes('==') && !userCode.includes('print')) {
      errors.push('–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –≤—ã–≤–æ–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ print()');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const logicalOps = ['and', 'or', 'not'];
    const missingLogical = logicalOps.filter(op => correctCode.includes(op) && !userCode.includes(op));
    if (missingLogical.length > 0) {
      if (missingLogical.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä ${missingLogical[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${missingLogical.join(', ')}`);
      }
    }
    
    return errors;
  };

  const handleAnswerSubmit = useCallback(() => {
    console.log("=== –ù–ê–ß–ê–õ–û handleAnswerSubmit ===");
    console.log("currentStep:", currentStep);
    console.log("userAnswer:", userAnswer);
    console.log("typeof userAnswer:", typeof userAnswer);

    const currentStepData = steps[currentStep];
    console.log("currentStepData:", currentStepData);
    console.log("currentStepData.type:", currentStepData.type);

    let isAnswerCorrect = false;

    if (currentStepData.type === "practice") {
      const normalizedUserAnswer = normalizeAnswer(userAnswer);
      const normalizedCorrectAnswer = normalizeAnswer(currentStepData.answer);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const isExactMatch = normalizedUserAnswer === normalizedCorrectAnswer;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
      const hasInput = normalizedUserAnswer.includes("input");
      const hasPrint = normalizedUserAnswer.includes("print");
      const hasInt = normalizedUserAnswer.includes("int");
      const hasFString = normalizedUserAnswer.includes('f"') || normalizedUserAnswer.includes("f'");
      const hasQuotes = normalizedUserAnswer.includes('"') || normalizedUserAnswer.includes("'");

      if (isExactMatch) {
        setIsCorrect(true);
        isAnswerCorrect = true;
      } else {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        const errors = analyzeCodeErrors(userAnswer, currentStepData.answer);
        if (errors.length > 0) {
          setIsCorrect({ type: "error", errors });
        } else {
          setIsCorrect("almost");
        }
        isAnswerCorrect = false;
      }
    } else if (currentStepData.type === "quiz") {
      console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–°–¢–ê ===");
      console.log("userAnswer:", userAnswer);
      console.log("currentStepData.correct:", currentStepData.correct);
      console.log("typeof userAnswer:", typeof userAnswer);
      console.log("typeof currentStepData.correct:", typeof currentStepData.correct);

      // –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const userAnswerStr = userAnswer.toString();
      const correctAnswerStr = currentStepData.correct.toString();

      console.log("userAnswerStr:", userAnswerStr);
      console.log("correctAnswerStr:", correctAnswerStr);

      isAnswerCorrect = userAnswerStr === correctAnswerStr;
      console.log("isAnswerCorrect:", isAnswerCorrect);

      setIsCorrect(isAnswerCorrect);
      console.log("setIsCorrect –≤—ã–∑–≤–∞–Ω —Å:", isAnswerCorrect);
    } else if (currentStepData.type === "additional_practice") {
      // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
      const normalizedUserAnswer = normalizeAnswer(userAnswer);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
      let foundCorrectAnswer = false;
      for (const task of currentStepData.tasks) {
        const normalizedCorrectAnswer = normalizeAnswer(task.answer);
        if (normalizedUserAnswer === normalizedCorrectAnswer) {
          foundCorrectAnswer = true;
          break;
        }
      }
      
      setIsCorrect(foundCorrectAnswer);
      isAnswerCorrect = foundCorrectAnswer;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    console.log("=== –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê ===");
    console.log("currentStep:", currentStep);
    console.log("userAnswer:", userAnswer);
    console.log("isAnswerCorrect:", isAnswerCorrect);

    saveStepAnswer(currentStep, userAnswer, isAnswerCorrect);
    console.log("=== –ö–û–ù–ï–¶ handleAnswerSubmit ===");
  }, [currentStep, steps, userAnswer, normalizeAnswer, saveStepAnswer]);
  
    return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="max-w-4xl mx-auto p-6 mb-5">
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º */}
      {showCongratulations && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="bg-white rounded-2xl p-8 max-w-md mx-4 text-center shadow-2xl"
          >
            <div className="text-6xl mb-4 animate-bounce">üéâ</div>
            <h2 className="text-2xl font-bold text-gray-800 mb-4">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
            <p className="text-gray-600 mb-6">–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Ä–æ–∫ "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –í—ã–≤–æ–¥ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"!</p>
            <div className="bg-green-50 rounded-lg p-4 mb-6">
              <p className="text-green-800 font-medium mb-2">üéØ –í—ã –∏–∑—É—á–∏–ª–∏:</p>
              <ul className="text-green-700 text-sm space-y-1">
                <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö</li>
                <li>‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ print() –∏ input()</li>
                <li>‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö</li>
                <li>‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫</li>
              </ul>
            </div>
            <p className="text-gray-500 text-sm">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
            <div className="mt-4">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <motion.div className="bg-green-500 h-2 rounded-full" initial={{ width: 0 }} animate={{ width: "100%" }} transition={{ duration: 3 }} />
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}


      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <div className="flex items-center space-x-2">
            <span className="text-sm font-medium text-gray-600">üìö –£—Ä–æ–∫ 6: –¶–∏–∫–ª—ã for –∏ while</span>
            {isLessonPassed && <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">‚úÖ –ü—Ä–æ–π–¥–µ–Ω</span>}
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-sm font-medium text-gray-600">üìç {currentStep + 1} –∏–∑ {steps.length}</span>
            <span className="text-sm font-medium text-green-600">{Math.round(((currentStep + 1) / steps.length) * 100)}%</span>
          </div>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <motion.div
            className="bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-xl shadow-xl p-8 mb-8 border border-gray-100">
        <motion.h1
          key={currentStep}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-3xl font-bold text-gray-800 mb-6 text-center"
        >
          {currentStepData.title}
        </motion.h1>

        <motion.div key={`content-${currentStep}`} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} className="space-y-6">
          {/* –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {currentStepData.content && (
            <div className="text-gray-700 leading-relaxed text-lg">
              {currentStepData.content.split("\n").map((line, index) => (
                <p key={index} className="mb-3">{line}</p>
              ))}
            </div>
          )}

          {/* –ú–µ—Ç–∞—Ñ–æ—Ä–∞ */}
          {currentStepData.metaphor && (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-300 rounded-xl p-6 shadow-lg mb-6">
              <div className="flex items-center mb-4">
                <span className="text-2xl mr-3">üé≠</span>
                <span className="text-purple-800 font-bold text-xl">–ú–µ—Ç–∞—Ñ–æ—Ä–∞</span>
              </div>
              <div className="space-y-3">
                {currentStepData.metaphor.map((line, i) => (
                  <p key={i} className="text-purple-700 text-lg">{line}</p>
                ))}
              </div>
            </div>
          )}

          {/* –ö–æ–¥ */}
          {currentStepData.code && currentStepData.type !== "theory_practice" && (
            <div className="bg-gradient-to-r from-gray-900 to-gray-800 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <span className="text-green-400 font-medium flex items-center">üêç Python</span>
                <button
                  onClick={() => navigator.clipboard.writeText(currentStepData.code)}
                  className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2"
                >
                  <span>üìã</span>
                  <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                </button>
              </div>
              <pre className="text-green-400 overflow-x-auto text-lg select-none pointer-events-none">
                <code>{currentStepData.code}</code>
              </pre>
            </div>
          )}

          {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ */}
          {currentStepData.explanation && currentStepData.type !== "theory_practice" && (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-400 p-6 rounded-xl">
              <div className="flex items-center mb-2">
                <span className="text-2xl mr-2">üí°</span>
                <span className="text-blue-800 font-semibold">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ</span>
              </div>
              <div className="text-blue-800 text-lg">
                {currentStepData.explanation.split("\n").map((line, index) => (
                  <p key={index} className="mb-3">{line}</p>
                ))}
              </div>
            </div>
          )}

          {/* –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ */}
          {currentStepData.errorExample && (
            <div className="bg-gradient-to-r from-red-50 to-pink-50 border-l-4 border-red-400 p-4 rounded-xl mb-4">
              <div className="flex items-center mb-2">
                <span className="text-xl mr-2">‚ö†Ô∏è</span>
                <span className="text-red-800 font-semibold">–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤:</span>
              </div>
              <div className="text-red-800 text-lg">
                <pre className="bg-gray-900 rounded-lg p-3 text-red-300 text-sm mb-2 overflow-x-auto">{currentStepData.errorExample.code}</pre>
                <div>{currentStepData.errorExample.explanation}</div>
              </div>
            </div>
          )}

          {/* –ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä) */}
          {currentStepData.examples && (
            <div className="space-y-8 mb-4">
              <div className="flex items-center mb-2">
                <span className="text-xl mr-2">üõ†Ô∏è</span>
                <span className="text-green-800 font-semibold text-lg">–†–∞–∑–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</span>
              </div>
              {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–±–æ—Ä —Ä–µ–∑—é–º–µ */}
              {(() => {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                const groups = [];
                let currentGroup = null;
                let currentType = null;
                const typeRegex = /–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è (.+)\?:/i;
                const resumeBlocks = [];

                let inResume = false;
                let currentResume = [];
                currentStepData.examples.forEach((ex, i) => {
                  // –ù–∞—á–∞–ª–æ —Ä–µ–∑—é–º–µ
                  if (ex.trim().startsWith("–†–µ–∑—é–º–∏—Ä—É—è:") || ex.trim().startsWith("–†–µ–∑—é–º–∏—Ä—É—è:")) {
                    if (currentResume.length > 0) {
                      resumeBlocks.push([...currentResume]);
                      currentResume = [];
                    }
                    inResume = true;
                    currentResume.push(ex);
                    return;
                  }
                  // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                  const match = ex.match(typeRegex);
                  if (match) {
                    if (inResume && currentResume.length > 0) {
                      resumeBlocks.push([...currentResume]);
                      currentResume = [];
                      inResume = false;
                    }
                    if (currentGroup) groups.push(currentGroup);
                    currentType = match[1].trim();
                    currentGroup = {
                      type: currentType,
                      items: [
                        {
                          type: "header",
                          content: ex,
                        },
                      ],
                    };
                    return;
                  }
                  // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∑—é–º–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å
                  if (inResume) {
                    currentResume.push(ex);
                    return;
                  }
                  // –û–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                  if (currentGroup) {
                    currentGroup.items.push({ type: "item", content: ex });
                  }
                });
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                if (inResume && currentResume.length > 0) {
                  resumeBlocks.push([...currentResume]);
                }
                if (currentGroup) groups.push(currentGroup);
                // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä—É–ø–ø—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                return (
                  <>
                    {groups.map((group, idx) => (
                      <div
                        key={idx}
                        className="bg-gradient-to-r from-gray-50 to-gray-100 border-2 border-green-300 rounded-2xl shadow-lg p-6 space-y-4 animate-fade-in"
                      >
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-2">üîπ</span>
                          <span className="text-green-900 font-bold text-xl">{group.type}</span>
                        </div>
                        <div className="space-y-4">
                          {group.items.map((item, i) => {
                            const ex = item.content;
                            // –ë–ª–æ–∫: –ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è ... (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
                            if (item.type === "header") {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-yellow-100 to-yellow-50 border-l-4 border-yellow-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">üì¶</span>
                                  <span className="text-yellow-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –û—à–∏–±–∫–∞
                            if (ex.trim().startsWith("‚ö†Ô∏è") || ex.trim().startsWith("‚ùå")) {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-red-100 to-pink-50 border-l-4 border-red-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">‚ö†Ô∏è</span>
                                  <span className="text-red-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                            if (ex.trim().startsWith("‚úÖ")) {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-green-100 to-emerald-50 border-l-4 border-green-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">‚úÖ</span>
                                  <span className="text-green-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –ü—Ä–∏–º–µ—Ä (–∫–æ–¥)
                            const isCode =
                              ex.trim().match(/^[a-zA-Z_][a-zA-Z0-9_ ]* ?=|print\(|total ?=|score ?=|item[12] ?=|result ?=|^#|^\d+\./) ||
                              ex.trim() === "score + 10";
                            if (isCode) {
                              return (
                                <pre
                                  key={i}
                                  className="bg-gray-900 rounded-xl p-3 text-green-300 text-sm mb-2 overflow-x-auto border border-gray-700 animate-fade-in"
                                >
                                  {ex}
                                </pre>
                              );
                            }
                            
                            // –ë–ª–æ–∫: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                            return (
                              <div
                                key={i}
                                className="bg-gradient-to-r from-blue-50 to-blue-100 border-l-4 border-blue-400 shadow rounded-xl p-4 text-blue-900 animate-fade-in"
                              >
                                {ex}
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ))}
                    {/* –†–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏ */}
                    {resumeBlocks.length > 0 && (
                      <div className="space-y-6 mt-16">
                        {resumeBlocks.map((resumeArr, i) => (
                          <div key={i} className="bg-white border border-gray-200 shadow rounded-2xl p-6 flex items-start space-x-4 animate-fade-in">
                            <span className="text-3xl mt-1 text-blue-400">üìå</span>
                            <div className="space-y-2 w-full">
                              {resumeArr.map((ex, j) =>
                                j === 0 ? (
                                  <div key={j} className="text-lg font-semibold text-blue-800 mb-1">
                                    {ex.replace(/–†–µ–∑—é–º–∏—Ä—É—è:/, "–†–µ–∑—é–º–∏—Ä—É—è:")}
                                  </div>
                                ) : (
                                  <div key={j} className="text-base text-gray-800 leading-relaxed">
                                    {ex}
                                  </div>
                                )
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </>
                );
              })()}
            </div>
          )}

          {/* –ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö */}
          {/* {currentStepData.examples && (
            <div className="mt-4 text-green-900 text-base bg-green-50 border-l-4 border-green-400 rounded p-3">
              <span className="font-semibold">–í–∞–∂–Ω–æ:</span> –≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä,{" "}
              <span className="font-mono">int</span>). –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –¥–ª—è —á–∏—Å–µ–ª ‚Äî{" "}
              <span className="font-mono">int</span> –∏–ª–∏ <span className="font-mono">float</span>, –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ‚Äî <span className="font-mono">str</span>, –¥–ª—è
              –æ—Ç–≤–µ—Ç–æ–≤ "–¥–∞/–Ω–µ—Ç" ‚Äî <span className="font-mono">bool</span>. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏!
            </div>
          )} */}

          {/* –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          {currentStepData.type === "practice" && (
            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-yellow-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üéØ</span>
                –ó–∞–¥–∞–Ω–∏–µ
              </h3>
              <p className="text-yellow-700 mb-4 text-lg">{currentStepData.task}</p>

              <div className="space-y-4">
                <textarea
                  value={userAnswer}
                  onChange={handleTextChange}
                  placeholder="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å..."
                  className="w-full h-60 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent text-lg font-mono resize-none"
                  spellCheck="false"
                />

                <div className="flex space-x-4">
                  <button
                    onClick={handleAnswerSubmit}
                    className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>‚úÖ</span>
                    <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</span>
                  </button>
                  <button
                    onClick={toggleHint}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üí°</span>
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </button>
                </div>

                {showHint && (
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üí°</span>
                      <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </div>
                    <div className="text-blue-800 text-lg">
                      {currentStepData.hint.split("\n").map((line, index) => (
                        <p key={index} className="mb-3">
                          {line}
                        </p>
                      ))}
                    </div>
                  </div>
                )}

                {isCorrect !== null && (
                  <div
                    className={`p-4 rounded-lg ${
                      isCorrect === true
                        ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                        : isCorrect === "almost"
                        ? "bg-gradient-to-r from-yellow-100 to-orange-100 border border-yellow-300"
                        : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                    }`}
                  >
                    {isCorrect === true ? (
                      <p className="text-green-800 text-lg font-semibold">
                        üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
                      </p>
                    ) : isCorrect === "almost" ? (
                      <p className="text-yellow-800 text-lg font-semibold">
                        ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø–æ—á—Ç–∏ –≤–µ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤.
                      </p>
                    ) : isCorrect.type === "error" ? (
                      <div className="text-red-800">
                        <p className="text-lg font-semibold mb-3">‚ùå –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∫–æ–¥:</p>
                        <ul className="space-y-2">
                          {isCorrect.errors.map((error, index) => (
                            <li key={index} className="flex items-start space-x-2">
                              <span className="text-red-600 mt-1">‚Ä¢</span>
                              <span className="text-base">{error}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    ) : (
                      <p className="text-red-800 text-lg font-semibold">
                        ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
                      </p>
                    )}
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è */}
                {currentStepData.type === "practice" && isCorrect === null && (
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                      <p className="text-blue-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
          {currentStepData.type === "additional_practice" && (
            <div className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-indigo-800 flex items-center">
                  {currentStepData.title}
                </h3>
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium text-indigo-700">
                    –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true).length}/5
                  </span>
                  <div className="w-16 h-2 bg-indigo-200 rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-gradient-to-r from-green-500 to-green-600 transition-all duration-300"
                      style={{ 
                        width: `${(currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true).length / 5) * 100}%` 
                      }}
                    />
                  </div>
                </div>
              </div>
              <p className="text-indigo-700 mb-6 text-lg">{currentStepData.content}</p>

              <div className="space-y-6">
                {currentStepData.tasks.map((task, index) => (
                  <div key={index} className="bg-white border border-indigo-200 rounded-lg p-4 shadow-md">
                    <h4 className="text-lg font-semibold text-indigo-800 mb-3">
                      –ó–∞–¥–∞—á–∞ {index + 1}:
                    </h4>
                    <p className="text-gray-700 mb-4 text-lg">{task.task}</p>
                    
                                         <div className="space-y-3">
                       <textarea
                         value={additionalTaskAnswers[index] || ""}
                         onChange={(e) => {
                           setAdditionalTaskAnswers(prev => ({
                             ...prev,
                             [index]: e.target.value
                           }));
                         }}
                         placeholder="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å..."
                         className="w-full h-40 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-base font-mono resize-none"
                         spellCheck="false"
                       />

                       <div className="flex space-x-3">
                         <button
                           onClick={() => {
                             const answer = additionalTaskAnswers[index] || "";
                             const normalizedUserAnswer = normalizeAnswer(answer);
                             const normalizedCorrectAnswer = normalizeAnswer(task.answer);
                             const isCorrect = normalizedUserAnswer === normalizedCorrectAnswer;
                             
                             // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                             if (!isCorrect) {
                               const currentAttempts = additionalTaskAttempts[index] || 0;
                               const newAttempts = currentAttempts + 1;
                               setAdditionalTaskAttempts(prev => ({
                                 ...prev,
                                 [index]: newAttempts
                               }));
                             }
                             
                             let result;
                             if (isCorrect) {
                               result = true;
                             } else {
                               const errors = analyzeCodeErrors(answer, task.answer);
                               result = { type: "error", errors };
                             }
                             
                             // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
                             setAdditionalTaskAnswers(prev => ({
                               ...prev,
                               [`${index}_correct`]: result
                             }));
                           }}
                           disabled={!additionalTaskAnswers[index] || additionalTaskAnswers[index].trim() === ""}
                           className={`px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-md text-sm ${
                             additionalTaskAnswers[index] && additionalTaskAnswers[index].trim() !== ""
                               ? "bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:from-indigo-600 hover:to-indigo-700"
                               : "bg-gray-300 text-gray-500 cursor-not-allowed"
                           }`}
                         >
                           <span>‚úÖ</span>
                           <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</span>
                         </button>
                         <button
                           onClick={() => {
                             setAdditionalTaskHints(prev => ({
                               ...prev,
                               [index]: !prev[index]
                             }));
                           }}
                           className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-md text-sm"
                         >
                           <span>üí°</span>
                           <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                         </button>
                         <button
                           onClick={() => {
                             setAdditionalTaskShowAnswer(prev => ({
                               ...prev,
                               [index]: !prev[index]
                             }));
                           }}
                           disabled={additionalTaskAnswers[`${index}_correct`] !== true && (additionalTaskAttempts[index] || 0) < 5}
                           className={`px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-md text-sm ${
                             additionalTaskAnswers[`${index}_correct`] === true || (additionalTaskAttempts[index] || 0) >= 5
                               ? "bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:from-purple-600 hover:to-purple-700"
                               : "bg-gray-300 text-gray-500 cursor-not-allowed"
                           }`}
                         >
                           <span>üéØ</span>
                           <span>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç</span>
                           {additionalTaskAnswers[`${index}_correct`] !== true && (additionalTaskAttempts[index] || 0) < 5 && (
                             <span className="text-xs">({additionalTaskAttempts[index] || 0}/5)</span>
                           )}
                         </button>
                       </div>

                                             {additionalTaskHints[index] && (
                         <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-3">
                           <div className="flex items-center mb-2">
                             <span className="text-lg mr-2">üí°</span>
                             <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                           </div>
                           <div className="text-blue-800 text-base">
                             {task.hint}
                           </div>
                         </div>
                       )}

                                             {additionalTaskAnswers[`${index}_correct`] !== undefined && (
                         <div
                           className={`p-3 rounded-lg ${
                             additionalTaskAnswers[`${index}_correct`] === true
                               ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                               : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                           }`}
                         >
                           {additionalTaskAnswers[`${index}_correct`] === true ? (
                             <p className="text-green-800 text-base font-semibold">
                               üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!
                             </p>
                           ) : additionalTaskAnswers[`${index}_correct`].type === "error" ? (
                             <div className="text-red-800">
                               <p className="text-base font-semibold mb-2">‚ùå –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∫–æ–¥:</p>
                               <ul className="space-y-1">
                                 {additionalTaskAnswers[`${index}_correct`].errors.map((error, errorIndex) => (
                                   <li key={errorIndex} className="flex items-start space-x-2">
                                     <span className="text-red-600 mt-1">‚Ä¢</span>
                                     <span className="text-sm">{error}</span>
                                   </li>
                                 ))}
                               </ul>
                             </div>
                           ) : (
                             <p className="text-red-800 text-base font-semibold">
                               ‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
                             </p>
                           )}
                         </div>
                       )}

                       {/* –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç */}
                       {additionalTaskShowAnswer[index] && (
                         <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-3">
                           <div className="flex items-center mb-2">
                             <span className="text-lg mr-2">üéØ</span>
                             <span className="text-purple-800 font-semibold">–û—Ç–≤–µ—Ç:</span>
                           </div>
                           <div className="bg-gradient-to-r from-gray-900 to-gray-800 rounded-lg p-4 shadow-lg">
                             <div className="flex items-center mb-2">
                               <span className="text-green-400 font-medium text-sm">üêç Python</span>
                             </div>
                             <pre className="text-green-400 overflow-x-auto text-sm select-none pointer-events-none">
                               <code>{task.answer}</code>
                             </pre>
                           </div>
                         </div>
                       )}
                    </div>
                  </div>
                ))}
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á */}
              {(() => {
                const completedTasks = currentStepData.tasks.filter((_, index) => 
                  additionalTaskAnswers[`${index}_correct`] === true
                );
                const totalTasks = currentStepData.tasks.length;
                
                if (completedTasks.length === 0) {
                  return (
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                        <p className="text-blue-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 5 –∑–∞–¥–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É</p>
                      </div>
                    </div>
                  );
                } else if (completedTasks.length < totalTasks) {
                  return (
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">üéØ</span>
                        <p className="text-yellow-800 text-lg">–û—Ç–ª–∏—á–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {completedTasks.length} –∏–∑ {totalTasks} –∑–∞–¥–∞—á. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!</p>
                      </div>
                    </div>
                  );
                } else {
                  return (
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">üéâ</span>
                        <p className="text-green-800 text-lg font-semibold">–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.</p>
                      </div>
                    </div>
                  );
                }
              })()}
            </div>
          )}

          {/* –¢–µ–æ—Ä–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π */}
          {currentStepData.type === "theory_practice" && (
            <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-emerald-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üíª</span>
                –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
              </h3>

              <div className="space-y-6">
                {/* –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üéØ</span>
                    <span className="text-blue-800 font-semibold">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                  </div>
                  <div className="bg-gray-900 rounded-lg p-4">
                    <pre className="text-green-400 text-lg font-mono">{currentStepData.expectedOutput}</pre>
                  </div>
                </div>

                {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
                <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üìù</span>
                    <span className="text-yellow-800 font-semibold">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</span>
                  </div>
                  <ol className="text-yellow-700 text-lg space-y-2">
                    <li>1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ (PyCharm, VS Code, IDLE –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π)</li>
                    <li>2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py</li>
                    <li>3. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é</li>
                    <li>4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
                    <li>5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</li>
                    <li>6. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</li>
                  </ol>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ */}
                <div className="flex space-x-4">
                  <button
                    onClick={() => {
                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                      setIsCorrect(true);
                      saveStepAnswer(currentStep, "theory_practice_completed", true);
                    }}
                    className="px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-lg hover:from-emerald-600 hover:to-emerald-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>‚úÖ</span>
                    <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                  </button>
                  <button
                    onClick={toggleHint}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üí°</span>
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </button>
                  <button
                    onClick={() => setShowAnswer((prev) => !prev)}
                    className="px-6 py-3 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üéØ</span>
                    <span>{showAnswer ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç" : "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"}</span>
                  </button>
                </div>

                {/* –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç */}
                {showAnswer && (
                  <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üéØ</span>
                      <span className="text-purple-800 font-semibold">–†–µ—à–µ–Ω–∏–µ:</span>
                    </div>
                    <div className="bg-gradient-to-r from-gray-900 to-gray-800 rounded-xl p-6 shadow-lg">
                      <div className="flex items-center justify-between mb-4">
                        <span className="text-green-400 font-medium flex items-center">üêç Python</span>
                        <button
                          onClick={() => navigator.clipboard.writeText(currentStepData.code)}
                          className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2"
                        >
                          <span>üìã</span>
                          <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>
                      </div>
                      <pre className="text-green-400 overflow-x-auto text-lg">
                        <code>{currentStepData.code}</code>
                      </pre>
                    </div>
                    {currentStepData.explanation && (
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-400 p-4 rounded-xl mt-4">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-2">üí°</span>
                          <span className="text-blue-800 font-semibold">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ</span>
                        </div>
                        <div className="text-blue-800 text-lg">
                          {currentStepData.explanation.split("\n").map((line, index) => (
                            <p key={index} className="mb-3">{line}</p>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {showHint && currentStepData.hint && (
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üí°</span>
                      <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </div>
                    <div className="text-blue-800 text-lg">
                      {currentStepData.hint.split("\n").map((line, index) => (
                        <p key={index} className="mb-3">{line}</p>
                      ))}
                    </div>
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ */}
                {isCorrect === null && (
                  <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                      <p className="text-emerald-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–≤–æ–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–æ–¥–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</p>
                    </div>
                  </div>
                )}

                {isCorrect === true && (
                  <div className="bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">üéâ</span>
                      <p className="text-green-800 text-lg font-semibold">–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –¢–µ—Å—Ç */}
          {currentStepData.type === "quiz" && (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üß†</span>
                –í–æ–ø—Ä–æ—Å
              </h3>
              <p className="text-purple-700 mb-6 text-lg">{currentStepData.question}</p>

              <div className="space-y-3">
                {currentStepData.options.map((option, index) => (
                  <label key={index} className="flex items-center space-x-3 cursor-pointer p-3 rounded-lg hover:bg-purple-100 transition-colors">
                    <input
                      type="radio"
                      name="quiz"
                      value={index}
                      checked={userAnswer === index.toString()}
                      onChange={handleQuizAnswerChange}
                      className="text-purple-600 focus:ring-purple-500"
                    />
                    <span className="text-purple-700 text-lg">{option}</span>
                  </label>
                ))}
              </div>

              <div className="flex space-x-4 mt-4">
                <button
                  onClick={() => {
                    console.log('=== –ö–ù–û–ü–ö–ê "–ü–†–û–í–ï–†–ò–¢–¨ –û–¢–í–ï–¢" –ù–ê–ñ–ê–¢–ê ===');
                    console.log("userAnswer –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º:", userAnswer);
                    console.log("typeof userAnswer:", typeof userAnswer);
                    console.log("disabled:", !userAnswer);
                    handleAnswerSubmit();
                  }}
                  disabled={!userAnswer}
                  className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-lg ${
                    userAnswer
                      ? "bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:from-purple-600 hover:to-purple-700"
                      : "bg-gray-300 text-gray-500 cursor-not-allowed"
                  }`}
                >
                  <span>‚úÖ</span>
                  <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç</span>
                </button>
                <button
                  onClick={toggleHint}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                >
                  <span>üí°</span>
                  <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                </button>
              </div>

              {showHint && currentStepData.hint && (
                <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4 mt-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üí°</span>
                    <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </div>
                  <div className="text-blue-800 text-lg">
                    {currentStepData.hint.split("\n").map((line, index) => (
                      <p key={index} className="mb-3">{line}</p>
                    ))}
                  </div>
                </div>
              )}

              {isCorrect !== null && (
                <div
                  className={`mt-4 p-4 rounded-lg ${
                    isCorrect
                      ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                      : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                  }`}
                >
                  <p className={`text-lg font-semibold ${isCorrect ? "text-green-800" : "text-red-800"}`}>
                    {isCorrect
                      ? "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! input() –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
                      : "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
                  </p>
                </div>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å */}
              {currentStepData.type === "quiz" && isCorrect === null && (
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mt-4">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                    <p className="text-blue-800 text-lg">
                      {userAnswer ? "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É" : "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ"}
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </motion.div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <button
          onClick={handlePrevious}
          disabled={currentStep === 0}
          className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${
            currentStep === 0
              ? "bg-gray-300 text-gray-500 cursor-not-allowed"
              : "bg-gradient-to-r from-gray-600 to-gray-700 text-white hover:from-gray-700 hover:to-gray-800 shadow-lg"
          }`}
        >
          <span>‚Üê</span>
          <span>–ù–∞–∑–∞–¥</span>
        </button>

        <div className="flex space-x-4">
          <Link
            to="/python-course"
            className="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
          >
            <span>üìö</span>
            <span>–ö Python –∫—É—Ä—Å—É</span>
          </Link>

          {lessonCompleted ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg animate-pulse">
              <span>üéâ</span>
              <span>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</span>
            </div>
          ) : isLessonPassed ? (
            <button
              onClick={() => {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                clearLessonProgress();
                setLessonCompleted(false);
                setShowCongratulations(false);
                setIsLessonPassed(false);
                updateCurrentStep(0, steps.length);
                setUserAnswer("");
                setIsCorrect(null);
                setShowHint(false);

                // –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏–∑ localStorage –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                try {
                  const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
                  const updatedLessons = completedLessons.filter((id) => id !== 3);
                  localStorage.setItem("completedLessons", JSON.stringify(updatedLessons));
                  console.log("–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ localStorage –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è");
                } catch (error) {
                  console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –∏–∑ localStorage:", error);
                }
              }}
              className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üîÑ</span>
              <span>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 && isCorrect === true ? (
            <button
              onClick={handleLessonCompletion}
              className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üéâ</span>
              <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg">
              <span>üéØ</span>
              <span>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞</span>
            </div>
          ) : (
            <button
              onClick={handleNext}
              disabled={(() => {
                const currentStepData = steps[currentStep];
                if (currentStepData.type === "practice" || currentStepData.type === "quiz" || currentStepData.type === "theory_practice") {
                  // –ï—Å–ª–∏ —É—Ä–æ–∫ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                  return isCorrect !== true && !isLessonPassed;
                } else if (currentStepData.type === "additional_practice") {
                  // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ 5 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                  const completedTasks = currentStepData.tasks.filter((_, index) => 
                    additionalTaskAnswers[`${index}_correct`] === true
                  );
                  return completedTasks.length < 5;
                }
                return false;
              })()}
              className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${(() => {
                const currentStepData = steps[currentStep];
                if (currentStepData.type === "practice" || currentStepData.type === "quiz" || currentStepData.type === "theory_practice") {
                  return isCorrect !== true && !isLessonPassed
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                    : "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
                } else if (currentStepData.type === "additional_practice") {
                  const completedTasks = currentStepData.tasks.filter((_, index) => 
                    additionalTaskAnswers[`${index}_correct`] === true
                  );
                  return completedTasks.length < 5
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                    : "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
                }
                return "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
              })()}`}
            >
              <span>–î–∞–ª–µ–µ</span>
              <span>‚Üí</span>
            </button>
          )}
        </div>
      </div>

      {/* –ú–æ—Ç–∏–≤–∞—Ü–∏—è */}
      {currentStepData.motivation && (
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border-l-4 border-yellow-400 p-4 rounded-xl mt-8">
          <div className="flex items-center mb-2">
            <span className="text-xl mr-2">üí™</span>
            <span className="text-yellow-800 font-semibold">–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</span>
          </div>
          <div className="text-yellow-800 text-lg">{currentStepData.motivation}</div>
        </div>
      )}

   
    </motion.div>
    );
}

export default Level1Unit6; 
