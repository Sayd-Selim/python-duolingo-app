import React, { useState, useEffect, useCallback, useMemo } from "react";
import { motion } from "framer-motion";
import { Link, useNavigate } from "react-router-dom";
import { useLessonProgress } from "../../../hooks/useLessonProgress";
import CodeHighlight from "../../../components/CodeHighlight";
import WarningHighlight from "../../../components/WarningHighlight";
import ReminderBlock from "../../../components/ReminderBlock";

function ExpressLesson3() {
  const [showHint, setShowHint] = useState(false);
  const [showAnswer, setShowAnswer] = useState(false);
  const [userAnswer, setUserAnswer] = useState("");
  const [additionalTaskAnswers, setAdditionalTaskAnswers] = useState({});
  const [additionalTaskHints, setAdditionalTaskHints] = useState({});
  const [additionalTaskAttempts, setAdditionalTaskAttempts] = useState({});
  const [additionalTaskShowAnswer, setAdditionalTaskShowAnswer] = useState({});
  const [isCorrect, setIsCorrect] = useState(null);
  const [lessonCompleted, setLessonCompleted] = useState(false);
  const [showCongratulations, setShowCongratulations] = useState(false);
  const [isLessonPassed, setIsLessonPassed] = useState(false);
  const [activeCodeTab, setActiveCodeTab] = useState("MyExpress.js");
  const navigate = useNavigate();
  // –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  // const { user } = useAuth();

  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const user = { userId: "demo_user_123" };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      if (!completedLessons.includes(lessonId)) {
        completedLessons.push(lessonId);
        localStorage.setItem("completedLessons", JSON.stringify(completedLessons));
      }
      console.log("–£—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage:", lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:", error);
    }
  };

  const checkLessonProgress = (lessonId) => {
    try {
      const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
      return completedLessons.includes(lessonId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ localStorage:", error);
      return false;
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const { currentStep, lessonProgress, updateCurrentStep, saveStepAnswer, getStepAnswer, isLessonCompleted, completeLesson, clearLessonProgress } =
    useLessonProgress(3); // –ù–æ–≤—ã–π id —É—Ä–æ–∫–∞

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π isCorrect (–ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è currentStep)
  useEffect(() => {
    console.log("=== isCorrect –ò–ó–ú–ï–ù–ò–õ–°–Ø ===");
    console.log("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isCorrect:", isCorrect);
    console.log("–¢–µ–∫—É—â–∏–π —à–∞–≥:", currentStep);
    console.log("userAnswer:", userAnswer);
  }, [isCorrect, currentStep, userAnswer]);

  // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  console.log("=== –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–ï–†–ï–†–ï–ù–î–ï–†–ï–ù ===");
  console.log("currentStep:", currentStep);
  console.log("userAnswer:", userAnswer);
  console.log("isCorrect:", isCorrect);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —à–∞–≥–∏ —É—Ä–æ–∫–∞
  const steps = useMemo(
    () => [
      {
        type: "code_files",
        title: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Äî app.get('/rooms/:id') üîç",
        content:
          "–ö–ª–∏–µ–Ω—Ç—ã –∑–∞—Å–µ–ª—è—é—Ç—Å—è, –∏–∑—É—á–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—Å—ë –∏–¥—ë—Ç –æ—Ç–ª–∏—á–Ω–æ. –ù–æ –≤–æ—Ç –æ–¥–∏–Ω –∏–∑ –≥–æ—Å—Ç–µ–π –ø–æ–¥–æ—à—ë–ª –∫ —Å—Ç–æ–π–∫–µ –∏ —Å–∫–∞–∑–∞–ª:\n\n" +
          "‚Äî ¬´–Ø —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å **–¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞**, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä 42. –ß—Ç–æ –≤ –Ω—ë–º –µ—Å—Ç—å?¬ª\n\n" +
          "–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ GET –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî **–µ—Å–ª–∏ –µ–º—É —Ç–æ—á–Ω–æ —Å–∫–∞–∂—É—Ç, –æ –∫–∞–∫–æ–º –Ω–æ–º–µ—Ä–µ –∏–¥—ë—Ç —Ä–µ—á—å**.\n\n" +
          "–í Express –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –º–∞—Ä—à—Ä—É—Ç–µ —Å –ø–æ–º–æ—â—å—é <CodeHighlight>:</CodeHighlight>, –Ω–∞–ø—Ä–∏–º–µ—Ä <CodeHighlight>':id'</CodeHighlight>.\n" +
          "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç: ¬´–≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –±—É–¥–µ—Ç **—á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ**, –Ω–∞–ø—Ä–∏–º–µ—Ä <CodeHighlight>/rooms/42</CodeHighlight> –∏–ª–∏ <CodeHighlight>/rooms/7</CodeHighlight>¬ª.\n\n" +
          "–í–∞–∂–Ω–æ: **–∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º** ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, <CodeHighlight>:roomNumber</CodeHighlight> –∏–ª–∏ <CodeHighlight>:slug</CodeHighlight>.\n" +
          "–ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–æ –∂–µ –∏–º—è –≤ <CodeHighlight>req.params</CodeHighlight>.",
        codeFiles: {
          "server.js": `app.get('/rooms/:id', (req, res) => {
          // üî¢ –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
          // –ù–∞–ø—Ä–∏–º–µ—Ä: /rooms/42 ‚Äî –∏ —Ç–æ–≥–¥–∞ req.params.id === '42'

          const roomId = req.params.id;

          // ‚ú® –ü–æ–∫–∞ –º—ã –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω
          res.send(\`–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä \${roomId}. –í –Ω—ë–º: 2 –∫—Ä–æ–≤–∞—Ç–∏, Wi-Fi, –≤–∏–¥ –Ω–∞ –º–æ—Ä–µ.\`);

          // üõ† –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
          // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
          // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ
          // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (JSON/HTML)
        });`,
          "client.js": `// üöÄ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
import axios from 'axios';

// üîç –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –Ω–æ–º–µ—Ä–µ
const getRoomDetails = async (roomId) => {
  try {
    const response = await axios.get(\`http://localhost:3000/rooms/\${roomId}\`);
    
    console.log('–î–µ—Ç–∞–ª–∏ –Ω–æ–º–µ—Ä–∞:', response.data);
    // –í—ã–≤–µ–¥–µ—Ç: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä 42. –í –Ω—ë–º: 2 –∫—Ä–æ–≤–∞—Ç–∏, Wi-Fi, –≤–∏–¥ –Ω–∞ –º–æ—Ä–µ."
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  }
};

// üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–æ–º–µ—Ä–∞ 42
getRoomDetails(42);

// üöÄ –ò –¥–ª—è –Ω–æ–º–µ—Ä–∞ 7
getRoomDetails(7);`
        },
        metaphor: [
          "üîç –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ —Å—Ç–æ–π–∫–µ –∏ —Å–∫–∞–∑–∞–ª: ¬´–ü–æ–∫–∞–∂–∏—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä 42¬ª.",
          "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ GET —Å–º–æ—Ç—Ä–∏—Ç –≤ –∑–∞–ø–∏—Å–∫–µ (params) –∏ –Ω–∞—Ö–æ–¥–∏—Ç –Ω—É–∂–Ω—É—é –∫–æ–º–Ω–∞—Ç—É.",
          "<CodeHighlight>req.params</CodeHighlight> ‚Äî —ç—Ç–æ –∑–∞–ø–∏—Å–∫–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç.",
          "‚ùó –ò–º—è –Ω–∞ –∑–∞–ø–∏—Å–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–Ω–∞–ª, –≥–¥–µ –µ–≥–æ –∏—Å–∫–∞—Ç—å.",
        ],
        realExample: [
          "üåê –ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
          "–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∞–π—Ç –æ—Ç–µ–ª—è –∏ –Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–º–µ—Ä–∞.",
          "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ –∞–¥—Ä–µ—Å—É <CodeHighlight>/rooms/42</CodeHighlight>.",
          "–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–æ —á–∏—Å–ª–æ –∫–∞–∫ <CodeHighlight>req.params.id</CodeHighlight> (–∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∏–º—è, –µ—Å–ª–∏ —Ç—ã —Ç–∞–∫ —É–∫–∞–∑–∞–ª –≤ –º–∞—Ä—à—Ä—É—Ç–µ).",
          "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–µ—Ä–≤–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        ],
        whatWeLearned: [
          "üß© –£–∑–Ω–∞–ª–∏, –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL —á–µ—Ä–µ–∑ <CodeHighlight>req.params</CodeHighlight>.",
          "üìå –ü–æ–Ω—è–ª–∏, –∫–∞–∫ –¥–µ–ª–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, <CodeHighlight>/rooms/:id</CodeHighlight>.",
          "üß† –û—Å–æ–∑–Ω–∞–ª–∏, —á—Ç–æ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º–æ–º—É ‚Äî –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ <CodeHighlight>req.params</CodeHighlight>.",
        ],
        whatNext: [
          "üöÄ –¢–µ–ø–µ—Ä—å –º—ã —É–º–µ–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –∏—Ö ID ‚Äî —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!",
          "üì¶ –ù–æ –æ–¥–Ω–∞–∂–¥—ã –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∏ —Å–∫–∞–∑–∞–ª: ¬´–ü–æ–∫–∞–∂–∏—Ç–µ –º–Ω–µ —Ç–æ–ª—å–∫–æ –ª—é–∫—Å—ã –¥–æ 5000 —Ä—É–±–ª–µ–π –∏ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ!¬ª üåä",
          "ü§î –ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ GET –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è ‚Äî —ç—Ç–æ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –∞ **—Ñ–∏–ª—å—Ç—Ä –ø–æ —É—Å–ª–æ–≤–∏—è–º**.",
          "üîç –ö–∞–∫ –∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —á–µ—Ä–µ–∑ URL? –ß—Ç–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç **–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å** –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç?",
          "‚û°Ô∏è –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å —ç—Ç–∏–º –∏ —É–∑–Ω–∞–µ–º –ø—Ä–æ <CodeHighlight>query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã</CodeHighlight> ‚Äî –æ–Ω–∏ —É–º–µ—é—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É!",
        ],
      },

      {
        type: "code_files",
        title: "–ü–æ–∏—Å–∫ –ø–æ —É—Å–ª–æ–≤–∏—è–º ‚Äî app.get() —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ üîç",
        content:
          "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–æ—à—ë–ª –∫ —Å—Ç–æ–π–∫–µ –∏ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ü–æ–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–µ—à–µ–≤–ª–µ –∏ —Ç–æ–ª—å–∫–æ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ!¬ª üåä\n\n" +
          "–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –æ–Ω –Ω–µ –ø—Ä–æ—Å–∏—Ç **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä**, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É—Ä–æ–∫–µ, –∞ –≤—ã–¥–≤–∏–≥–∞–µ—Ç **—É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞**.\n\n" +
          "–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ **query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã** ‚Äî –æ–Ω–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ URL:\n" +
          "<CodeHighlight>/rooms?—Ç–∏–ø=–ª—é–∫—Å&—Ü–µ–Ω–∞–î–æ=5000</CodeHighlight>\n\n" +
          "–ú—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç <CodeHighlight>req.query</CodeHighlight>.",
        codeFiles: {
          "server.js": `app.get('/rooms', (req, res) => {
          // üîç –ö–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–ª —É—Å–ª–æ–≤–∏—è: –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –ª—é–∫—Å—ã –∏ —Ü–µ–Ω–∞ –¥–æ 5000
          const filters = req.query;

          // üßæ –ú—ã —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç
          console.log('–§–∏–ª—å—Ç—Ä—ã:', filters);

          // ‚ú® –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã
          res.send(\`–í—ã –∏—â–µ—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: \${JSON.stringify(filters)}\`);

          // üìå –í –±—É–¥—É—â–µ–º: –±—É–¥–µ–º –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ
        });`,
          "client.js": `// üöÄ –ö–ª–∏–µ–Ω—Ç –∏—â–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
import axios from 'axios';

// üîç –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å —Å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
const searchRooms = async (filters) => {
  try {
    // –°–æ–∑–¥–∞–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    const params = new URLSearchParams(filters);
    const response = await axios.get(\`http://localhost:3000/rooms?\${params}\`);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', response.data);
    // –í—ã–≤–µ–¥–µ—Ç: "–í—ã –∏—â–µ—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {"—Ç–∏–ø":"–ª—é–∫—Å","—Ü–µ–Ω–∞–î–æ":"5000"}"
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  }
};

// üöÄ –ò—â–µ–º –ª—é–∫—Å—ã –¥–æ 5000 —Ä—É–±–ª–µ–π
searchRooms({
  —Ç–∏–ø: '–ª—é–∫—Å',
  —Ü–µ–Ω–∞–î–æ: '5000'
});

// üöÄ –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ
searchRooms({
  –≤–∏–¥: '–º–æ—Ä–µ',
  —Ç–∏–ø: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
});`
        },
        metaphor: [
          "üîç –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "üë§ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç: ¬´–ü–æ–∫–∞–∂–∏—Ç–µ –º–Ω–µ *–Ω–µ–¥–æ—Ä–æ–≥–∏–µ –ª—é–∫—Å—ã —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ*¬ª.",
          "üìÑ –û–Ω –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –∞ –ø—Ä–æ—Å—Ç–æ –¥–∞—ë—Ç —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ.",
          "<CodeHighlight>req.query</CodeHighlight> ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–∏–ª –≤ –∑–∞–ø—Ä–æ—Å.",
          "<CodeHighlight>res</CodeHighlight> ‚Äî –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –Ω–∞—à –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É.",
        ],
        realExample: [
          "üåê –ü—Ä–∏–º–µ—Ä –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
          "–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∞–π—Ç –æ—Ç–µ–ª—è –∏ –≤–∫–ª—é—á–∞–µ—à—å —Ñ–∏–ª—å—Ç—Ä—ã: ¬´–¶–µ–Ω–∞ –¥–æ 5000¬ª, ¬´–¢–æ–ª—å–∫–æ –ª—é–∫—Å¬ª.",
          "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ <CodeHighlight>/rooms?—Ç–∏–ø=–ª—é–∫—Å&—Ü–µ–Ω–∞–î–æ=5000</CodeHighlight>.",
          "–°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ <CodeHighlight>req.query</CodeHighlight> –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–æ–º–µ—Ä–∞.",
        ],
        whatWeLearned: [
          "üì• –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å <CodeHighlight>query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</CodeHighlight> ‚Äî —É—Å–ª–æ–≤–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ URL.",
          "üîç –ù–∞—É—á–∏–ª–∏—Å—å –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏—Ö —á–µ—Ä–µ–∑ <CodeHighlight>req.query</CodeHighlight>.",
          "üì§ –û—Ç–≤–µ—Ç–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞.",
        ],
        whatNext: [
          "üéØ –¢–µ–ø–µ—Ä—å –Ω–∞—à –æ—Ç–µ–ª—å —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ (`params`) –∏ —É—Å–ª–æ–≤–∏—è–º–∏ (`query`).",
          "üì¶ –ù–æ –∏–Ω–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –≤—Ö–æ–¥–µ ‚Äî –æ–Ω–∏ –Ω–µ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –Ω–µ –≤ —Å—Å—ã–ª–∫–µ...",
          "üßæ –ì–¥–µ –∂–µ –æ–Ω–∏? –í—Å—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è **–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ (headers)**.",
          "ü§î –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å: ¬´–Ø VIP-–≥–æ—Å—Ç—å!¬ª ‚Äî –∏ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ –≤ `body`, –∞ –≤ `headers`.",
          "‚û°Ô∏è –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –Ω–∞—É—á–∏–º—Å—è —á–∏—Ç–∞—Ç—å **–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤**, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, —Å –∫–µ–º –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ, –µ—â—ë –¥–æ –æ–±—â–µ–Ω–∏—è.",
          "üß† –ò –¥–∞ ‚Äî —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–æ–∫–µ–Ω–æ–≤, —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!",
        ],
      },

      {
        type: "code_files",
        title: "–ó–∞–≥–ª—è–¥—ã–≤–∞–µ–º –≤ –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –∏–∑—É—á–∞–µ–º headers üíå",
        content:
          "–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –Ω–∞—à –æ—Ç–µ–ª—å –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –æ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç **–ø–∏—Å—å–º–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π**.\n\n" +
          "–≠—Ç–æ –ø–∏—Å—å–º–æ ‚Äî —ç—Ç–æ **–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞** (–∏–ª–∏ `headers`). –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ: —è–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–æ–µ.\n\n" +
          "–ú—ã –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é <CodeHighlight>req.headers</CodeHighlight>.\n\n" +
          "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å –Ω–∞–º–∏ –æ–±—â–∞—Ç—å—Å—è:",

        codeFiles: {
          "server.js": `app.get('/greet', (req, res) => {
        // üíå –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—à—ë–ª –∏ –æ—Å—Ç–∞–≤–∏–ª –ø–∏—Å—å–º–æ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        const language = req.headers['accept-language'];
      
        // üì¨ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–ª)
        if (language && language.startsWith('ru')) {
          res.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        } else {
          res.send('Welcome!');
        }
      
        // ‚ö†Ô∏è –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å headers:
        // 1. –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (Authorization)
        // 3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (JSON, HTML –∏ —Ç.–¥.)
      });`,
          "client.js": `// üöÄ –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
import axios from 'axios';

// üíå –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
const greetWithLanguage = async (language) => {
  try {
    const response = await axios.get('http://localhost:3000/greet', {
      headers: {
        'Accept-Language': language,
        'User-Agent': 'MyHotelApp/1.0'
      }
    });
    
    console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:', response.data);
    // –î–ª—è ru: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
    // –î–ª—è en: "Welcome!"
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  }
};

// üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º
greetWithLanguage('ru');

// üöÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
greetWithLanguage('en');

// üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
const authenticatedRequest = async () => {
  try {
    const response = await axios.get('http://localhost:3000/profile', {
      headers: {
        'Authorization': 'Bearer my-secret-token',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–ü—Ä–æ—Ñ–∏–ª—å:', response.data);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
  }
};

authenticatedRequest();`
        },

        metaphor: [
          "üíå –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–∏—Å—å–º–æ (headers), –≥–¥–µ —É–∫–∞–∑–∞–Ω–æ: –æ—Ç–∫—É–¥–∞ –æ–Ω, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ VIP-–ø—Ä–æ–ø—É—Å–∫.",
          "–ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —á–∏—Ç–∞–µ—Ç –ø–∏—Å—å–º–æ –∏ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫ —Å –Ω–∏–º –æ–±—â–∞—Ç—å—Å—è.",
          "üì¨ <CodeHighlight>req.headers</CodeHighlight> ‚Äî –≤—Å—ë, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø–∏—Å—å–º–µ –∫–ª–∏–µ–Ω—Ç–∞.",
          "üîê –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å—å–º–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á ‚Äî —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.",
        ],

        whatWeLearned: [
          "üíå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (headers) ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç.",
          "üì¨ –ü–æ–ª—É—á–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ <CodeHighlight>req.headers</CodeHighlight>.",
          "üåç –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å headers, —á—Ç–æ–±—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ —è–∑—ã–∫—É –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç—É.",
        ],

        realExample: [
          "üåê –ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
          "–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∞–π—Ç, –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Accept-Language` —É–∫–∞–∑–∞–Ω–æ `ru`.",
          "–ò–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `Authorization`.",
          "–í—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ <CodeHighlight>headers</CodeHighlight>.",
        ],

        whatNext: [
          "üò∞ –ê –≤–¥—Ä—É–≥ –ø—Ä–∏–¥—ë—Ç –∫—Ç–æ-—Ç–æ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –≤—Ä–µ–¥–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º?",
          "üëÄ –ú—ã –ø–æ–Ω—è–ª–∏: –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚Äî —É–∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.",
          "üö™ –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å **–æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ —É –≤—Ö–æ–¥–∞**, —á—Ç–æ–±—ã –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–ª –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ –æ—Ç–µ–ª—å.",
          "ü§´ –ù–∞–º–µ–∫–Ω—É–ª–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–∑–≤–∞—Ç—å –∫–æ–≥–æ-—Ç–æ‚Ä¶ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ. –ö—Ç–æ —É–º–µ–µ—Ç **–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –≤–ø—É—Å–∫–∞—Ç—å**.",
          "‚û°Ô∏è –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã –ø–æ–∫–∞–∂–µ–º, **–∫–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ö—Ä–∞–Ω—É —É –≤—Ö–æ–¥–∞** –∏ –∑–∞—â–∏—Ç–∏—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –≥–æ—Å—Ç–µ–π.",
        ],
      },

      {
        type: "code",
        title: "–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ ‚Äî app.use() üö™",
        content:
          "–í –æ—Ç–µ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–º–∞—Ä—à—Ä—É—Ç–æ–≤): —Ä–µ—Ü–µ–ø—Ü–∏—è, –∫—É—Ö–Ω—è, —Å–ø–æ—Ä—Ç–∑–∞–ª. –ù–æ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç **–¥–æ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç** ‚Äî –ø—Ä—è–º–æ **–Ω–∞ –≤—Ö–æ–¥–µ**.\n\n" +
          "–î–ª—è —ç—Ç–æ–≥–æ —É –Ω–∞—Å –µ—Å—Ç—å <CodeHighlight>app.use()</CodeHighlight> ‚Äî —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å Express:\n\n" +
          "‚û°Ô∏è ¬´–ü—Ä–∏–º–µ–Ω—è–π –≤–æ—Ç —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –ª–æ–≥–∏–∫—É **–¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤**, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, GET —ç—Ç–æ, POST –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å¬ª.\n\n" +
          "–°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ: **–≤–Ω—É—Ç—Ä—å <CodeHighlight>app.use()</CodeHighlight> –≤—Å—Ç–∞–≤–ª—è—é—Ç —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ middleware** ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å **–¥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤**. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n" +
          "‚Äî –ª–æ–≥–∏—Ä—É—é—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è,\n" +
          "‚Äî –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é,\n" +
          "‚Äî —Ñ–∏–ª—å—Ç—Ä—É—é—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã,\n" +
          "‚Äî —á–∏—Ç–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞,\n" +
          "‚Äî –∏ –¥–∞–∂–µ –º–æ–≥—É—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n\n" +
          "–ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å **–æ—Ö—Ä–∞–Ω—É —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞**, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∑–¥–∞–Ω–∏–µ.",
        code: `// üîß –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware: —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤
      app.use((req, res, next) => {
        console.log('üîç –ó–∞–ø—Ä–æ—Å:', req.method, req.url);
        next(); // üö¶ –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
      });
      
      // üìç –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
      app.get('/', (req, res) => {
        res.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
      });`,
        metaphor: [
          "üö™ –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "`app.use()` ‚Äî —ç—Ç–æ –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥ –≤ –∑–¥–∞–Ω–∏–µ.",
          "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É–¥–∞ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ—Ö, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—É–¥–∞ –æ–Ω–∏ –∏–¥—É—Ç.",
          "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∫ –Ω—É–∂–Ω—ã–º –∫–æ–º–Ω–∞—Ç–∞–º (–º–∞—Ä—à—Ä—É—Ç–∞–º).",
        ],
        whatWeLearned: [
          "üîÅ <CodeHighlight>app.use()</CodeHighlight> –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è **–≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤**.",
          "üîí –í–Ω—É—Ç—Ä—å —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è—é—Ç **middleware** ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –ª–æ–≥–∏—Ä—É—é—Ç, —Ñ–∏–ª—å—Ç—Ä—É—é—Ç.",
          "üß± –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–∫–∏—Ö –≤–µ—â–µ–π, –∫–∞–∫ <CodeHighlight>express.json()</CodeHighlight>, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ö–∞–∫–µ—Ä–æ–≤ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤.",
          "üö¶ –ß—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å –ø–æ—à—ë–ª –¥–∞–ª—å—à–µ ‚Äî –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å <CodeHighlight>next()</CodeHighlight>.",
        ],
        realExample: [
          "üåç –ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
          "–¢—ã –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∞–π—Ç ‚Äî –∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è IP.",
          "–≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <CodeHighlight>app.use()</CodeHighlight> –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –ø–æ–ø–∞–¥—ë—à—å –Ω–∞ —Å–∞–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
        ],
        whatNext: [
          "üß∞ –ú—ã –Ω–∞—É—á–∏–ª–∏—Å—å —Å—Ç–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ <CodeHighlight>app.use()</CodeHighlight>.",
          "üí° –ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ: **—á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏**, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ <CodeHighlight>app.use()</CodeHighlight>?",
          "üõ°Ô∏è –≠—Ç–æ –∏ –µ—Å—Ç—å **middleware** ‚Äî –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∏, —Ñ–∏–ª—å—Ç—Ä—ã, –ª–æ–≥–µ—Ä—ã, –ø–æ–º–æ—â–Ω–∏–∫–∏ Express.",
          "‚û°Ô∏è –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π middleware –∏ –Ω–∞—É—á–∏–º Express –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ—â—ë –¥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤!",
        ],
      },

      {
        type: "intro",
        title: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ—Å—Ç—Ä–æ–∏–ª —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä üéâ",
        content:
          "–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –æ–≥—Ä–æ–º–Ω—ã–π –ø—É—Ç—å: –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –æ—Ö—Ä–∞–Ω—ã –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.\n\n" +
          "–¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å:\n" +
          "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é <CodeHighlight>POST</CodeHighlight>\n" +
          "‚úÖ –û—Ç–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ <CodeHighlight>GET</CodeHighlight>\n" +
          "‚úÖ –û–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å <CodeHighlight>PUT</CodeHighlight>\n" +
          "‚úÖ –£–¥–∞–ª—è—Ç—å –µ—ë —á–µ—Ä–µ–∑ <CodeHighlight>DELETE</CodeHighlight>\n" +
          "‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å <CodeHighlight>params</CodeHighlight>, <CodeHighlight>query</CodeHighlight> –∏ <CodeHighlight>headers</CodeHighlight>\n" +
          "‚úÖ –ê –µ—â—ë ‚Äî —Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é –æ—Ö—Ä–∞–Ω—É —á–µ—Ä–µ–∑ <CodeHighlight>app.use()</CodeHighlight> üíÇ‚Äç‚ôÇÔ∏è\n\n" +
          "–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏–ª **—Å–∫–µ–ª–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞**, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –¥–µ—Ä–∂–∞—Ç—Å—è —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n" +
          "üß© –ù–æ –æ—Ö—Ä–∞–Ω–∞ –Ω–µ —Å—Ç–æ–∏—Ç –∏–∑ –≤–æ–∑–¥—É—Ö–∞... –ö—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ—Ç—Å–µ–∫–∞–µ—Ç –≤—Ä–µ–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–∏—à–µ—Ç –ª–æ–≥–∏ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤ JSON?\n\n" +
          "üîß –ü—Ä–∞–≤–∏–ª—å–Ω–æ. –≠—Ç–æ **middleware** ‚Äî –æ—Å–æ–±–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≥–ª–∞–∑–∞–º–∏, —É—à–∞–º–∏ –∏ —Ä—É–∫–∞–º–∏ —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n\n" +
          "üì¶ –ò —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –Ω–∏–º–∏ –ø–æ–±–ª–∏–∂–µ ‚Äî –∏ –¥–∞–∂–µ —Å–æ–∑–¥–∞—à—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π middleware-—Ñ–∏–ª—å—Ç—Ä! üî•",
        metaphor: [
          "üè® –ú–µ—Ç–∞—Ñ–æ—Ä–∞:",
          "–¢—ã –ø–æ—Å—Ç—Ä–æ–∏–ª **—É–º–Ω—ã–π –æ—Ç–µ–ª—å**:",
          "‚Äî –ì–¥–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–Ω–∞—é—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.",
          "‚Äî –ì–¥–µ –µ—Å—Ç—å –æ—Ö—Ä–∞–Ω–∞ –Ω–∞ –≤—Ö–æ–¥–µ.",
          "‚Äî –ì–¥–µ –º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –º–µ–Ω—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ.",
          "–ù–æ –∫—Ç–æ –∂–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å—Ç–æ–∏—Ç **–Ω–∞ –≤—Ö–æ–¥–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–∏ –≥–æ—Å—Ç–µ–π**? ü§î",
          "–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ —Ç—ã —É–∑–Ω–∞–µ—à—å ‚Äî —ç—Ç–æ –Ω–∞—à–∏ **–Ω–µ–≤–∏–¥–∏–º—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏**: middleware.",
        ],
        whatWeLearned: [
          "üîÅ –ü–æ–Ω—è–ª–∏, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã HTTP-–∑–∞–ø—Ä–æ—Å—ã –∏ –∫–∞–∫ Express –ø–æ–º–æ–≥–∞–µ—Ç —Å –Ω–∏–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.",
          "üß† –ò–∑—É—á–∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã: GET, POST, PUT, DELETE.",
          "üì¶ –ü–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.",
          "üîí –ù–∞—É—á–∏–ª–∏—Å—å —Å—Ç–∞–≤–∏—Ç—å –æ—Ö—Ä–∞–Ω—É —Å –ø–æ–º–æ—â—å—é <CodeHighlight>app.use()</CodeHighlight>.",
        ],
        realExample: [
          "üåê –ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
          "–¢—ã —É–∂–µ –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.",
          "–¢–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ —Å–∞–π—Ç—ã –∏ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã –¥–æ –±–∞–Ω–∫–æ–≤.",
          "–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É –Ω–∏—Ö **–ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º**.",
        ],
        whatNext: [
          "üõ° –ù–æ Express ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–∞—Ä—à—Ä—É—Ç—ã. –ï–≥–æ —Å–∏–ª–∞ ‚Äî –≤ –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ø–æ–º–æ—â–Ω–∏–∫–∞—Ö.",
          "üß∞ –í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ —Ç—ã —Å–æ–∑–¥–∞—à—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π **middleware** ‚Äî —Ñ–∏–ª—å—Ç—Ä, –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏ –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ª–∏—Ü–µ.",
          "üìö –ü—Ä–∏—Å—Ç–µ–≥–Ω–∏ —Ä–µ–º–Ω–∏ ‚Äî –¥–∞–ª—å—à–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∞—è –º–∞–≥–∏—è Express!",
        ],
      },
    ],
    []
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
  const currentStepData = useMemo(() => steps[currentStep], [steps, currentStep]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
  const handleLessonCompletion = useCallback(async () => {
    if (isLessonCompleted) return;

    try {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ
      const success = await completeLesson();
      if (success) {
        setLessonCompleted(true);
        setShowCongratulations(true);
        setIsLessonPassed(true);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ localStorage
        saveLessonProgress(4);
        console.log("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—Ä–æ–∫–∞–º–∏ Express —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          navigate("/libraries-from-scratch");
        }, 3000);
      } else {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:", error);
    }
  }, [completeLesson, isLessonCompleted, navigate, user?.userId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
  useEffect(() => {
    const stepAnswer = getStepAnswer(currentStep);
    if (stepAnswer && stepAnswer.answer) {
      setUserAnswer(stepAnswer.answer);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
      setIsCorrect(stepAnswer.isCorrect);
    } else {
      setUserAnswer("");
      setIsCorrect(null);
    }
  }, [currentStep, getStepAnswer, steps]);

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞ (–µ—Å–ª–∏ —É—Ä–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
  useEffect(() => {
    if (!isLessonCompleted) {
      clearLessonProgress();
      console.log("–û—á–∏—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è");
    }
  }, [isLessonCompleted, clearLessonProgress]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (lessonProgress.progress === 0) {
      updateCurrentStep(currentStep, steps.length);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —É—Ä–æ–∫
    const lessonPassed = checkLessonProgress(4);
    setIsLessonPassed(lessonPassed);
  }, [currentStep, steps.length, lessonProgress.progress, updateCurrentStep]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ localStorage
  const saveAnswer = (answer) => {
    saveStepAnswer(currentStep, answer);
  };

  const handleNext = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    const currentStepData = steps[currentStep];
    let canProceed = true;

    if (currentStepData.type === "practice") {
      // –î–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "quiz") {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "theory_practice") {
      // –î–ª—è —Ç–µ–æ—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      if (isCorrect !== true) {
        canProceed = false;
      }
    } else if (currentStepData.type === "additional_practice") {
      // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ 5 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      const completedTasks = currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true);
      if (completedTasks.length < 5) {
        canProceed = false;
      }
    }

    // –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
    if (currentStep >= steps.length - 1) {
      canProceed = false;
    }

    if (canProceed && currentStep < steps.length - 1) {
      updateCurrentStep(currentStep + 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setAdditionalTaskAnswers({});
      setAdditionalTaskHints({});
      setAdditionalTaskAttempts({});
      setAdditionalTaskShowAnswer({});
      setIsCorrect(null);
    } else if (!canProceed) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (currentStep >= steps.length - 1) {
        alert("üéØ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ —É—Ä–æ–∫–∞. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ!");
      } else if (currentStepData.type === "additional_practice") {
        const completedTasks = currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true);
        alert(`‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 5 –∑–∞–¥–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks.length}/5`);
      } else {
        alert("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!");
      }
    }
  };

  const handlePrevious = () => {
    if (currentStep > 0) {
      updateCurrentStep(currentStep - 1);
      setShowHint(false);
      setShowAnswer(false);
      setUserAnswer("");
      setAdditionalTaskAnswers({});
      setAdditionalTaskHints({});
      setAdditionalTaskAttempts({});
      setAdditionalTaskShowAnswer({});
      setIsCorrect(null);
    }
  };

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleTextChange = useCallback((e) => {
    setUserAnswer(e.target.value);
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ
  const handleQuizAnswerChange = useCallback((e) => {
    console.log("=== –ò–ó–ú–ï–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –í –¢–ï–°–¢–ï ===");
    console.log("e.target.value:", e.target.value);
    console.log("typeof e.target.value:", typeof e.target.value);
    setUserAnswer(e.target.value);
    console.log("setUserAnswer –≤—ã–∑–≤–∞–Ω —Å:", e.target.value);
  }, []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const toggleHint = useCallback(() => {
    setShowHint((prev) => !prev);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSX —Ç–µ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  const parseJSXInText = (text) => {
    if (!text) return [];

    const parts = [];
    let currentIndex = 0;

    while (currentIndex < text.length) {
      // –ò—â–µ–º CodeHighlight —Ç–µ–≥–∏
      const codeOpenTagIndex = text.indexOf("<CodeHighlight>", currentIndex);
      // –ò—â–µ–º WarningHighlight —Ç–µ–≥–∏
      const warningOpenTagIndex = text.indexOf("<WarningHighlight>", currentIndex);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–µ–≥ –±–ª–∏–∂–µ
      let openTagIndex = -1;
      let tagType = "";
      let openTagLength = 0;
      let closeTagLength = 0;

      if (codeOpenTagIndex !== -1 && (warningOpenTagIndex === -1 || codeOpenTagIndex < warningOpenTagIndex)) {
        openTagIndex = codeOpenTagIndex;
        tagType = "code";
        openTagLength = 15; // "<CodeHighlight>".length
        closeTagLength = 16; // "</CodeHighlight>".length
      } else if (warningOpenTagIndex !== -1) {
        openTagIndex = warningOpenTagIndex;
        tagType = "warning";
        openTagLength = 18; // "<WarningHighlight>".length
        closeTagLength = 19; // "</WarningHighlight>".length
      }

      if (openTagIndex === -1) {
        // –ù–µ—Ç –±–æ–ª—å—à–µ —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
        parts.push({ type: "text", content: text.slice(currentIndex) });
        break;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–≥–∞
      if (openTagIndex > currentIndex) {
        parts.push({ type: "text", content: text.slice(currentIndex, openTagIndex) });
      }

      // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
      const closeTagName = tagType === "code" ? "</CodeHighlight>" : "</WarningHighlight>";
      const closeTagIndex = text.indexOf(closeTagName, openTagIndex);

      if (closeTagIndex === -1) {
        // –ù–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Ç–µ–≥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        parts.push({ type: "text", content: text.slice(currentIndex) });
        break;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞
      const tagContent = text.slice(openTagIndex + openTagLength, closeTagIndex);
      parts.push({ type: tagType, content: tagContent });

      currentIndex = closeTagIndex + closeTagLength;
    }

    return parts;
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
  const normalizeAnswer = (answer) => {
    return answer
      .trim()
      .replace(/\s+/g, "") // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/["""]/g, '"') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏
      .replace(/[''']/g, "'") // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      .toLowerCase();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ
  const analyzeCodeErrors = (userCode, correctCode) => {
    const userLines = userCode
      .trim()
      .split("\n")
      .filter((line) => line.trim());
    const correctLines = correctCode
      .trim()
      .split("\n")
      .filter((line) => line.trim());

    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if (userLines.length < correctLines.length) {
      errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –≤—Å–µ ${correctLines.length} —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!userCode.includes("print")) {
      errors.push("–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é print() –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const operators = ["+", "-", "*", "/", "//", "%", "**"];
    const missingOperators = operators.filter((op) => correctCode.includes(op) && !userCode.includes(op));
    if (missingOperators.length > 0) {
      if (missingOperators.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä ${missingOperators[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${missingOperators.join(", ")}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    const variablePattern = /([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([^#\n]+)/g;
    const correctVars = {};
    const userVars = {};

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    let match;
    while ((match = variablePattern.exec(correctCode)) !== null) {
      const varName = match[1].trim();
      const varValue = match[2].trim();
      correctVars[varName] = varValue;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    variablePattern.lastIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    while ((match = variablePattern.exec(userCode)) !== null) {
      const varName = match[1].trim();
      const varValue = match[2].trim();
      userVars[varName] = varValue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const missingVars = Object.keys(correctVars).filter((varName) => !userVars[varName]);
    if (missingVars.length > 0) {
      errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${missingVars[0]}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    Object.keys(correctVars).forEach((varName) => {
      if (userVars[varName] && userVars[varName] !== correctVars[varName]) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${varName} - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á–∏—Å–ª–æ ${correctVars[varName]}`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const comparisonOps = ["==", "!=", ">", "<", ">=", "<="];
    const missingComparison = comparisonOps.filter((op) => correctCode.includes(op) && !userCode.includes(op));
    if (missingComparison.length > 0) {
      if (missingComparison.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${missingComparison[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${missingComparison.join(", ")}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if (userCode.includes("==") && !userCode.includes("print")) {
      errors.push("–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –≤—ã–≤–æ–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ print()");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    const logicalOps = ["and", "or", "not"];
    const missingLogical = logicalOps.filter((op) => correctCode.includes(op) && !userCode.includes(op));
    if (missingLogical.length > 0) {
      if (missingLogical.length === 1) {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä ${missingLogical[0]}`);
      } else {
        errors.push(`–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: ${missingLogical.join(", ")}`);
      }
    }

    return errors;
  };

  const handleAnswerSubmit = useCallback(() => {
    console.log("=== –ù–ê–ß–ê–õ–û handleAnswerSubmit ===");
    console.log("currentStep:", currentStep);
    console.log("userAnswer:", userAnswer);
    console.log("typeof userAnswer:", typeof userAnswer);

    const currentStepData = steps[currentStep];
    console.log("currentStepData:", currentStepData);
    console.log("currentStepData.type:", currentStepData.type);

    let isAnswerCorrect = false;

    if (currentStepData.type === "practice") {
      const normalizedUserAnswer = normalizeAnswer(userAnswer);
      const normalizedCorrectAnswer = normalizeAnswer(currentStepData.answer);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const isExactMatch = normalizedUserAnswer === normalizedCorrectAnswer;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
      const hasInput = normalizedUserAnswer.includes("input");
      const hasPrint = normalizedUserAnswer.includes("print");
      const hasInt = normalizedUserAnswer.includes("int");
      const hasFString = normalizedUserAnswer.includes('f"') || normalizedUserAnswer.includes("f'");
      const hasQuotes = normalizedUserAnswer.includes('"') || normalizedUserAnswer.includes("'");

      if (isExactMatch) {
        setIsCorrect(true);
        isAnswerCorrect = true;
      } else {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        const errors = analyzeCodeErrors(userAnswer, currentStepData.answer);
        if (errors.length > 0) {
          setIsCorrect({ type: "error", errors });
        } else {
          setIsCorrect("almost");
        }
        isAnswerCorrect = false;
      }
    } else if (currentStepData.type === "quiz") {
      console.log("=== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–°–¢–ê ===");
      console.log("userAnswer:", userAnswer);
      console.log("currentStepData.correct:", currentStepData.correct);
      console.log("typeof userAnswer:", typeof userAnswer);
      console.log("typeof currentStepData.correct:", typeof currentStepData.correct);

      // –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const userAnswerStr = userAnswer.toString();
      const correctAnswerStr = currentStepData.correct.toString();

      console.log("userAnswerStr:", userAnswerStr);
      console.log("correctAnswerStr:", correctAnswerStr);

      isAnswerCorrect = userAnswerStr === correctAnswerStr;
      console.log("isAnswerCorrect:", isAnswerCorrect);

      setIsCorrect(isAnswerCorrect);
      console.log("setIsCorrect –≤—ã–∑–≤–∞–Ω —Å:", isAnswerCorrect);
    } else if (currentStepData.type === "additional_practice") {
      // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
      const normalizedUserAnswer = normalizeAnswer(userAnswer);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
      let foundCorrectAnswer = false;
      for (const task of currentStepData.tasks) {
        const normalizedCorrectAnswer = normalizeAnswer(task.answer);
        if (normalizedUserAnswer === normalizedCorrectAnswer) {
          foundCorrectAnswer = true;
          break;
        }
      }

      setIsCorrect(foundCorrectAnswer);
      isAnswerCorrect = foundCorrectAnswer;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    console.log("=== –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê ===");
    console.log("currentStep:", currentStep);
    console.log("userAnswer:", userAnswer);
    console.log("isAnswerCorrect:", isAnswerCorrect);

    saveStepAnswer(currentStep, userAnswer, isAnswerCorrect);
    console.log("=== –ö–û–ù–ï–¶ handleAnswerSubmit ===");
  }, [currentStep, steps, userAnswer, normalizeAnswer, saveStepAnswer]);

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="max-w-4xl mx-auto p-6 mb-5 bg-gray-50 min-h-screen">
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º */}
      {showCongratulations && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="bg-white rounded-2xl p-8 max-w-md mx-4 text-center shadow-2xl"
          >
            <div className="text-6xl mb-4 animate-bounce">üéâ</div>
            <h2 className="text-2xl font-bold text-gray-800 mb-4">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
            <p className="text-gray-600 mb-6">–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É—Ä–æ–∫ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏"!</p>
            <div className="bg-green-50 rounded-lg p-4 mb-6">
              <p className="text-green-800 font-medium mb-2">üéØ –í—ã –∏–∑—É—á–∏–ª–∏:</p>
              <ul className="text-green-700 text-sm space-y-1">
                <li>‚Ä¢ –†–∞–±–æ—Ç—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (req.params)</li>
                <li>‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫—É query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (req.query)</li>
                <li>‚Ä¢ –ß—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ (req.headers)</li>
                <li>‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Å axios –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏</li>
              </ul>
            </div>
            <p className="text-gray-500 text-sm">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–æ–≤ Express —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
            <div className="mt-4">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <motion.div className="bg-green-500 h-2 rounded-full" initial={{ width: 0 }} animate={{ width: "100%" }} transition={{ duration: 3 }} />
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <div className="flex items-center space-x-2">
            <span className="text-sm font-medium text-gray-600">üìö –£—Ä–æ–∫ 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏</span>
            {isLessonPassed && <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">‚úÖ –ü—Ä–æ–π–¥–µ–Ω</span>}
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-sm font-medium text-gray-600">
              üìç {currentStep + 1} –∏–∑ {steps.length}
            </span>
            <span className="text-sm font-medium text-green-600">{Math.round(((currentStep + 1) / steps.length) * 100)}%</span>
          </div>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-3">
          <motion.div
            className="bg-gradient-to-r from-green-500 to-blue-500 h-3 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-xl shadow-xl p-8 mb-8 border border-gray-100">
        <motion.h1
          key={currentStep}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-3xl font-bold text-gray-800 mb-6 text-center"
        >
          {currentStepData.title}
        </motion.h1>

        <motion.div key={`content-${currentStep}`} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} className="space-y-6">
          {/* –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {currentStepData.content && (
            <div className="text-gray-700 leading-relaxed text-lg">
              {currentStepData.content.split("\n").map((line, index) => (
                <p key={index} className="mb-3">
                  {parseJSXInText(line).map((part, partIndex) =>
                    part.type === "code" ? (
                      <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                    ) : part.type === "warning" ? (
                      <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                    ) : (
                      <span key={partIndex}>{part.content}</span>
                    )
                  )}
                </p>
              ))}
            </div>
          )}

           {/* –ö–æ–¥ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ */}
           {currentStepData.codeFiles && (
            <div className="bg-gray-50 border border-gray-200 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <div className="flex space-x-2">
                  {Object.keys(currentStepData.codeFiles).map((fileName) => (
                    <button
                      key={fileName}
                      onClick={() => setActiveCodeTab(fileName)}
                      className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                        activeCodeTab === fileName ? "bg-blue-600 text-white shadow-lg" : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                      }`}
                    >
                      üìÅ {fileName}
                    </button>
                  ))}
                </div>
                <button
                  onClick={() => navigator.clipboard.writeText(currentStepData.codeFiles[activeCodeTab])}
                  className="text-gray-500 hover:text-gray-700 transition-colors flex items-center space-x-2"
                >
                  <span>üìã</span>
                  <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                </button>
              </div>
              <div className="overflow-y-auto p-4 border border-gray-200 rounded-lg">
                <code className="whitespace-pre text-base font-mono text-gray-800">
                  {currentStepData.codeFiles[activeCodeTab]?.split("\n").map((line, lineIndex) => (
                    <div key={lineIndex} className="leading-relaxed">
                      {line.split(" ").map((word, wordIndex) => {
                        // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                        let className = "text-gray-800";
                        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω–∏ –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (word.startsWith("//") || line.trim().startsWith("//")) {
                          className = "text-gray-500 italic";
                        }
                        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        else if (["const", "let", "var", "function", "if", "else", "return", "require", "module", "exports"].includes(word)) {
                          className = "text-blue-600 font-semibold";
                        }
                        // –°—Ç—Ä–æ–∫–∏
                        else if (word.includes("'") || word.includes('"')) {
                          className = "text-green-600";
                        }
                        // –ß–∏—Å–ª–∞
                        else if (/^\d+$/.test(word)) {
                          className = "text-orange-600";
                        }
                        // –ú–µ—Ç–æ–¥—ã
                        else if (word.includes("(") && !word.startsWith("(")) {
                          className = "text-purple-600";
                        }

                        return (
                          <span key={wordIndex} className={className}>
                            {word}{" "}
                          </span>
                        );
                      })}
                    </div>
                  ))}
                </code>
              </div>
            </div>
          )}

          {/* –û–±—ã—á–Ω—ã–π –∫–æ–¥ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤) */}
          {currentStepData.code && !currentStepData.codeFiles && currentStepData.type !== "theory_practice" && (
            <div className="bg-gray-50 border border-gray-200 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <span className="text-gray-700 font-medium flex items-center"> JavaScript</span>
                <button
                  onClick={() => navigator.clipboard.writeText(currentStepData.code)}
                  className="text-gray-500 hover:text-gray-700 transition-colors flex items-center space-x-2"
                >
                  <span>üìã</span>
                  <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                </button>
              </div>
              <div className="overflow-y-auto p-4 border border-gray-200 rounded-lg">
                <code className="whitespace-pre text-base font-mono text-gray-800">
                  {currentStepData.code.split("\n").map((line, lineIndex) => (
                    <div key={lineIndex} className="leading-relaxed">
                      {line.split(" ").map((word, wordIndex) => {
                        // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                        let className = "text-gray-800";

                        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–Ω–∏ –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                        if (word.startsWith("//") || line.trim().startsWith("//")) {
                          className = "text-gray-500 italic";
                        }
                        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        else if (["const", "let", "var", "function", "if", "else", "return", "require", "module", "exports"].includes(word)) {
                          className = "text-blue-600 font-semibold";
                        }
                        // –°—Ç—Ä–æ–∫–∏
                        else if (word.includes("'") || word.includes('"')) {
                          className = "text-green-600";
                        }
                        // –ß–∏—Å–ª–∞
                        else if (/^\d+$/.test(word)) {
                          className = "text-orange-600";
                        }
                        // –ú–µ—Ç–æ–¥—ã
                        else if (word.includes("(") && !word.startsWith("(")) {
                          className = "text-purple-600";
                        }

                        return (
                          <span key={wordIndex} className={className}>
                            {word}{" "}
                          </span>
                        );
                      })}
                    </div>
                  ))}
                </code>
              </div>
            </div>
          )}

          {/* –¶–µ–ª—å —É—Ä–æ–∫–∞ */}
          {currentStepData.goal && (
            <div className="bg-gradient-to-br from-orange-50 via-yellow-50 to-amber-50 border-l-4 border-orange-400 rounded-xl p-6 shadow-lg mb-6 relative overflow-hidden">
              <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-orange-200 to-yellow-200 rounded-full -mr-16 -mt-16 opacity-20"></div>
              <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-amber-200 to-orange-200 rounded-full -ml-12 -mb-12 opacity-20"></div>
              <div className="relative z-10">
                <div className="flex items-center mb-4">
                  <div className="bg-gradient-to-r from-orange-500 to-yellow-500 text-white p-3 rounded-full shadow-lg mr-4">
                    <span className="text-2xl">üéØ</span>
                  </div>
                  <div>
                    <h3 className="text-orange-800 font-bold text-xl">–¶–µ–ª—å —É—Ä–æ–∫–∞</h3>
                    <p className="text-orange-600 text-sm">–ß—Ç–æ –º—ã –∏–∑—É—á–∏–º –≤ —ç—Ç–æ–º —à–∞–≥–µ</p>
                  </div>
                </div>
                <div className="text-orange-800 text-lg font-medium leading-relaxed">
                  {parseJSXInText(currentStepData.goal).map((part, partIndex) =>
                    part.type === "code" ? (
                      <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                    ) : part.type === "warning" ? (
                      <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                    ) : (
                      <span key={partIndex}>{part.content}</span>
                    )
                  )}
                </div>
              </div>
            </div>
          )}

          {/* –ú–µ—Ç–∞—Ñ–æ—Ä–∞ */}
          {currentStepData.metaphor && (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 border-2 border-purple-300 rounded-xl p-6 shadow-lg mb-6">
              <div className="flex items-center mb-4">
                <span className="text-2xl mr-3">üé≠</span>
                <span className="text-purple-800 font-bold text-xl">–ú–µ—Ç–∞—Ñ–æ—Ä–∞</span>
              </div>
              <div className="space-y-3">
                {currentStepData.metaphor.map((line, i) => (
                  <p key={i} className="text-purple-700 text-lg">
                    {parseJSXInText(line).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </p>
                ))}
              </div>
            </div>
          )}

          {/* –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏ */}
          {currentStepData.realExample && (
            <div className="bg-gradient-to-br from-indigo-50 via-purple-50 to-pink-50 border-l-4 border-indigo-400 rounded-xl p-6 shadow-lg mb-6 relative overflow-hidden">
              <div className="absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-indigo-200 to-purple-200 rounded-full -mr-20 -mt-20 opacity-15"></div>
              <div className="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-pink-200 to-purple-200 rounded-full -ml-16 -mb-16 opacity-15"></div>
              <div className="relative z-10">
                <div className="flex items-center mb-4">
                  <div className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white p-3 rounded-full shadow-lg mr-4">
                    <span className="text-2xl">üåê</span>
                  </div>
                  <div>
                    <h3 className="text-indigo-800 font-bold text-xl">–ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏</h3>
                    <p className="text-indigo-600 text-sm">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö</p>
                  </div>
                </div>
                <div className="space-y-3">
                  {currentStepData.realExample.map((line, i) => (
                    <p key={i} className="text-indigo-800 text-lg">
                      {parseJSXInText(line).map((part, partIndex) =>
                        part.type === "code" ? (
                          <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                        ) : part.type === "warning" ? (
                          <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                        ) : (
                          <span key={partIndex}>{part.content}</span>
                        )
                      )}
                    </p>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ */}
          {currentStepData.explanation && currentStepData.type !== "theory_practice" && (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-400 p-6 rounded-xl">
              <div className="flex items-center mb-2">
                <span className="text-2xl mr-2">üí°</span>
                <span className="text-blue-800 font-semibold">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ</span>
              </div>
              <div className="text-blue-800 text-lg">
                {currentStepData.explanation.split("\n").map((line, index) => (
                  <p key={index} className="mb-3">
                    {line}
                  </p>
                ))}
              </div>
            </div>
          )}

          {/* –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤ */}
          {currentStepData.errorExample && (
            <div className="bg-gradient-to-r from-red-50 to-pink-50 border-l-4 border-red-400 p-4 rounded-xl mb-4">
              <div className="flex items-center mb-2">
                <span className="text-xl mr-2">‚ö†Ô∏è</span>
                <span className="text-red-800 font-semibold">–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤:</span>
              </div>
              <div className="text-red-800 text-lg">
                <pre className="bg-gray-900 rounded-lg p-3 text-red-300 text-sm mb-2 overflow-x-auto">{currentStepData.errorExample.code}</pre>
                <div>{currentStepData.errorExample.explanation}</div>
              </div>
            </div>
          )}

          {/* –ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä) */}
          {currentStepData.examples && (
            <div className="space-y-8 mb-4">
              <div className="flex items-center mb-2">
                <span className="text-xl mr-2">üõ†Ô∏è</span>
                <span className="text-green-800 font-semibold text-lg">–†–∞–∑–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</span>
              </div>
              {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–±–æ—Ä —Ä–µ–∑—é–º–µ */}
              {(() => {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                const groups = [];
                let currentGroup = null;
                let currentType = null;
                const typeRegex = /–ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è (.+)\?:/i;
                const resumeBlocks = [];

                let inResume = false;
                let currentResume = [];
                currentStepData.examples.forEach((ex, i) => {
                  // –ù–∞—á–∞–ª–æ —Ä–µ–∑—é–º–µ
                  if (ex.trim().startsWith("–†–µ–∑—é–º–∏—Ä—É—è:") || ex.trim().startsWith("–†–µ–∑—é–º–∏—Ä—É—è:")) {
                    if (currentResume.length > 0) {
                      resumeBlocks.push([...currentResume]);
                      currentResume = [];
                    }
                    inResume = true;
                    currentResume.push(ex);
                    return;
                  }
                  // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                  const match = ex.match(typeRegex);
                  if (match) {
                    if (inResume && currentResume.length > 0) {
                      resumeBlocks.push([...currentResume]);
                      currentResume = [];
                      inResume = false;
                    }
                    if (currentGroup) groups.push(currentGroup);
                    currentType = match[1].trim();
                    currentGroup = {
                      type: currentType,
                      items: [
                        {
                          type: "header",
                          content: ex,
                        },
                      ],
                    };
                    return;
                  }
                  // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∑—é–º–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å
                  if (inResume) {
                    currentResume.push(ex);
                    return;
                  }
                  // –û–±—ã—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
                  if (currentGroup) {
                    currentGroup.items.push({ type: "item", content: ex });
                  }
                });
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                if (inResume && currentResume.length > 0) {
                  resumeBlocks.push([...currentResume]);
                }
                if (currentGroup) groups.push(currentGroup);
                // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä—É–ø–ø—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                return (
                  <>
                    {groups.map((group, idx) => (
                      <div
                        key={idx}
                        className="bg-gradient-to-r from-gray-50 to-gray-100 border-2 border-green-300 rounded-2xl shadow-lg p-6 space-y-4 animate-fade-in"
                      >
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-2">üîπ</span>
                          <span className="text-green-900 font-bold text-xl">{group.type}</span>
                        </div>
                        <div className="space-y-4">
                          {group.items.map((item, i) => {
                            const ex = item.content;
                            // –ë–ª–æ–∫: –ì–¥–µ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è ... (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
                            if (item.type === "header") {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-yellow-100 to-yellow-50 border-l-4 border-yellow-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">üì¶</span>
                                  <span className="text-yellow-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –û—à–∏–±–∫–∞
                            if (ex.trim().startsWith("‚ö†Ô∏è") || ex.trim().startsWith("‚ùå")) {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-red-100 to-pink-50 border-l-4 border-red-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">‚ö†Ô∏è</span>
                                  <span className="text-red-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                            if (ex.trim().startsWith("‚úÖ")) {
                              return (
                                <div
                                  key={i}
                                  className="bg-gradient-to-r from-green-100 to-emerald-50 border-l-4 border-green-400 shadow-md rounded-xl p-4 flex items-center space-x-3 animate-fade-in"
                                >
                                  <span className="text-2xl">‚úÖ</span>
                                  <span className="text-green-900 font-semibold text-base">{ex}</span>
                                </div>
                              );
                            }
                            // –ë–ª–æ–∫: –ü—Ä–∏–º–µ—Ä (–∫–æ–¥)
                            const isCode =
                              ex.trim().match(/^[a-zA-Z_][a-zA-Z0-9_ ]* ?=|print\(|total ?=|score ?=|item[12] ?=|result ?=|^#|^\d+\./) ||
                              ex.trim() === "score + 10";
                            if (isCode) {
                              return (
                                <pre
                                  key={i}
                                  className="bg-gray-900 rounded-xl p-3 text-green-300 text-sm mb-2 overflow-x-auto border border-gray-700 animate-fade-in"
                                >
                                  {ex}
                                </pre>
                              );
                            }

                            // –ë–ª–æ–∫: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                            return (
                              <div
                                key={i}
                                className="bg-gradient-to-r from-blue-50 to-blue-100 border-l-4 border-blue-400 shadow rounded-xl p-4 text-blue-900 animate-fade-in"
                              >
                                {ex}
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ))}
                    {/* –†–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏ */}
                    {resumeBlocks.length > 0 && (
                      <div className="space-y-6 mt-16">
                        {resumeBlocks.map((resumeArr, i) => (
                          <div key={i} className="bg-white border border-gray-200 shadow rounded-2xl p-6 flex items-start space-x-4 animate-fade-in">
                            <span className="text-3xl mt-1 text-blue-400">üìå</span>
                            <div className="space-y-2 w-full">
                              {resumeArr.map((ex, j) =>
                                j === 0 ? (
                                  <div key={j} className="text-lg font-semibold text-blue-800 mb-1">
                                    {ex.replace(/–†–µ–∑—é–º–∏—Ä—É—è:/, "–†–µ–∑—é–º–∏—Ä—É—è:")}
                                  </div>
                                ) : (
                                  <div key={j} className="text-base text-gray-800 leading-relaxed">
                                    {ex}
                                  </div>
                                )
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </>
                );
              })()}
            </div>
          )}

          {/* –ü–æ—è—Å–Ω–µ–Ω–∏–µ –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö */}
          {/* {currentStepData.examples && (
            <div className="mt-4 text-green-900 text-base bg-green-50 border-l-4 border-green-400 rounded p-3">
              <span className="font-semibold">–í–∞–∂–Ω–æ:</span> –≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä,{" "}
              <span className="font-mono">int</span>). –ü—Ä–æ—Å—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: –¥–ª—è —á–∏—Å–µ–ª ‚Äî{" "}
              <span className="font-mono">int</span> –∏–ª–∏ <span className="font-mono">float</span>, –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ‚Äî <span className="font-mono">str</span>, –¥–ª—è
              –æ—Ç–≤–µ—Ç–æ–≤ "–¥–∞/–Ω–µ—Ç" ‚Äî <span className="font-mono">bool</span>. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏!"
            </div>
          )} */}

          {/* –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ */}
          {currentStepData.type === "practice" && (
            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-yellow-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üéØ</span>
                –ó–∞–¥–∞–Ω–∏–µ
              </h3>
              <p className="text-yellow-700 mb-4 text-lg">{currentStepData.task}</p>

              <div className="space-y-4">
                <textarea
                  value={userAnswer}
                  onChange={handleTextChange}
                  placeholder="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å..."
                  className="w-full h-60 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent text-lg font-mono resize-none"
                  spellCheck="false"
                />

                <div className="flex space-x-4">
                  <button
                    onClick={handleAnswerSubmit}
                    className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>‚úÖ</span>
                    <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</span>
                  </button>
                  <button
                    onClick={toggleHint}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üí°</span>
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </button>
                </div>

                {showHint && (
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üí°</span>
                      <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </div>
                    <div className="text-blue-800 text-lg">
                      {currentStepData.hint.split("\n").map((line, index) => (
                        <p key={index} className="mb-3">
                          {line}
                        </p>
                      ))}
                    </div>
                  </div>
                )}

                {isCorrect !== null && (
                  <div
                    className={`p-4 rounded-lg ${
                      isCorrect === true
                        ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                        : isCorrect === "almost"
                        ? "bg-gradient-to-r from-yellow-100 to-orange-100 border border-yellow-300"
                        : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                    }`}
                  >
                    {isCorrect === true ? (
                      <p className="text-green-800 text-lg font-semibold">üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.</p>
                    ) : isCorrect === "almost" ? (
                      <p className="text-yellow-800 text-lg font-semibold">
                        ‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø–æ—á—Ç–∏ –≤–µ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä—å —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤.
                      </p>
                    ) : isCorrect.type === "error" ? (
                      <div className="text-red-800">
                        <p className="text-lg font-semibold mb-3">‚ùå –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∫–æ–¥:</p>
                        <ul className="space-y-2">
                          {isCorrect.errors.map((error, index) => (
                            <li key={index} className="flex items-start space-x-2">
                              <span className="text-red-600 mt-1">‚Ä¢</span>
                              <span className="text-base">{error}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    ) : (
                      <p className="text-red-800 text-lg font-semibold">‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.</p>
                    )}
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è */}
                {currentStepData.type === "practice" && isCorrect === null && (
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                      <p className="text-blue-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
          {currentStepData.type === "additional_practice" && (
            <div className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-semibold text-indigo-800 flex items-center">{currentStepData.title}</h3>
                <div className="flex items-center space-x-2">
                  <span className="text-sm font-medium text-indigo-700">
                    –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true).length}/5
                  </span>
                  <div className="w-16 h-2 bg-indigo-200 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-gradient-to-r from-green-500 to-green-600 transition-all duration-300"
                      style={{
                        width: `${(currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true).length / 5) * 100}%`,
                      }}
                    />
                  </div>
                </div>
              </div>
              <p className="text-indigo-700 mb-6 text-lg">{currentStepData.content}</p>

              <div className="space-y-6">
                {currentStepData.tasks.map((task, index) => (
                  <div key={index} className="bg-white border border-indigo-200 rounded-lg p-4 shadow-md">
                    <h4 className="text-lg font-semibold text-indigo-800 mb-3">–ó–∞–¥–∞—á–∞ {index + 1}:</h4>
                    <p className="text-gray-700 mb-4 text-lg">{task.task}</p>

                    <div className="space-y-3">
                      <textarea
                        value={additionalTaskAnswers[index] || ""}
                        onChange={(e) => {
                          setAdditionalTaskAnswers((prev) => ({
                            ...prev,
                            [index]: e.target.value,
                          }));
                        }}
                        placeholder="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ –∑–¥–µ—Å—å..."
                        className="w-full h-40 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-base font-mono resize-none"
                        spellCheck="false"
                      />

                      <div className="flex space-x-3">
                        <button
                          onClick={() => {
                            const answer = additionalTaskAnswers[index] || "";
                            const normalizedUserAnswer = normalizeAnswer(answer);
                            const normalizedCorrectAnswer = normalizeAnswer(task.answer);
                            const isCorrect = normalizedUserAnswer === normalizedCorrectAnswer;

                            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                            if (!isCorrect) {
                              const currentAttempts = additionalTaskAttempts[index] || 0;
                              const newAttempts = currentAttempts + 1;
                              setAdditionalTaskAttempts((prev) => ({
                                ...prev,
                                [index]: newAttempts,
                              }));
                            }

                            let result;
                            if (isCorrect) {
                              result = true;
                            } else {
                              const errors = analyzeCodeErrors(answer, task.answer);
                              result = { type: "error", errors };
                            }

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
                            setAdditionalTaskAnswers((prev) => ({
                              ...prev,
                              [`${index}_correct`]: result,
                            }));
                          }}
                          disabled={!additionalTaskAnswers[index] || additionalTaskAnswers[index].trim() === ""}
                          className={`px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-md text-sm ${
                            additionalTaskAnswers[index] && additionalTaskAnswers[index].trim() !== ""
                              ? "bg-gradient-to-r from-indigo-500 to-indigo-600 text-white hover:from-indigo-600 hover:to-indigo-700"
                              : "bg-gray-300 text-gray-500 cursor-not-allowed"
                          }`}
                        >
                          <span>‚úÖ</span>
                          <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</span>
                        </button>
                        <button
                          onClick={() => {
                            setAdditionalTaskHints((prev) => ({
                              ...prev,
                              [index]: !prev[index],
                            }));
                          }}
                          className="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-md text-sm"
                        >
                          <span>üí°</span>
                          <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                        </button>
                        <button
                          onClick={() => {
                            setAdditionalTaskShowAnswer((prev) => ({
                              ...prev,
                              [index]: !prev[index],
                            }));
                          }}
                          disabled={additionalTaskAnswers[`${index}_correct`] !== true && (additionalTaskAttempts[index] || 0) < 5}
                          className={`px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-md text-sm ${
                            additionalTaskAnswers[`${index}_correct`] === true || (additionalTaskAttempts[index] || 0) >= 5
                              ? "bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:from-purple-600 hover:to-purple-700"
                              : "bg-gray-300 text-gray-500 cursor-not-allowed"
                          }`}
                        >
                          <span>üéØ</span>
                          <span>–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç</span>
                          {additionalTaskAnswers[`${index}_correct`] !== true && (additionalTaskAttempts[index] || 0) < 5 && (
                            <span className="text-xs">({additionalTaskAttempts[index] || 0}/5)</span>
                          )}
                        </button>
                      </div>

                      {additionalTaskHints[index] && (
                        <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-3">
                          <div className="flex items-center mb-2">
                            <span className="text-lg mr-2">üí°</span>
                            <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                          </div>
                          <div className="text-blue-800 text-base">{task.hint}</div>
                        </div>
                      )}

                      {additionalTaskAnswers[`${index}_correct`] !== undefined && (
                        <div
                          className={`p-3 rounded-lg ${
                            additionalTaskAnswers[`${index}_correct`] === true
                              ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                              : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                          }`}
                        >
                          {additionalTaskAnswers[`${index}_correct`] === true ? (
                            <p className="text-green-800 text-base font-semibold">üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
                          ) : additionalTaskAnswers[`${index}_correct`].type === "error" ? (
                            <div className="text-red-800">
                              <p className="text-base font-semibold mb-2">‚ùå –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –∫–æ–¥:</p>
                              <ul className="space-y-1">
                                {additionalTaskAnswers[`${index}_correct`].errors.map((error, errorIndex) => (
                                  <li key={errorIndex} className="flex items-start space-x-2">
                                    <span className="text-red-600 mt-1">‚Ä¢</span>
                                    <span className="text-sm">{error}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          ) : (
                            <p className="text-red-800 text-base font-semibold">‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.</p>
                          )}
                        </div>
                      )}

                      {/* –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç */}
                      {additionalTaskShowAnswer[index] && (
                        <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-3">
                          <div className="flex items-center mb-2">
                            <span className="text-lg mr-2">üéØ</span>
                            <span className="text-purple-800 font-semibold">–û—Ç–≤–µ—Ç:</span>
                          </div>
                          <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-lg">
                            <div className="flex items-center mb-2">
                              <span className="text-gray-700 font-medium text-sm"> JavaScript</span>
                            </div>
                            <div className="overflow-y-auto p-3 bg-gray-50 border border-gray-200 rounded">
                              <code className="whitespace-pre text-sm font-mono text-gray-800">
                                {task.answer.split("\n").map((line, lineIndex) => (
                                  <div key={lineIndex} className="leading-relaxed">
                                    {line.split(" ").map((word, wordIndex) => {
                                      let className = "text-gray-800";

                                      if (["const", "let", "var", "function", "if", "else", "return", "require", "module", "exports"].includes(word)) {
                                        className = "text-blue-600 font-semibold";
                                      } else if (word.includes("'") || word.includes('"')) {
                                        className = "text-green-600";
                                      } else if (/^\d+$/.test(word)) {
                                        className = "text-orange-600";
                                      } else if (word.startsWith("//")) {
                                        className = "text-gray-500 italic";
                                      } else if (word.includes("(") && !word.startsWith("(")) {
                                        className = "text-purple-600";
                                      }

                                      return (
                                        <span key={wordIndex} className={className}>
                                          {word}{" "}
                                        </span>
                                      );
                                    })}
                                  </div>
                                ))}
                              </code>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á */}
              {(() => {
                const completedTasks = currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true);
                const totalTasks = currentStepData.tasks.length;

                if (completedTasks.length === 0) {
                  return (
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                        <p className="text-blue-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 5 –∑–∞–¥–∞—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É</p>
                      </div>
                    </div>
                  );
                } else if (completedTasks.length < totalTasks) {
                  return (
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">üéØ</span>
                        <p className="text-yellow-800 text-lg">
                          –û—Ç–ª–∏—á–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω–æ {completedTasks.length} –∏–∑ {totalTasks} –∑–∞–¥–∞—á. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!
                        </p>
                      </div>
                    </div>
                  );
                } else {
                  return (
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4 mt-6">
                      <div className="flex items-center">
                        <span className="text-xl mr-2">üéâ</span>
                        <p className="text-green-800 text-lg font-semibold">–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.</p>
                      </div>
                    </div>
                  );
                }
              })()}
            </div>
          )}

          {/* –¢–µ–æ—Ä–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π */}
          {currentStepData.type === "theory_practice" && (
            <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-emerald-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üíª</span>
                –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
              </h3>

              <div className="space-y-6">
                {/* –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üéØ</span>
                    <span className="text-blue-800 font-semibold">–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</span>
                  </div>
                  <div className="bg-gray-900 rounded-lg p-4">
                    <pre className="text-green-400 text-lg font-mono">{currentStepData.expectedOutput}</pre>
                  </div>
                </div>

                {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
                <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üìù</span>
                    <span className="text-yellow-800 font-semibold">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</span>
                  </div>
                  <ol className="text-yellow-700 text-lg space-y-2">
                    <li>1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ (PyCharm, VS Code, IDLE –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π)</li>
                    <li>2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py</li>
                    <li>3. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–∏—é</li>
                    <li>4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
                    <li>5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</li>
                    <li>6. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</li>
                  </ol>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ */}
                <div className="flex space-x-4">
                  <button
                    onClick={() => {
                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                      setIsCorrect(true);
                      saveStepAnswer(currentStep, "theory_practice_completed", true);
                    }}
                    className="px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-lg hover:from-emerald-600 hover:to-emerald-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>‚úÖ</span>
                    <span>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</span>
                  </button>
                  <button
                    onClick={toggleHint}
                    className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üí°</span>
                    <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </button>
                  <button
                    onClick={() => setShowAnswer((prev) => !prev)}
                    className="px-6 py-3 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                  >
                    <span>üéØ</span>
                    <span>{showAnswer ? "–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç" : "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"}</span>
                  </button>
                </div>

                {/* –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç */}
                {showAnswer && (
                  <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üéØ</span>
                      <span className="text-purple-800 font-semibold">–†–µ—à–µ–Ω–∏–µ:</span>
                    </div>
                    <div className="bg-gradient-to-r from-gray-900 to-gray-800 rounded-xl p-6 shadow-lg">
                      <div className="flex items-center justify-between mb-4">
                        <span className="text-green-400 font-medium flex items-center">üêç Python</span>
                        <button
                          onClick={() => navigator.clipboard.writeText(currentStepData.code)}
                          className="text-gray-400 hover:text-white transition-colors flex items-center space-x-2"
                        >
                          <span>üìã</span>
                          <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>
                      </div>
                      <pre className="text-green-400 overflow-x-auto text-lg">
                        <code>{currentStepData.code}</code>
                      </pre>
                    </div>
                    {currentStepData.explanation && (
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-400 p-4 rounded-xl mt-4">
                        <div className="flex items-center mb-2">
                          <span className="text-2xl mr-2">üí°</span>
                          <span className="text-blue-800 font-semibold">–û–±—ä—è—Å–Ω–µ–Ω–∏–µ</span>
                        </div>
                        <div className="text-blue-800 text-lg">
                          {currentStepData.explanation.split("\n").map((line, index) => (
                            <p key={index} className="mb-3">
                              {line}
                            </p>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {showHint && currentStepData.hint && (
                  <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4">
                    <div className="flex items-center mb-2">
                      <span className="text-xl mr-2">üí°</span>
                      <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                    </div>
                    <div className="text-blue-800 text-lg">
                      {currentStepData.hint.split("\n").map((line, index) => (
                        <p key={index} className="mb-3">
                          {line}
                        </p>
                      ))}
                    </div>
                  </div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ */}
                {isCorrect === null && (
                  <div className="bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                      <p className="text-emerald-800 text-lg">–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–≤–æ–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∫–æ–¥–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</p>
                    </div>
                  </div>
                )}

                {isCorrect === true && (
                  <div className="bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300 rounded-lg p-4">
                    <div className="flex items-center">
                      <span className="text-xl mr-2">üéâ</span>
                      <p className="text-green-800 text-lg font-semibold">–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –¢–µ—Å—Ç */}
          {currentStepData.type === "quiz" && (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üß†</span>
                –í–æ–ø—Ä–æ—Å
              </h3>
              <p className="text-purple-700 mb-6 text-lg">{currentStepData.question}</p>

              <div className="space-y-3">
                {currentStepData.options.map((option, index) => (
                  <label key={index} className="flex items-center space-x-3 cursor-pointer p-3 rounded-lg hover:bg-purple-100 transition-colors">
                    <input
                      type="radio"
                      name="quiz"
                      value={index}
                      checked={userAnswer === index.toString()}
                      onChange={handleQuizAnswerChange}
                      className="text-purple-600 focus:ring-purple-500"
                    />
                    <span className="text-purple-700 text-lg">{option}</span>
                  </label>
                ))}
              </div>

              <div className="flex space-x-4 mt-4">
                <button
                  onClick={() => {
                    console.log('=== –ö–ù–û–ü–ö–ê "–ü–†–û–í–ï–†–ò–¢–¨ –û–¢–í–ï–¢" –ù–ê–ñ–ê–¢–ê ===');
                    console.log("userAnswer –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º:", userAnswer);
                    console.log("typeof userAnswer:", typeof userAnswer);
                    console.log("disabled:", !userAnswer);
                    handleAnswerSubmit();
                  }}
                  disabled={!userAnswer}
                  className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 shadow-lg ${
                    userAnswer
                      ? "bg-gradient-to-r from-purple-500 to-purple-600 text-white hover:from-purple-600 hover:to-purple-700"
                      : "bg-gray-300 text-gray-500 cursor-not-allowed"
                  }`}
                >
                  <span>‚úÖ</span>
                  <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç</span>
                </button>
                <button
                  onClick={toggleHint}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
                >
                  <span>üí°</span>
                  <span>–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                </button>
              </div>

              {showHint && currentStepData.hint && (
                <div className="bg-gradient-to-r from-blue-100 to-indigo-100 border border-blue-300 rounded-lg p-4 mt-4">
                  <div className="flex items-center mb-2">
                    <span className="text-xl mr-2">üí°</span>
                    <span className="text-blue-800 font-semibold">–ü–æ–¥—Å–∫–∞–∑–∫–∞</span>
                  </div>
                  <div className="text-blue-800 text-lg">
                    {currentStepData.hint.split("\n").map((line, index) => (
                      <p key={index} className="mb-3">
                        {line}
                      </p>
                    ))}
                  </div>
                </div>
              )}

              {isCorrect !== null && (
                <div
                  className={`mt-4 p-4 rounded-lg ${
                    isCorrect
                      ? "bg-gradient-to-r from-green-100 to-emerald-100 border border-green-300"
                      : "bg-gradient-to-r from-red-100 to-pink-100 border border-red-300"
                  }`}
                >
                  <p className={`text-lg font-semibold ${isCorrect ? "text-green-800" : "text-red-800"}`}>
                    {isCorrect
                      ? "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! input() –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."
                      : "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}
                  </p>
                </div>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å */}
              {currentStepData.type === "quiz" && isCorrect === null && (
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mt-4">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">‚ÑπÔ∏è</span>
                    <p className="text-blue-800 text-lg">
                      {userAnswer ? "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É" : "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ"}
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –∫—É—Ä—Å–∞ */}
          {currentStepData.reminders && <ReminderBlock reminders={currentStepData.reminders} />}

          {/* –ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏ */}
          {currentStepData.whatWeLearned && (
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-green-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">‚úÖ</span>
                –ß—Ç–æ –º—ã –∏–∑—É—á–∏–ª–∏
              </h3>
              <div className="space-y-3">
                {currentStepData.whatWeLearned.map((item, index) => (
                  <div key={index} className="text-green-800 text-lg">
                    {parseJSXInText(item).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ */}
          {currentStepData.summary && (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-purple-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üéØ</span>
                –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —É—Ä–æ–∫–∞
              </h3>
              <div className="space-y-3">
                {currentStepData.summary.map((item, index) => (
                  <div key={index} className="text-purple-800 text-lg">
                    {parseJSXInText(item).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* –ß—Ç–æ –¥–∞–ª—å—à–µ */}
          {currentStepData.whatNext && (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold text-blue-800 mb-4 flex items-center">
                <span className="text-2xl mr-2">üöÄ</span>
                –ß—Ç–æ –¥–∞–ª—å—à–µ
              </h3>
              <div className="space-y-3">
                {currentStepData.whatNext.map((item, index) => (
                  <div key={index} className="text-blue-800 text-lg">
                    {parseJSXInText(item).map((part, partIndex) =>
                      part.type === "code" ? (
                        <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
                      ) : part.type === "warning" ? (
                        <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
                      ) : (
                        <span key={partIndex}>{part.content}</span>
                      )
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </motion.div>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="flex justify-between items-center">
        <button
          onClick={handlePrevious}
          disabled={currentStep === 0}
          className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${
            currentStep === 0
              ? "bg-gray-300 text-gray-500 cursor-not-allowed"
              : "bg-gradient-to-r from-gray-600 to-gray-700 text-white hover:from-gray-700 hover:to-gray-800 shadow-lg"
          }`}
        >
          <span>‚Üê</span>
          <span>–ù–∞–∑–∞–¥</span>
        </button>

        <div className="flex space-x-4">
          <Link
            to="/python-course"
            className="px-6 py-3 bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
          >
            <span>üìö</span>
            <span>–ö Python –∫—É—Ä—Å—É</span>
          </Link>

          {lessonCompleted ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg animate-pulse">
              <span>üéâ</span>
              <span>–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</span>
            </div>
          ) : isLessonPassed ? (
            <button
              onClick={() => {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                clearLessonProgress();
                setLessonCompleted(false);
                setShowCongratulations(false);
                setIsLessonPassed(false);
                updateCurrentStep(0, steps.length);
                setUserAnswer("");
                setIsCorrect(null);
                setShowHint(false);

                // –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏–∑ localStorage –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
                try {
                  const completedLessons = JSON.parse(localStorage.getItem("completedLessons") || "[]");
                  const updatedLessons = completedLessons.filter((id) => id !== 4);
                  localStorage.setItem("completedLessons", JSON.stringify(updatedLessons));
                  console.log("–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ localStorage –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è");
                } catch (error) {
                  console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –∏–∑ localStorage:", error);
                }
              }}
              className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üîÑ</span>
              <span>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 && (currentStepData.type === "intro" || isCorrect === true) ? (
            <button
              onClick={handleLessonCompletion}
              className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 flex items-center space-x-2 shadow-lg"
            >
              <span>üéâ</span>
              <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫</span>
            </button>
          ) : currentStep === steps.length - 1 ? (
            <div className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg flex items-center space-x-2 shadow-lg">
              <span>üéØ</span>
              <span>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞</span>
            </div>
          ) : (
            <button
              onClick={handleNext}
              disabled={(() => {
                const currentStepData = steps[currentStep];
                if (currentStepData.type === "practice" || currentStepData.type === "quiz" || currentStepData.type === "theory_practice") {
                  // –ï—Å–ª–∏ —É—Ä–æ–∫ —É–∂–µ –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                  return isCorrect !== true && !isLessonPassed;
                } else if (currentStepData.type === "additional_practice") {
                  // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ 5 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                  const completedTasks = currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true);
                  return completedTasks.length < 5;
                }
                return false;
              })()}
              className={`px-6 py-3 rounded-lg transition-all duration-200 flex items-center space-x-2 ${(() => {
                const currentStepData = steps[currentStep];
                if (currentStepData.type === "practice" || currentStepData.type === "quiz" || currentStepData.type === "theory_practice") {
                  return isCorrect !== true && !isLessonPassed
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                    : "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
                } else if (currentStepData.type === "additional_practice") {
                  const completedTasks = currentStepData.tasks.filter((_, index) => additionalTaskAnswers[`${index}_correct`] === true);
                  return completedTasks.length < 5
                    ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                    : "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
                }
                return "bg-gradient-to-r from-green-500 to-green-600 text-white hover:from-green-600 hover:to-green-700 shadow-lg";
              })()}`}
            >
              <span>–î–∞–ª–µ–µ</span>
              <span>‚Üí</span>
            </button>
          )}
        </div>
      </div>

      {/* –ú–æ—Ç–∏–≤–∞—Ü–∏—è */}
      {currentStepData.motivation && (
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border-l-4 border-yellow-400 p-4 rounded-xl mt-8">
          <div className="flex items-center mb-2">
            <span className="text-xl mr-2">üí™</span>
            <span className="text-yellow-800 font-semibold">–ú–æ—Ç–∏–≤–∞—Ü–∏—è:</span>
          </div>
          <div className="text-yellow-800 text-lg">
            {parseJSXInText(currentStepData.motivation).map((part, partIndex) =>
              part.type === "code" ? (
                <CodeHighlight key={partIndex}>{part.content}</CodeHighlight>
              ) : part.type === "warning" ? (
                <WarningHighlight key={partIndex}>{part.content}</WarningHighlight>
              ) : (
                <span key={partIndex}>{part.content}</span>
              )
            )}
          </div>
        </div>
      )}
    </motion.div>
  );
}

export default ExpressLesson3;
